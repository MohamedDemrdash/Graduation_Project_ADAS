
GP_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae0  08000130  08000130  00001130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006c10  08006c10  00007c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce0  08006ce0  00008138  2**0
                  CONTENTS
  4 .ARM          00000000  08006ce0  08006ce0  00008138  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ce0  08006ce0  00008138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce0  08006ce0  00007ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ce4  08006ce4  00007ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  08006ce8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f0  20000138  08006e20  00008138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002428  08006e20  00008428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfb0  00000000  00000000  00008161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7d  00000000  00000000  00015111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00017f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  00018dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014024  00000000  00000000  00019855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d6b  00000000  00000000  0002d879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060792  00000000  00000000  0003e5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ed76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b4  00000000  00000000  0009edbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000a3070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000138 	.word	0x20000138
 800014c:	00000000 	.word	0x00000000
 8000150:	08006bf8 	.word	0x08006bf8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000013c 	.word	0x2000013c
 800016c:	08006bf8 	.word	0x08006bf8

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	@ 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_frsub>:
 800094c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000950:	e002      	b.n	8000958 <__addsf3>
 8000952:	bf00      	nop

08000954 <__aeabi_fsub>:
 8000954:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000958 <__addsf3>:
 8000958:	0042      	lsls	r2, r0, #1
 800095a:	bf1f      	itttt	ne
 800095c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000960:	ea92 0f03 	teqne	r2, r3
 8000964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800096c:	d06a      	beq.n	8000a44 <__addsf3+0xec>
 800096e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000976:	bfc1      	itttt	gt
 8000978:	18d2      	addgt	r2, r2, r3
 800097a:	4041      	eorgt	r1, r0
 800097c:	4048      	eorgt	r0, r1
 800097e:	4041      	eorgt	r1, r0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	2b19      	cmp	r3, #25
 8000986:	bf88      	it	hi
 8000988:	4770      	bxhi	lr
 800098a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000992:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4249      	negne	r1, r1
 80009aa:	ea92 0f03 	teq	r2, r3
 80009ae:	d03f      	beq.n	8000a30 <__addsf3+0xd8>
 80009b0:	f1a2 0201 	sub.w	r2, r2, #1
 80009b4:	fa41 fc03 	asr.w	ip, r1, r3
 80009b8:	eb10 000c 	adds.w	r0, r0, ip
 80009bc:	f1c3 0320 	rsb	r3, r3, #32
 80009c0:	fa01 f103 	lsl.w	r1, r1, r3
 80009c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__addsf3+0x78>
 80009ca:	4249      	negs	r1, r1
 80009cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009d4:	d313      	bcc.n	80009fe <__addsf3+0xa6>
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009da:	d306      	bcc.n	80009ea <__addsf3+0x92>
 80009dc:	0840      	lsrs	r0, r0, #1
 80009de:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	2afe      	cmp	r2, #254	@ 0xfe
 80009e8:	d251      	bcs.n	8000a8e <__addsf3+0x136>
 80009ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f2:	bf08      	it	eq
 80009f4:	f020 0001 	biceq.w	r0, r0, #1
 80009f8:	ea40 0003 	orr.w	r0, r0, r3
 80009fc:	4770      	bx	lr
 80009fe:	0049      	lsls	r1, r1, #1
 8000a00:	eb40 0000 	adc.w	r0, r0, r0
 8000a04:	3a01      	subs	r2, #1
 8000a06:	bf28      	it	cs
 8000a08:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a0c:	d2ed      	bcs.n	80009ea <__addsf3+0x92>
 8000a0e:	fab0 fc80 	clz	ip, r0
 8000a12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a16:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1e:	bfaa      	itet	ge
 8000a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a24:	4252      	neglt	r2, r2
 8000a26:	4318      	orrge	r0, r3
 8000a28:	bfbc      	itt	lt
 8000a2a:	40d0      	lsrlt	r0, r2
 8000a2c:	4318      	orrlt	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	f092 0f00 	teq	r2, #0
 8000a34:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a38:	bf06      	itte	eq
 8000a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a3e:	3201      	addeq	r2, #1
 8000a40:	3b01      	subne	r3, #1
 8000a42:	e7b5      	b.n	80009b0 <__addsf3+0x58>
 8000a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a4c:	bf18      	it	ne
 8000a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a52:	d021      	beq.n	8000a98 <__addsf3+0x140>
 8000a54:	ea92 0f03 	teq	r2, r3
 8000a58:	d004      	beq.n	8000a64 <__addsf3+0x10c>
 8000a5a:	f092 0f00 	teq	r2, #0
 8000a5e:	bf08      	it	eq
 8000a60:	4608      	moveq	r0, r1
 8000a62:	4770      	bx	lr
 8000a64:	ea90 0f01 	teq	r0, r1
 8000a68:	bf1c      	itt	ne
 8000a6a:	2000      	movne	r0, #0
 8000a6c:	4770      	bxne	lr
 8000a6e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a72:	d104      	bne.n	8000a7e <__addsf3+0x126>
 8000a74:	0040      	lsls	r0, r0, #1
 8000a76:	bf28      	it	cs
 8000a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a7c:	4770      	bx	lr
 8000a7e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a82:	bf3c      	itt	cc
 8000a84:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a88:	4770      	bxcc	lr
 8000a8a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	4770      	bx	lr
 8000a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a9c:	bf16      	itet	ne
 8000a9e:	4608      	movne	r0, r1
 8000aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa4:	4601      	movne	r1, r0
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	bf06      	itte	eq
 8000aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aae:	ea90 0f01 	teqeq	r0, r1
 8000ab2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_ui2f>:
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e004      	b.n	8000ac8 <__aeabi_i2f+0x8>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2f>:
 8000ac0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ac4:	bf48      	it	mi
 8000ac6:	4240      	negmi	r0, r0
 8000ac8:	ea5f 0c00 	movs.w	ip, r0
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	e01c      	b.n	8000b16 <__aeabi_l2f+0x2a>

08000adc <__aeabi_ul2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e00a      	b.n	8000b00 <__aeabi_l2f+0x14>
 8000aea:	bf00      	nop

08000aec <__aeabi_l2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__aeabi_l2f+0x14>
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	ea5f 0c01 	movs.w	ip, r1
 8000b04:	bf02      	ittt	eq
 8000b06:	4684      	moveq	ip, r0
 8000b08:	4601      	moveq	r1, r0
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b10:	bf08      	it	eq
 8000b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b1a:	fabc f28c 	clz	r2, ip
 8000b1e:	3a08      	subs	r2, #8
 8000b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b24:	db10      	blt.n	8000b48 <__aeabi_l2f+0x5c>
 8000b26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f102 0220 	add.w	r2, r2, #32
 8000b4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b58:	fa21 f202 	lsr.w	r2, r1, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bba:	2afd      	cmp	r2, #253	@ 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	@ 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	@ 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	@ 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__aeabi_f2uiz>:
 8000e08:	0042      	lsls	r2, r0, #1
 8000e0a:	d20e      	bcs.n	8000e2a <__aeabi_f2uiz+0x22>
 8000e0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e10:	d30b      	bcc.n	8000e2a <__aeabi_f2uiz+0x22>
 8000e12:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1a:	d409      	bmi.n	8000e30 <__aeabi_f2uiz+0x28>
 8000e1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e24:	fa23 f002 	lsr.w	r0, r3, r2
 8000e28:	4770      	bx	lr
 8000e2a:	f04f 0000 	mov.w	r0, #0
 8000e2e:	4770      	bx	lr
 8000e30:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e34:	d101      	bne.n	8000e3a <__aeabi_f2uiz+0x32>
 8000e36:	0242      	lsls	r2, r0, #9
 8000e38:	d102      	bne.n	8000e40 <__aeabi_f2uiz+0x38>
 8000e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3e:	4770      	bx	lr
 8000e40:	f04f 0000 	mov.w	r0, #0
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <vACC_Init>:




void vACC_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af02      	add	r7, sp, #8

	xTaskCreate(vACC_Task, "acc main ", 128,( void * )NULL, 1, &vACC_Task_Handler);
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <vACC_Init+0x48>)
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	2301      	movs	r3, #1
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2300      	movs	r3, #0
 8000e58:	2280      	movs	r2, #128	@ 0x80
 8000e5a:	490e      	ldr	r1, [pc, #56]	@ (8000e94 <vACC_Init+0x4c>)
 8000e5c:	480e      	ldr	r0, [pc, #56]	@ (8000e98 <vACC_Init+0x50>)
 8000e5e:	f001 fee9 	bl	8002c34 <xTaskCreate>
	xTaskCreate(vACC_Sign, "sign", 128,( void * )NULL, 1, &vSign_Task_Handler);
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <vACC_Init+0x54>)
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	2301      	movs	r3, #1
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	2280      	movs	r2, #128	@ 0x80
 8000e6e:	490c      	ldr	r1, [pc, #48]	@ (8000ea0 <vACC_Init+0x58>)
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <vACC_Init+0x5c>)
 8000e72:	f001 fedf 	bl	8002c34 <xTaskCreate>


	/* Suspend both tasks untill user turn on the acc mode */
	vTaskSuspend(vACC_Task_Handler);
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <vACC_Init+0x48>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 f844 	bl	8002f08 <vTaskSuspend>
	vTaskSuspend(vSign_Task_Handler);
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <vACC_Init+0x54>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 f83f 	bl	8002f08 <vTaskSuspend>

}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000154 	.word	0x20000154
 8000e94:	08006c10 	.word	0x08006c10
 8000e98:	08000ea9 	.word	0x08000ea9
 8000e9c:	20000158 	.word	0x20000158
 8000ea0:	08006c1c 	.word	0x08006c1c
 8000ea4:	08001001 	.word	0x08001001

08000ea8 <vACC_Task>:




void vACC_Task(void * pvParameter)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	float K;
	uint16_t Loc_Front_Car_Distance = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	817b      	strh	r3, [r7, #10]
	while(1)
	{

		if(gFront_Distance > gWarning_Distance && gFront_Distance > Loc_Front_Car_Distance )
 8000eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe0 <vACC_Task+0x138>)
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe4 <vACC_Task+0x13c>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d940      	bls.n	8000f42 <vACC_Task+0x9a>
 8000ec0:	4b47      	ldr	r3, [pc, #284]	@ (8000fe0 <vACC_Task+0x138>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	897a      	ldrh	r2, [r7, #10]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d23b      	bcs.n	8000f42 <vACC_Task+0x9a>
		{
			xSemaphoreTake(Motors_Semaphore_Handler, portMAX_DELAY);
 8000eca:	4b47      	ldr	r3, [pc, #284]	@ (8000fe8 <vACC_Task+0x140>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fd40 	bl	8002958 <xQueueSemaphoreTake>
			gCar_Direction = FORWARD;
 8000ed8:	4b44      	ldr	r3, [pc, #272]	@ (8000fec <vACC_Task+0x144>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
			gCurrent_Speed = gDesired_Speed;
 8000ede:	4b44      	ldr	r3, [pc, #272]	@ (8000ff0 <vACC_Task+0x148>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b43      	ldr	r3, [pc, #268]	@ (8000ff4 <vACC_Task+0x14c>)
 8000ee6:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(Motors_Semaphore_Handler);
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe8 <vACC_Task+0x140>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	2300      	movs	r3, #0
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f001 fc9f 	bl	8002834 <xQueueGenericSend>

			/* ----- Calculate Slow down Parameters ---- */
			K = ( (float)gCurrent_Speed / ( gWarning_Distance - gBreaking_Distance) );
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff4 <vACC_Task+0x14c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fddc 	bl	8000ab8 <__aeabi_ui2f>
 8000f00:	4604      	mov	r4, r0
 8000f02:	4b38      	ldr	r3, [pc, #224]	@ (8000fe4 <vACC_Task+0x13c>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff8 <vACC_Task+0x150>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fdd6 	bl	8000ac0 <__aeabi_i2f>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f7ff fed9 	bl	8000cd0 <__aeabi_fdiv>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	60fb      	str	r3, [r7, #12]
			K = roundf( K * 100) / 100 ;
 8000f22:	4936      	ldr	r1, [pc, #216]	@ (8000ffc <vACC_Task+0x154>)
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f7ff fe1f 	bl	8000b68 <__aeabi_fmul>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 fe3f 	bl	8006bb0 <roundf>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4931      	ldr	r1, [pc, #196]	@ (8000ffc <vACC_Task+0x154>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff feca 	bl	8000cd0 <__aeabi_fdiv>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60fb      	str	r3, [r7, #12]
		{
 8000f40:	e049      	b.n	8000fd6 <vACC_Task+0x12e>

		}else if(gFront_Distance < gWarning_Distance && gFront_Distance > gBreaking_Distance)
 8000f42:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <vACC_Task+0x138>)
 8000f44:	881a      	ldrh	r2, [r3, #0]
 8000f46:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <vACC_Task+0x13c>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d229      	bcs.n	8000fa2 <vACC_Task+0xfa>
 8000f4e:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <vACC_Task+0x138>)
 8000f50:	881a      	ldrh	r2, [r3, #0]
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <vACC_Task+0x150>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d923      	bls.n	8000fa2 <vACC_Task+0xfa>
		{
			Loc_Front_Car_Distance = gFront_Distance;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <vACC_Task+0x138>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	817b      	strh	r3, [r7, #10]

			/* ---------- TODO: slow down mechanism ------- */
			gCurrent_Speed = K * (gFront_Distance - gBreaking_Distance);
 8000f60:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <vACC_Task+0x138>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <vACC_Task+0x150>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fda7 	bl	8000ac0 <__aeabi_i2f>
 8000f72:	4603      	mov	r3, r0
 8000f74:	68f9      	ldr	r1, [r7, #12]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fdf6 	bl	8000b68 <__aeabi_fmul>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff42 	bl	8000e08 <__aeabi_f2uiz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <vACC_Task+0x14c>)
 8000f8a:	701a      	strb	r2, [r3, #0]
			if(gCurrent_Speed < 10)
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <vACC_Task+0x14c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d820      	bhi.n	8000fd6 <vACC_Task+0x12e>
			{
				gCurrent_Speed = 0;
 8000f94:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <vACC_Task+0x14c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
				gCar_Direction = STOP;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <vACC_Task+0x144>)
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	701a      	strb	r2, [r3, #0]
			if(gCurrent_Speed < 10)
 8000fa0:	e019      	b.n	8000fd6 <vACC_Task+0x12e>
			}
			/*---------------------------------------------*/

		}else if(gFront_Distance <= gBreaking_Distance)
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <vACC_Task+0x138>)
 8000fa4:	881a      	ldrh	r2, [r3, #0]
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <vACC_Task+0x150>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d813      	bhi.n	8000fd6 <vACC_Task+0x12e>
		{
			xSemaphoreTake(Motors_Semaphore_Handler, portMAX_DELAY);
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <vACC_Task+0x140>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fcce 	bl	8002958 <xQueueSemaphoreTake>
			gCar_Direction = STOP;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <vACC_Task+0x144>)
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	701a      	strb	r2, [r3, #0]
			gCurrent_Speed = 0;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <vACC_Task+0x14c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(Motors_Semaphore_Handler);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <vACC_Task+0x140>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f001 fc2f 	bl	8002834 <xQueueGenericSend>
		}else{}
		vTaskDelay(100);
 8000fd6:	2064      	movs	r0, #100	@ 0x64
 8000fd8:	f001 ff72 	bl	8002ec0 <vTaskDelay>
		if(gFront_Distance > gWarning_Distance && gFront_Distance > Loc_Front_Car_Distance )
 8000fdc:	e76a      	b.n	8000eb4 <vACC_Task+0xc>
 8000fde:	bf00      	nop
 8000fe0:	20000162 	.word	0x20000162
 8000fe4:	20000166 	.word	0x20000166
 8000fe8:	20000170 	.word	0x20000170
 8000fec:	20000185 	.word	0x20000185
 8000ff0:	20000186 	.word	0x20000186
 8000ff4:	20000184 	.word	0x20000184
 8000ff8:	20000164 	.word	0x20000164
 8000ffc:	42c80000 	.word	0x42c80000

08001000 <vACC_Sign>:
	}
}


void vACC_Sign(void * pvParameter)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

	while(1)
	{
		switch(gReceived_Sign)
 8001008:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <vACC_Sign+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b0c      	subs	r3, #12
 800100e:	2b03      	cmp	r3, #3
 8001010:	d81d      	bhi.n	800104e <vACC_Sign+0x4e>
 8001012:	a201      	add	r2, pc, #4	@ (adr r2, 8001018 <vACC_Sign+0x18>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001029 	.word	0x08001029
 800101c:	08001031 	.word	0x08001031
 8001020:	08001039 	.word	0x08001039
 8001024:	08001041 	.word	0x08001041
		{

		case SPEED_30:
			gDesired_Speed = SPEED_MAPPED_TO_30;
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <vACC_Sign+0x5c>)
 800102a:	220f      	movs	r2, #15
 800102c:	801a      	strh	r2, [r3, #0]
			break ;
 800102e:	e00e      	b.n	800104e <vACC_Sign+0x4e>

		case SPEED_60:
			gDesired_Speed = SPEED_MAPPED_TO_60;
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <vACC_Sign+0x5c>)
 8001032:	2219      	movs	r2, #25
 8001034:	801a      	strh	r2, [r3, #0]
			break ;
 8001036:	e00a      	b.n	800104e <vACC_Sign+0x4e>

		case SPEED_90:
			gDesired_Speed = SPEED_MAPPED_TO_90;
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <vACC_Sign+0x5c>)
 800103a:	2223      	movs	r2, #35	@ 0x23
 800103c:	801a      	strh	r2, [r3, #0]
			break ;
 800103e:	e006      	b.n	800104e <vACC_Sign+0x4e>

		case STOP_SIGN:
			gDesired_Speed = 0;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <vACC_Sign+0x5c>)
 8001042:	2200      	movs	r2, #0
 8001044:	801a      	strh	r2, [r3, #0]
			gCar_Direction = STOP;
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <vACC_Sign+0x60>)
 8001048:	2203      	movs	r2, #3
 800104a:	701a      	strb	r2, [r3, #0]
			break ;
 800104c:	bf00      	nop
		}

		vTaskDelay(100);
 800104e:	2064      	movs	r0, #100	@ 0x64
 8001050:	f001 ff36 	bl	8002ec0 <vTaskDelay>
		switch(gReceived_Sign)
 8001054:	e7d8      	b.n	8001008 <vACC_Sign+0x8>
 8001056:	bf00      	nop
 8001058:	20000188 	.word	0x20000188
 800105c:	20000186 	.word	0x20000186
 8001060:	20000185 	.word	0x20000185

08001064 <vAEB_Init>:
void vAEB_Task(void * pvParameter);



void vAEB_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af02      	add	r7, sp, #8

    xTaskCreate(vAEB_Task, "AEB", 128,( void * )NULL, 3,&vAEB_Task_Handler);
 800106a:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <vAEB_Init+0xa4>)
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	2303      	movs	r3, #3
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	2280      	movs	r2, #128	@ 0x80
 8001076:	4925      	ldr	r1, [pc, #148]	@ (800110c <vAEB_Init+0xa8>)
 8001078:	4825      	ldr	r0, [pc, #148]	@ (8001110 <vAEB_Init+0xac>)
 800107a:	f001 fddb 	bl	8002c34 <xTaskCreate>
	xTaskCreate(vCar_Task, "AEB", 128,( void * )NULL, 2, NULL);
 800107e:	2300      	movs	r3, #0
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2302      	movs	r3, #2
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2300      	movs	r3, #0
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	4920      	ldr	r1, [pc, #128]	@ (800110c <vAEB_Init+0xa8>)
 800108c:	4821      	ldr	r0, [pc, #132]	@ (8001114 <vAEB_Init+0xb0>)
 800108e:	f001 fdd1 	bl	8002c34 <xTaskCreate>
	xTaskCreate(vCalculations_Task, "AEB", 128,( void * )NULL, 4, NULL);
 8001092:	2300      	movs	r3, #0
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	2304      	movs	r3, #4
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2300      	movs	r3, #0
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	491b      	ldr	r1, [pc, #108]	@ (800110c <vAEB_Init+0xa8>)
 80010a0:	481d      	ldr	r0, [pc, #116]	@ (8001118 <vAEB_Init+0xb4>)
 80010a2:	f001 fdc7 	bl	8002c34 <xTaskCreate>


	/* Create semaphores */
	Front_Distance_Semaphore_Handler = xSemaphoreCreateBinary();
 80010a6:	2203      	movs	r2, #3
 80010a8:	2100      	movs	r1, #0
 80010aa:	2001      	movs	r0, #1
 80010ac:	f001 fb63 	bl	8002776 <xQueueGenericCreate>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a1a      	ldr	r2, [pc, #104]	@ (800111c <vAEB_Init+0xb8>)
 80010b4:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(Front_Distance_Semaphore_Handler);
 80010b6:	4b19      	ldr	r3, [pc, #100]	@ (800111c <vAEB_Init+0xb8>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	2300      	movs	r3, #0
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	f001 fbb8 	bl	8002834 <xQueueGenericSend>

	Current_Speed_Semaphore_Handler = xSemaphoreCreateBinary();
 80010c4:	2203      	movs	r2, #3
 80010c6:	2100      	movs	r1, #0
 80010c8:	2001      	movs	r0, #1
 80010ca:	f001 fb54 	bl	8002776 <xQueueGenericCreate>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <vAEB_Init+0xbc>)
 80010d2:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(Current_Speed_Semaphore_Handler);
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <vAEB_Init+0xbc>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	2300      	movs	r3, #0
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	f001 fba9 	bl	8002834 <xQueueGenericSend>

	Motors_Semaphore_Handler = xSemaphoreCreateBinary();
 80010e2:	2203      	movs	r2, #3
 80010e4:	2100      	movs	r1, #0
 80010e6:	2001      	movs	r0, #1
 80010e8:	f001 fb45 	bl	8002776 <xQueueGenericCreate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <vAEB_Init+0xc0>)
 80010f0:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(Motors_Semaphore_Handler);
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <vAEB_Init+0xc0>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	2300      	movs	r3, #0
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	f001 fb9a 	bl	8002834 <xQueueGenericSend>

}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000015c 	.word	0x2000015c
 800110c:	08006c24 	.word	0x08006c24
 8001110:	08001129 	.word	0x08001129
 8001114:	08001295 	.word	0x08001295
 8001118:	08001359 	.word	0x08001359
 800111c:	20000168 	.word	0x20000168
 8001120:	2000016c 	.word	0x2000016c
 8001124:	20000170 	.word	0x20000170

08001128 <vAEB_Task>:




void vAEB_Task(void * pvParameter)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint16_t Loc_Object_Distance = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	81fb      	strh	r3, [r7, #14]
	float K  = 0;
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]

	for(;;)
	{
		if(gFront_Distance > gWarning_Distance && gCurrent_Speed !=0 )
 800113a:	4b4e      	ldr	r3, [pc, #312]	@ (8001274 <vAEB_Task+0x14c>)
 800113c:	881a      	ldrh	r2, [r3, #0]
 800113e:	4b4e      	ldr	r3, [pc, #312]	@ (8001278 <vAEB_Task+0x150>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d92e      	bls.n	80011a4 <vAEB_Task+0x7c>
 8001146:	4b4d      	ldr	r3, [pc, #308]	@ (800127c <vAEB_Task+0x154>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d02a      	beq.n	80011a4 <vAEB_Task+0x7c>
		{
			BUZZER_off(AEB_LED_PORT, AEB_LED_GPIO_Pin);
 800114e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001152:	484b      	ldr	r0, [pc, #300]	@ (8001280 <vAEB_Task+0x158>)
 8001154:	f003 f916 	bl	8004384 <BUZZER_off>

			/*---- Slow down ---- */
			K = ( (float)gCurrent_Speed / ( gWarning_Distance - gBreaking_Distance) );
 8001158:	4b48      	ldr	r3, [pc, #288]	@ (800127c <vAEB_Task+0x154>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fcab 	bl	8000ab8 <__aeabi_ui2f>
 8001162:	4604      	mov	r4, r0
 8001164:	4b44      	ldr	r3, [pc, #272]	@ (8001278 <vAEB_Task+0x150>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b46      	ldr	r3, [pc, #280]	@ (8001284 <vAEB_Task+0x15c>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fca5 	bl	8000ac0 <__aeabi_i2f>
 8001176:	4603      	mov	r3, r0
 8001178:	4619      	mov	r1, r3
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff fda8 	bl	8000cd0 <__aeabi_fdiv>
 8001180:	4603      	mov	r3, r0
 8001182:	60bb      	str	r3, [r7, #8]
			K = roundf( K * 100) / 100 ;
 8001184:	4940      	ldr	r1, [pc, #256]	@ (8001288 <vAEB_Task+0x160>)
 8001186:	68b8      	ldr	r0, [r7, #8]
 8001188:	f7ff fcee 	bl	8000b68 <__aeabi_fmul>
 800118c:	4603      	mov	r3, r0
 800118e:	4618      	mov	r0, r3
 8001190:	f005 fd0e 	bl	8006bb0 <roundf>
 8001194:	4603      	mov	r3, r0
 8001196:	493c      	ldr	r1, [pc, #240]	@ (8001288 <vAEB_Task+0x160>)
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd99 	bl	8000cd0 <__aeabi_fdiv>
 800119e:	4603      	mov	r3, r0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	e062      	b.n	800126a <vAEB_Task+0x142>

		}else if(gFront_Distance <= gWarning_Distance && gFront_Distance > gBreaking_Distance)
 80011a4:	4b33      	ldr	r3, [pc, #204]	@ (8001274 <vAEB_Task+0x14c>)
 80011a6:	881a      	ldrh	r2, [r3, #0]
 80011a8:	4b33      	ldr	r3, [pc, #204]	@ (8001278 <vAEB_Task+0x150>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d82e      	bhi.n	800120e <vAEB_Task+0xe6>
 80011b0:	4b30      	ldr	r3, [pc, #192]	@ (8001274 <vAEB_Task+0x14c>)
 80011b2:	881a      	ldrh	r2, [r3, #0]
 80011b4:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <vAEB_Task+0x15c>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d928      	bls.n	800120e <vAEB_Task+0xe6>
		{
			Loc_Object_Distance = gFront_Distance;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <vAEB_Task+0x14c>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	81fb      	strh	r3, [r7, #14]
			/* Turn-on led */
			BUZZER_on(AEB_LED_PORT, AEB_LED_GPIO_Pin);
 80011c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c6:	482e      	ldr	r0, [pc, #184]	@ (8001280 <vAEB_Task+0x158>)
 80011c8:	f003 f8cc 	bl	8004364 <BUZZER_on>
			/* ---------- slow down mechanism ------- */
			gCurrent_Speed = K * (gFront_Distance - gBreaking_Distance);
 80011cc:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <vAEB_Task+0x14c>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001284 <vAEB_Task+0x15c>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fc71 	bl	8000ac0 <__aeabi_i2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fcc0 	bl	8000b68 <__aeabi_fmul>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe0c 	bl	8000e08 <__aeabi_f2uiz>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b21      	ldr	r3, [pc, #132]	@ (800127c <vAEB_Task+0x154>)
 80011f6:	701a      	strb	r2, [r3, #0]
			if(gCurrent_Speed < 10){
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <vAEB_Task+0x154>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	d834      	bhi.n	800126a <vAEB_Task+0x142>
				gCurrent_Speed = 0;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <vAEB_Task+0x154>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
				gCar_Direction = STOP;
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <vAEB_Task+0x164>)
 8001208:	2203      	movs	r2, #3
 800120a:	701a      	strb	r2, [r3, #0]
			if(gCurrent_Speed < 10){
 800120c:	e02d      	b.n	800126a <vAEB_Task+0x142>
			}
		}else if(gFront_Distance < gBreaking_Distance )
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <vAEB_Task+0x14c>)
 8001210:	881a      	ldrh	r2, [r3, #0]
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <vAEB_Task+0x15c>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d219      	bcs.n	800124e <vAEB_Task+0x126>
		{
			BUZZER_on(AEB_LED_PORT, AEB_LED_GPIO_Pin);
 800121a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800121e:	4818      	ldr	r0, [pc, #96]	@ (8001280 <vAEB_Task+0x158>)
 8001220:	f003 f8a0 	bl	8004364 <BUZZER_on>
			xSemaphoreTake(Motors_Semaphore_Handler, portMAX_DELAY);
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <vAEB_Task+0x168>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fb93 	bl	8002958 <xQueueSemaphoreTake>
			gCar_Direction = STOP;
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <vAEB_Task+0x164>)
 8001234:	2203      	movs	r2, #3
 8001236:	701a      	strb	r2, [r3, #0]
			gCurrent_Speed = 0;
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <vAEB_Task+0x154>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(Motors_Semaphore_Handler);
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <vAEB_Task+0x168>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	f001 faf4 	bl	8002834 <xQueueGenericSend>
 800124c:	e00d      	b.n	800126a <vAEB_Task+0x142>

		}else if(gFront_Distance > Loc_Object_Distance && gCurrent_Speed == 0){
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <vAEB_Task+0x14c>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	89fa      	ldrh	r2, [r7, #14]
 8001254:	429a      	cmp	r2, r3
 8001256:	d208      	bcs.n	800126a <vAEB_Task+0x142>
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <vAEB_Task+0x154>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d104      	bne.n	800126a <vAEB_Task+0x142>

			BUZZER_off(AEB_LED_PORT, AEB_LED_GPIO_Pin);
 8001260:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001264:	4806      	ldr	r0, [pc, #24]	@ (8001280 <vAEB_Task+0x158>)
 8001266:	f003 f88d 	bl	8004384 <BUZZER_off>
		}else{}

		// Periodicity of the Task
		vTaskDelay(200);
 800126a:	20c8      	movs	r0, #200	@ 0xc8
 800126c:	f001 fe28 	bl	8002ec0 <vTaskDelay>
		if(gFront_Distance > gWarning_Distance && gCurrent_Speed !=0 )
 8001270:	e763      	b.n	800113a <vAEB_Task+0x12>
 8001272:	bf00      	nop
 8001274:	20000162 	.word	0x20000162
 8001278:	20000166 	.word	0x20000166
 800127c:	20000184 	.word	0x20000184
 8001280:	40010800 	.word	0x40010800
 8001284:	20000164 	.word	0x20000164
 8001288:	42c80000 	.word	0x42c80000
 800128c:	20000185 	.word	0x20000185
 8001290:	20000170 	.word	0x20000170

08001294 <vCar_Task>:




void vCar_Task(void * pvParameter)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		/* Direction of the Motors */
		xSemaphoreTake(Motors_Semaphore_Handler, portMAX_DELAY);
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <vCar_Task+0xac>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fb57 	bl	8002958 <xQueueSemaphoreTake>

		switch(gCar_Direction)
 80012aa:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <vCar_Task+0xb0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d012      	beq.n	80012d8 <vCar_Task+0x44>
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	dc16      	bgt.n	80012e4 <vCar_Task+0x50>
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d002      	beq.n	80012c0 <vCar_Task+0x2c>
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d006      	beq.n	80012cc <vCar_Task+0x38>
 80012be:	e011      	b.n	80012e4 <vCar_Task+0x50>
		{
		case FORWARD:
			Motor_SetCarDir(&Rmotor,&Lmotor,FORWARD);
 80012c0:	2201      	movs	r2, #1
 80012c2:	4921      	ldr	r1, [pc, #132]	@ (8001348 <vCar_Task+0xb4>)
 80012c4:	4821      	ldr	r0, [pc, #132]	@ (800134c <vCar_Task+0xb8>)
 80012c6:	f003 fa0f 	bl	80046e8 <Motor_SetCarDir>
			break;
 80012ca:	e00b      	b.n	80012e4 <vCar_Task+0x50>

		case REVERSE:
			Motor_SetCarDir(&Rmotor, &Lmotor,REVERSE);
 80012cc:	2202      	movs	r2, #2
 80012ce:	491e      	ldr	r1, [pc, #120]	@ (8001348 <vCar_Task+0xb4>)
 80012d0:	481e      	ldr	r0, [pc, #120]	@ (800134c <vCar_Task+0xb8>)
 80012d2:	f003 fa09 	bl	80046e8 <Motor_SetCarDir>
			break;
 80012d6:	e005      	b.n	80012e4 <vCar_Task+0x50>

		case STOP:
			Motor_SetCarDir(&Rmotor,&Lmotor,STOP);
 80012d8:	2203      	movs	r2, #3
 80012da:	491b      	ldr	r1, [pc, #108]	@ (8001348 <vCar_Task+0xb4>)
 80012dc:	481b      	ldr	r0, [pc, #108]	@ (800134c <vCar_Task+0xb8>)
 80012de:	f003 fa03 	bl	80046e8 <Motor_SetCarDir>
			break;
 80012e2:	bf00      	nop
		}
		xSemaphoreGive(Motors_Semaphore_Handler);
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <vCar_Task+0xac>)
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	2300      	movs	r3, #0
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	f001 faa1 	bl	8002834 <xQueueGenericSend>

		/* --------- Speed of the motors --------*/
		xSemaphoreTake(Current_Speed_Semaphore_Handler, portMAX_DELAY);
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <vCar_Task+0xbc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f04f 31ff 	mov.w	r1, #4294967295
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 fb2c 	bl	8002958 <xQueueSemaphoreTake>
		Motor_SetSpeed(&Rmotor,gCurrent_Speed);
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <vCar_Task+0xc0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fbd7 	bl	8000ab8 <__aeabi_ui2f>
 800130a:	4603      	mov	r3, r0
 800130c:	4619      	mov	r1, r3
 800130e:	480f      	ldr	r0, [pc, #60]	@ (800134c <vCar_Task+0xb8>)
 8001310:	f003 f98e 	bl	8004630 <Motor_SetSpeed>
		Motor_SetSpeed(&Lmotor,gCurrent_Speed);
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <vCar_Task+0xc0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fbcd 	bl	8000ab8 <__aeabi_ui2f>
 800131e:	4603      	mov	r3, r0
 8001320:	4619      	mov	r1, r3
 8001322:	4809      	ldr	r0, [pc, #36]	@ (8001348 <vCar_Task+0xb4>)
 8001324:	f003 f984 	bl	8004630 <Motor_SetSpeed>
		xSemaphoreGive(Current_Speed_Semaphore_Handler);
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <vCar_Task+0xbc>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	2300      	movs	r3, #0
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	f001 fa7f 	bl	8002834 <xQueueGenericSend>

		vTaskDelay(100);
 8001336:	2064      	movs	r0, #100	@ 0x64
 8001338:	f001 fdc2 	bl	8002ec0 <vTaskDelay>
		xSemaphoreTake(Motors_Semaphore_Handler, portMAX_DELAY);
 800133c:	e7ae      	b.n	800129c <vCar_Task+0x8>
 800133e:	bf00      	nop
 8001340:	20000170 	.word	0x20000170
 8001344:	20000185 	.word	0x20000185
 8001348:	20000028 	.word	0x20000028
 800134c:	20000000 	.word	0x20000000
 8001350:	2000016c 	.word	0x2000016c
 8001354:	20000184 	.word	0x20000184

08001358 <vCalculations_Task>:
}



void vCalculations_Task(void * pvParameter)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	uint16_t US1_ID , R_ENC_ID, L_ENC_ID;
	uint16_t US1_Temp_Data , R_ENC_tData , L_ENC_tData;
	uint16_t Loc_Right_ENC_Speed = 0 , Loc_Left_ENC_Speed = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	823b      	strh	r3, [r7, #16]
 8001364:	2300      	movs	r3, #0
 8001366:	81fb      	strh	r3, [r7, #14]

	while(1){
		xSemaphoreTake(Front_Distance_Semaphore_Handler, portMAX_DELAY); /*------ Get data of Front US ------*/
 8001368:	4b53      	ldr	r3, [pc, #332]	@ (80014b8 <vCalculations_Task+0x160>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	4618      	mov	r0, r3
 8001372:	f001 faf1 	bl	8002958 <xQueueSemaphoreTake>
		vReadDataFromM4(FRONT_US_ID,&US1_Temp_Data);
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4619      	mov	r1, r3
 800137c:	2001      	movs	r0, #1
 800137e:	f000 fe3d 	bl	8001ffc <vReadDataFromM4>
		US1_ID = ((US1_Temp_Data & 0xF000) >> 12);
 8001382:	89bb      	ldrh	r3, [r7, #12]
 8001384:	0b1b      	lsrs	r3, r3, #12
 8001386:	82fb      	strh	r3, [r7, #22]
		while(US1_ID != FRONT_US_ID )
 8001388:	e008      	b.n	800139c <vCalculations_Task+0x44>
		{
			vReadDataFromM4(FRONT_US_ID,&US1_Temp_Data);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4619      	mov	r1, r3
 8001390:	2001      	movs	r0, #1
 8001392:	f000 fe33 	bl	8001ffc <vReadDataFromM4>
			US1_ID = (US1_Temp_Data & 0xF000) >> 12;
 8001396:	89bb      	ldrh	r3, [r7, #12]
 8001398:	0b1b      	lsrs	r3, r3, #12
 800139a:	82fb      	strh	r3, [r7, #22]
		while(US1_ID != FRONT_US_ID )
 800139c:	8afb      	ldrh	r3, [r7, #22]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d1f3      	bne.n	800138a <vCalculations_Task+0x32>
		}
		gFront_Distance = (US1_Temp_Data & 0x0FFF);
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b44      	ldr	r3, [pc, #272]	@ (80014bc <vCalculations_Task+0x164>)
 80013ac:	801a      	strh	r2, [r3, #0]
		xSemaphoreGive(Front_Distance_Semaphore_Handler);
 80013ae:	4b42      	ldr	r3, [pc, #264]	@ (80014b8 <vCalculations_Task+0x160>)
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	f001 fa3c 	bl	8002834 <xQueueGenericSend>
		xSemaphoreTake(Current_Speed_Semaphore_Handler, portMAX_DELAY); /*----------- Get data of Right and Left ENC ------- */
 80013bc:	4b40      	ldr	r3, [pc, #256]	@ (80014c0 <vCalculations_Task+0x168>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 fac7 	bl	8002958 <xQueueSemaphoreTake>
		vReadDataFromM4(RIGHT_ENC_ID,&R_ENC_tData);
 80013ca:	f107 030a 	add.w	r3, r7, #10
 80013ce:	4619      	mov	r1, r3
 80013d0:	2004      	movs	r0, #4
 80013d2:	f000 fe13 	bl	8001ffc <vReadDataFromM4>
		R_ENC_ID = ((R_ENC_tData & 0xF000) >> 12);
 80013d6:	897b      	ldrh	r3, [r7, #10]
 80013d8:	0b1b      	lsrs	r3, r3, #12
 80013da:	82bb      	strh	r3, [r7, #20]
		while(R_ENC_ID != RIGHT_ENC_ID )
 80013dc:	e008      	b.n	80013f0 <vCalculations_Task+0x98>
		{
			vReadDataFromM4(RIGHT_ENC_ID,&R_ENC_tData);
 80013de:	f107 030a 	add.w	r3, r7, #10
 80013e2:	4619      	mov	r1, r3
 80013e4:	2004      	movs	r0, #4
 80013e6:	f000 fe09 	bl	8001ffc <vReadDataFromM4>
			R_ENC_ID = ((R_ENC_tData & 0xF000) >> 12);
 80013ea:	897b      	ldrh	r3, [r7, #10]
 80013ec:	0b1b      	lsrs	r3, r3, #12
 80013ee:	82bb      	strh	r3, [r7, #20]
		while(R_ENC_ID != RIGHT_ENC_ID )
 80013f0:	8abb      	ldrh	r3, [r7, #20]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d1f3      	bne.n	80013de <vCalculations_Task+0x86>
		}
		Loc_Right_ENC_Speed = (R_ENC_tData  & 0x0FFF);
 80013f6:	897b      	ldrh	r3, [r7, #10]
 80013f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fc:	823b      	strh	r3, [r7, #16]

		vReadDataFromM4(LEFT_ENC_ID,&L_ENC_tData);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4619      	mov	r1, r3
 8001404:	2005      	movs	r0, #5
 8001406:	f000 fdf9 	bl	8001ffc <vReadDataFromM4>
		L_ENC_ID = ((L_ENC_tData & 0xF000) >> 12);
 800140a:	893b      	ldrh	r3, [r7, #8]
 800140c:	0b1b      	lsrs	r3, r3, #12
 800140e:	827b      	strh	r3, [r7, #18]
		while(L_ENC_ID != LEFT_ENC_ID )
 8001410:	e008      	b.n	8001424 <vCalculations_Task+0xcc>
		{
			vReadDataFromM4(LEFT_ENC_ID,&L_ENC_tData);
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	4619      	mov	r1, r3
 8001418:	2005      	movs	r0, #5
 800141a:	f000 fdef 	bl	8001ffc <vReadDataFromM4>
			L_ENC_ID = ((L_ENC_tData & 0xF000) >> 12);
 800141e:	893b      	ldrh	r3, [r7, #8]
 8001420:	0b1b      	lsrs	r3, r3, #12
 8001422:	827b      	strh	r3, [r7, #18]
		while(L_ENC_ID != LEFT_ENC_ID )
 8001424:	8a7b      	ldrh	r3, [r7, #18]
 8001426:	2b05      	cmp	r3, #5
 8001428:	d1f3      	bne.n	8001412 <vCalculations_Task+0xba>
		}
		Loc_Left_ENC_Speed = (L_ENC_tData  & 0x0FFF);
 800142a:	893b      	ldrh	r3, [r7, #8]
 800142c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001430:	81fb      	strh	r3, [r7, #14]
		gENCs_Speed = ((Loc_Right_ENC_Speed + Loc_Left_ENC_Speed) / 2 );
 8001432:	8a3a      	ldrh	r2, [r7, #16]
 8001434:	89fb      	ldrh	r3, [r7, #14]
 8001436:	4413      	add	r3, r2
 8001438:	0fda      	lsrs	r2, r3, #31
 800143a:	4413      	add	r3, r2
 800143c:	105b      	asrs	r3, r3, #1
 800143e:	b29a      	uxth	r2, r3
 8001440:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <vCalculations_Task+0x16c>)
 8001442:	801a      	strh	r2, [r3, #0]
		xSemaphoreGive(Current_Speed_Semaphore_Handler);
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <vCalculations_Task+0x168>)
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	2300      	movs	r3, #0
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	f001 f9f1 	bl	8002834 <xQueueGenericSend>

		gBreaking_Distance = (BREAKING_DISTANCE_CONST * gENCs_Speed); /* Calculate Breaking and Warning Distance */
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <vCalculations_Task+0x16c>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe ffdc 	bl	8000414 <__aeabi_i2d>
 800145c:	a314      	add	r3, pc, #80	@ (adr r3, 80014b0 <vCalculations_Task+0x158>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff f841 	bl	80004e8 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fa4d 	bl	800090c <__aeabi_d2uiz>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <vCalculations_Task+0x170>)
 8001478:	801a      	strh	r2, [r3, #0]
		gWarning_Distance =  (WARNING_DISTANCE_CONST  * gENCs_Speed);
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <vCalculations_Task+0x16c>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ffc8 	bl	8000414 <__aeabi_i2d>
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <vCalculations_Task+0x174>)
 800148a:	f7ff f82d 	bl	80004e8 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fa39 	bl	800090c <__aeabi_d2uiz>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <vCalculations_Task+0x178>)
 80014a0:	801a      	strh	r2, [r3, #0]

		vTaskDelay(250);
 80014a2:	20fa      	movs	r0, #250	@ 0xfa
 80014a4:	f001 fd0c 	bl	8002ec0 <vTaskDelay>
		xSemaphoreTake(Front_Distance_Semaphore_Handler, portMAX_DELAY); /*------ Get data of Front US ------*/
 80014a8:	e75e      	b.n	8001368 <vCalculations_Task+0x10>
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	33333333 	.word	0x33333333
 80014b4:	3fd33333 	.word	0x3fd33333
 80014b8:	20000168 	.word	0x20000168
 80014bc:	20000162 	.word	0x20000162
 80014c0:	2000016c 	.word	0x2000016c
 80014c4:	20000160 	.word	0x20000160
 80014c8:	20000164 	.word	0x20000164
 80014cc:	3fe00000 	.word	0x3fe00000
 80014d0:	20000166 	.word	0x20000166

080014d4 <BS_ReturnTypeBS_Init>:

/******************************************************************************************************/

/****************************************One Shot Functions DEF Section********************************/
NBS_ReturnType_e BS_ReturnTypeBS_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	NBS_ReturnType_e rt_type = BS_NO_ERROR;
 80014da:	2302      	movs	r3, #2
 80014dc:	71fb      	strb	r3, [r7, #7]
	/***************************************************Queues Creation***********************************************/

	/****************************************************Tasks Creation***********************************************/
	rt_type = NBS_ReturnType_e_CreateBlindSpotTasks();
 80014de:	f000 f80b 	bl	80014f8 <NBS_ReturnType_e_CreateBlindSpotTasks>
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	/****************************************************Semaphore Creation*******************************************/
	rt_type = NBS_ReturnType_e_CreateBlindSpotSemaphores();
 80014e6:	f000 f84d 	bl	8001584 <NBS_ReturnType_e_CreateBlindSpotSemaphores>
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	return rt_type;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <NBS_ReturnType_e_CreateBlindSpotTasks>:

static NBS_ReturnType_e NBS_ReturnType_e_CreateBlindSpotTasks(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af02      	add	r7, sp, #8
	NBS_ReturnType_e rt_type = BS_NO_ERROR;
 80014fe:	2302      	movs	r3, #2
 8001500:	73fb      	strb	r3, [r7, #15]
	BaseType_t xTaskCreate_vRightAreaHandler_Handler;
	BaseType_t xTaskCreate_vLeftAreaHandler_Handler;
	BaseType_t xTaskCreate_TurnSignalWarningTwo_Handler;

	/*Create the tasks then check if it is actually created or not.*/
	xTaskCreate_vRightAreaHandler_Handler =  xTaskCreate(vRightAreaHandler,"vRightAreaHandler", 100, NULL, vRightAreaHandler_PRIORITY,NULL);
 8001502:	2300      	movs	r3, #0
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	2304      	movs	r3, #4
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2300      	movs	r3, #0
 800150c:	2264      	movs	r2, #100	@ 0x64
 800150e:	4917      	ldr	r1, [pc, #92]	@ (800156c <NBS_ReturnType_e_CreateBlindSpotTasks+0x74>)
 8001510:	4817      	ldr	r0, [pc, #92]	@ (8001570 <NBS_ReturnType_e_CreateBlindSpotTasks+0x78>)
 8001512:	f001 fb8f 	bl	8002c34 <xTaskCreate>
 8001516:	60b8      	str	r0, [r7, #8]
	if(xTaskCreate_vRightAreaHandler_Handler != pdPASS)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <NBS_ReturnType_e_CreateBlindSpotTasks+0x2a>
	{
		rt_type = ERROR_COULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
	}
	xTaskCreate_vLeftAreaHandler_Handler = xTaskCreate(vLeftAreaHandler,"vLeftAreaHandler", 100, NULL, vLeftAreaHandler_PRIORITY,NULL);
 8001522:	2300      	movs	r3, #0
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2303      	movs	r3, #3
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2300      	movs	r3, #0
 800152c:	2264      	movs	r2, #100	@ 0x64
 800152e:	4911      	ldr	r1, [pc, #68]	@ (8001574 <NBS_ReturnType_e_CreateBlindSpotTasks+0x7c>)
 8001530:	4811      	ldr	r0, [pc, #68]	@ (8001578 <NBS_ReturnType_e_CreateBlindSpotTasks+0x80>)
 8001532:	f001 fb7f 	bl	8002c34 <xTaskCreate>
 8001536:	6078      	str	r0, [r7, #4]
	if(xTaskCreate_vLeftAreaHandler_Handler != pdPASS)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d001      	beq.n	8001542 <NBS_ReturnType_e_CreateBlindSpotTasks+0x4a>
	{
		rt_type = ERROR_COULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
	}
	xTaskCreate_TurnSignalWarningTwo_Handler =  xTaskCreate(TurnSignalWarningTwo,"TurnSignalWarningTwo", 100, NULL, TurnSignalWarningTwo_PRIORITY,NULL);
 8001542:	2300      	movs	r3, #0
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	2305      	movs	r3, #5
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2300      	movs	r3, #0
 800154c:	2264      	movs	r2, #100	@ 0x64
 800154e:	490b      	ldr	r1, [pc, #44]	@ (800157c <NBS_ReturnType_e_CreateBlindSpotTasks+0x84>)
 8001550:	480b      	ldr	r0, [pc, #44]	@ (8001580 <NBS_ReturnType_e_CreateBlindSpotTasks+0x88>)
 8001552:	f001 fb6f 	bl	8002c34 <xTaskCreate>
 8001556:	6038      	str	r0, [r7, #0]
	if(xTaskCreate_TurnSignalWarningTwo_Handler != pdPASS)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d001      	beq.n	8001562 <NBS_ReturnType_e_CreateBlindSpotTasks+0x6a>
	{
		rt_type = ERROR_COULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
	}

	return rt_type;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	08006c28 	.word	0x08006c28
 8001570:	08001611 	.word	0x08001611
 8001574:	08006c3c 	.word	0x08006c3c
 8001578:	080016f9 	.word	0x080016f9
 800157c:	08006c50 	.word	0x08006c50
 8001580:	080017e1 	.word	0x080017e1

08001584 <NBS_ReturnType_e_CreateBlindSpotSemaphores>:

static NBS_ReturnType_e NBS_ReturnType_e_CreateBlindSpotSemaphores()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	NBS_ReturnType_e rt = BS_NO_ERROR;
 800158a:	2302      	movs	r3, #2
 800158c:	71fb      	strb	r3, [r7, #7]
	BaseType_t xSemaphoreGiveState = pdFAIL;
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]

	/*Create RightDis Semaphore*/
	RightDisSemaphoreHandler = xSemaphoreCreateBinary(); /*Create binary semaphore for right distance variable data.*/
 8001592:	2203      	movs	r2, #3
 8001594:	2100      	movs	r1, #0
 8001596:	2001      	movs	r0, #1
 8001598:	f001 f8ed 	bl	8002776 <xQueueGenericCreate>
 800159c:	4603      	mov	r3, r0
 800159e:	4a1a      	ldr	r2, [pc, #104]	@ (8001608 <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x84>)
 80015a0:	6013      	str	r3, [r2, #0]
	if(RightDisSemaphoreHandler == NULL) /*The semaphore could not be created*/
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x84>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x2a>
	{
		rt = BS_ERROR_COULD_NOT_CREATE_BINARY_SEMAPHORE;
 80015aa:	2303      	movs	r3, #3
 80015ac:	71fb      	strb	r3, [r7, #7]
	}
	xSemaphoreGiveState = xSemaphoreGive(RightDisSemaphoreHandler); /*Semaphore is initially given.*/
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x84>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	f001 f93c 	bl	8002834 <xQueueGenericSend>
 80015bc:	6038      	str	r0, [r7, #0]
	if(xSemaphoreGiveState == pdFAIL) /*The semaphore can not be given.*/
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x44>
	{
		rt = BS_ERROR_COULD_NOT_GIVE_SEMAPHORE;
 80015c4:	2304      	movs	r3, #4
 80015c6:	71fb      	strb	r3, [r7, #7]
	}

	/*Create LeftDis Semaphore*/
	LeftDisSemaphoreHandler = xSemaphoreCreateBinary(); /*Create binary semaphore for right distance variable data.*/
 80015c8:	2203      	movs	r2, #3
 80015ca:	2100      	movs	r1, #0
 80015cc:	2001      	movs	r0, #1
 80015ce:	f001 f8d2 	bl	8002776 <xQueueGenericCreate>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x88>)
 80015d6:	6013      	str	r3, [r2, #0]
	if(LeftDisSemaphoreHandler == NULL) /*The semaphore could not be created*/
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x88>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x60>
	{
		rt = BS_ERROR_COULD_NOT_CREATE_BINARY_SEMAPHORE;
 80015e0:	2303      	movs	r3, #3
 80015e2:	71fb      	strb	r3, [r7, #7]
	}
	xSemaphoreGiveState = xSemaphoreGive(LeftDisSemaphoreHandler); /*Semaphore is initially given.*/
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x88>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	2300      	movs	r3, #0
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	f001 f921 	bl	8002834 <xQueueGenericSend>
 80015f2:	6038      	str	r0, [r7, #0]
	if(xSemaphoreGiveState == pdFAIL) /*The semaphore can not be given.*/
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <NBS_ReturnType_e_CreateBlindSpotSemaphores+0x7a>
	{
		rt = BS_ERROR_COULD_NOT_GIVE_SEMAPHORE;
 80015fa:	2304      	movs	r3, #4
 80015fc:	71fb      	strb	r3, [r7, #7]
	}
	return rt;
 80015fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000174 	.word	0x20000174
 800160c:	20000178 	.word	0x20000178

08001610 <vRightAreaHandler>:
/******************************************************************************************************/
/*******************************************freeRTOS Tasks*********************************************/


void vRightAreaHandler(void* arg)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

	BaseType_t xSemaphoreTakeState = pdFAIL;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
	BaseType_t xQueueSendState = errQUEUE_FULL;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
	uint16_t warningMes = 'R';
 8001620:	2352      	movs	r3, #82	@ 0x52
 8001622:	827b      	strh	r3, [r7, #18]
	UBaseType_t uxHighWaterMark;
	uint8_t ID1 = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	77fb      	strb	r3, [r7, #31]
	uint16_t data1 = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	817b      	strh	r3, [r7, #10]

	while(1)
	{
		xSemaphoreTakeState = xSemaphoreTake(binarySemaphoreHandler, portMAX_DELAY); /*Take The Semaphore.*/
 800162c:	4b2e      	ldr	r3, [pc, #184]	@ (80016e8 <vRightAreaHandler+0xd8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	4618      	mov	r0, r3
 8001636:	f001 f98f 	bl	8002958 <xQueueSemaphoreTake>
 800163a:	61b8      	str	r0, [r7, #24]
		if(xSemaphoreTakeState == pdPASS)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d149      	bne.n	80016d6 <vRightAreaHandler+0xc6>
		{
			vReadDataFromM4(RIGHT_ULTRASONIC_ID, &data1);
 8001642:	f107 030a 	add.w	r3, r7, #10
 8001646:	4619      	mov	r1, r3
 8001648:	2002      	movs	r0, #2
 800164a:	f000 fcd7 	bl	8001ffc <vReadDataFromM4>
			ID1 = ((data1 & 0xF000) >> 12);
 800164e:	897b      	ldrh	r3, [r7, #10]
 8001650:	0b1b      	lsrs	r3, r3, #12
 8001652:	b29b      	uxth	r3, r3
 8001654:	77fb      	strb	r3, [r7, #31]
			while(ID1 != RIGHT_ULTRASONIC_ID)
 8001656:	e009      	b.n	800166c <vRightAreaHandler+0x5c>
			{
				vReadDataFromM4(RIGHT_ULTRASONIC_ID,&data1);
 8001658:	f107 030a 	add.w	r3, r7, #10
 800165c:	4619      	mov	r1, r3
 800165e:	2002      	movs	r0, #2
 8001660:	f000 fccc 	bl	8001ffc <vReadDataFromM4>
				ID1 = (data1 & 0xF000) >> 12;
 8001664:	897b      	ldrh	r3, [r7, #10]
 8001666:	0b1b      	lsrs	r3, r3, #12
 8001668:	b29b      	uxth	r3, r3
 800166a:	77fb      	strb	r3, [r7, #31]
			while(ID1 != RIGHT_ULTRASONIC_ID)
 800166c:	7ffb      	ldrb	r3, [r7, #31]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d1f2      	bne.n	8001658 <vRightAreaHandler+0x48>
			}
			xSemaphoreGive(binarySemaphoreHandler);
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <vRightAreaHandler+0xd8>)
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	f001 f8da 	bl	8002834 <xQueueGenericSend>
			xSemaphoreTakeState = xSemaphoreTake(RightDisSemaphoreHandler, portMAX_DELAY); /*Take The Semaphore.*/
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <vRightAreaHandler+0xdc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	4618      	mov	r0, r3
 800168a:	f001 f965 	bl	8002958 <xQueueSemaphoreTake>
 800168e:	61b8      	str	r0, [r7, #24]
			if(xSemaphoreTakeState == pdPASS) /*Semaphore is taken.*/
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d11f      	bne.n	80016d6 <vRightAreaHandler+0xc6>
			{
				RightDis = (data1 & 0x0FFF);
 8001696:	897b      	ldrh	r3, [r7, #10]
 8001698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <vRightAreaHandler+0xe0>)
 80016a0:	801a      	strh	r2, [r3, #0]
				if((RightDis <= MIN_DISTANCE) && (RightDis > 4))
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <vRightAreaHandler+0xe0>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	2b0a      	cmp	r3, #10
 80016a8:	d809      	bhi.n	80016be <vRightAreaHandler+0xae>
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <vRightAreaHandler+0xe0>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d905      	bls.n	80016be <vRightAreaHandler+0xae>
				{
					BUZZER_on(RIGHT_SIGNAL_LED_PORT, RIGHT_LED_GPIO_Pin);
 80016b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b6:	480f      	ldr	r0, [pc, #60]	@ (80016f4 <vRightAreaHandler+0xe4>)
 80016b8:	f002 fe54 	bl	8004364 <BUZZER_on>
 80016bc:	e004      	b.n	80016c8 <vRightAreaHandler+0xb8>
				}
				else
				{
					BUZZER_off(RIGHT_SIGNAL_LED_PORT, RIGHT_LED_GPIO_Pin);
 80016be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016c2:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <vRightAreaHandler+0xe4>)
 80016c4:	f002 fe5e 	bl	8004384 <BUZZER_off>
				}
				xSemaphoreGive(RightDisSemaphoreHandler);
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <vRightAreaHandler+0xdc>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	f001 f8af 	bl	8002834 <xQueueGenericSend>
			}else{}
		}else{}
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80016d6:	2000      	movs	r0, #0
 80016d8:	f002 fa94 	bl	8003c04 <uxTaskGetStackHighWaterMark>
 80016dc:	60f8      	str	r0, [r7, #12]
		vTaskDelay(250);
 80016de:	20fa      	movs	r0, #250	@ 0xfa
 80016e0:	f001 fbee 	bl	8002ec0 <vTaskDelay>
		xSemaphoreTakeState = xSemaphoreTake(binarySemaphoreHandler, portMAX_DELAY); /*Take The Semaphore.*/
 80016e4:	e7a2      	b.n	800162c <vRightAreaHandler+0x1c>
 80016e6:	bf00      	nop
 80016e8:	2000018c 	.word	0x2000018c
 80016ec:	20000174 	.word	0x20000174
 80016f0:	2000017c 	.word	0x2000017c
 80016f4:	40010800 	.word	0x40010800

080016f8 <vLeftAreaHandler>:




void vLeftAreaHandler(void* arg)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

	BaseType_t xSemaphoreTakeState = pdFAIL;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
	BaseType_t xQueueSendState = errQUEUE_FULL;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
	uint16_t warningMes = 'L';
 8001708:	234c      	movs	r3, #76	@ 0x4c
 800170a:	827b      	strh	r3, [r7, #18]
	volatile UBaseType_t uxHighWaterMark;
	uint16_t data2 = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	817b      	strh	r3, [r7, #10]
	uint8_t ID1 = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	77fb      	strb	r3, [r7, #31]
	while(1)
	{
		xSemaphoreTakeState = xSemaphoreTake(binarySemaphoreHandler, portMAX_DELAY);
 8001714:	4b2e      	ldr	r3, [pc, #184]	@ (80017d0 <vLeftAreaHandler+0xd8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	4618      	mov	r0, r3
 800171e:	f001 f91b 	bl	8002958 <xQueueSemaphoreTake>
 8001722:	61b8      	str	r0, [r7, #24]
		if(xSemaphoreTakeState == pdPASS)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d149      	bne.n	80017be <vLeftAreaHandler+0xc6>
		{
			vReadDataFromM4(LEFT_ULTRASONIC_ID, &data2);
 800172a:	f107 030a 	add.w	r3, r7, #10
 800172e:	4619      	mov	r1, r3
 8001730:	2003      	movs	r0, #3
 8001732:	f000 fc63 	bl	8001ffc <vReadDataFromM4>
			ID1 = ((data2 & 0xF000) >> 12);
 8001736:	897b      	ldrh	r3, [r7, #10]
 8001738:	0b1b      	lsrs	r3, r3, #12
 800173a:	b29b      	uxth	r3, r3
 800173c:	77fb      	strb	r3, [r7, #31]
			while(ID1 != LEFT_ULTRASONIC_ID)
 800173e:	e009      	b.n	8001754 <vLeftAreaHandler+0x5c>
			{
				vReadDataFromM4(LEFT_ULTRASONIC_ID,&data2);
 8001740:	f107 030a 	add.w	r3, r7, #10
 8001744:	4619      	mov	r1, r3
 8001746:	2003      	movs	r0, #3
 8001748:	f000 fc58 	bl	8001ffc <vReadDataFromM4>
				ID1 = (data2 & 0xF000) >> 12;
 800174c:	897b      	ldrh	r3, [r7, #10]
 800174e:	0b1b      	lsrs	r3, r3, #12
 8001750:	b29b      	uxth	r3, r3
 8001752:	77fb      	strb	r3, [r7, #31]
			while(ID1 != LEFT_ULTRASONIC_ID)
 8001754:	7ffb      	ldrb	r3, [r7, #31]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d1f2      	bne.n	8001740 <vLeftAreaHandler+0x48>
			}

			xSemaphoreGive(binarySemaphoreHandler);
 800175a:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <vLeftAreaHandler+0xd8>)
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	2300      	movs	r3, #0
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	f001 f866 	bl	8002834 <xQueueGenericSend>
			xSemaphoreTakeState = xSemaphoreTake(LeftDisSemaphoreHandler, portMAX_DELAY); /*Take The Semaphore.*/
 8001768:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <vLeftAreaHandler+0xdc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	4618      	mov	r0, r3
 8001772:	f001 f8f1 	bl	8002958 <xQueueSemaphoreTake>
 8001776:	61b8      	str	r0, [r7, #24]
			if(xSemaphoreTakeState == pdPASS) /*Semaphore is taken.*/
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d11f      	bne.n	80017be <vLeftAreaHandler+0xc6>
			{
				LeftDis = (data2 & 0x0FFF);
 800177e:	897b      	ldrh	r3, [r7, #10]
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <vLeftAreaHandler+0xe0>)
 8001788:	801a      	strh	r2, [r3, #0]
				if(LeftDis <= MIN_DISTANCE && (LeftDis > 4))
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <vLeftAreaHandler+0xe0>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2b0a      	cmp	r3, #10
 8001790:	d809      	bhi.n	80017a6 <vLeftAreaHandler+0xae>
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <vLeftAreaHandler+0xe0>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	2b04      	cmp	r3, #4
 8001798:	d905      	bls.n	80017a6 <vLeftAreaHandler+0xae>
				{
					BUZZER_on(LEFT_SIGNAL_LED_PORT, LEFT_LED_GPIO_Pin);
 800179a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800179e:	480f      	ldr	r0, [pc, #60]	@ (80017dc <vLeftAreaHandler+0xe4>)
 80017a0:	f002 fde0 	bl	8004364 <BUZZER_on>
 80017a4:	e004      	b.n	80017b0 <vLeftAreaHandler+0xb8>
				}
				else
				{
					BUZZER_off(LEFT_SIGNAL_LED_PORT, LEFT_LED_GPIO_Pin);
 80017a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017aa:	480c      	ldr	r0, [pc, #48]	@ (80017dc <vLeftAreaHandler+0xe4>)
 80017ac:	f002 fdea 	bl	8004384 <BUZZER_off>
				}
				xSemaphoreGive(LeftDisSemaphoreHandler);
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <vLeftAreaHandler+0xdc>)
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	2300      	movs	r3, #0
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	f001 f83b 	bl	8002834 <xQueueGenericSend>
			}
		}else{}
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80017be:	2000      	movs	r0, #0
 80017c0:	f002 fa20 	bl	8003c04 <uxTaskGetStackHighWaterMark>
 80017c4:	4603      	mov	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]
		vTaskDelay(250);
 80017c8:	20fa      	movs	r0, #250	@ 0xfa
 80017ca:	f001 fb79 	bl	8002ec0 <vTaskDelay>
		xSemaphoreTakeState = xSemaphoreTake(binarySemaphoreHandler, portMAX_DELAY);
 80017ce:	e7a1      	b.n	8001714 <vLeftAreaHandler+0x1c>
 80017d0:	2000018c 	.word	0x2000018c
 80017d4:	20000178 	.word	0x20000178
 80017d8:	2000017e 	.word	0x2000017e
 80017dc:	40010800 	.word	0x40010800

080017e0 <TurnSignalWarningTwo>:


/*******************************************************************************************************/

void TurnSignalWarningTwo(void* arg)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	uint8_t flag1 = 0 , flag2 = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	75fb      	strb	r3, [r7, #23]
 80017ec:	2300      	movs	r3, #0
 80017ee:	75bb      	strb	r3, [r7, #22]
	EventBits_t uxBits; BaseType_t xSemaphoreTakeState = pdFAIL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
	while(1){
		uxBits = xEventGroupGetBits(xCreatedEventGroup);
 80017f4:	4b32      	ldr	r3, [pc, #200]	@ (80018c0 <TurnSignalWarningTwo+0xe0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fe1f 	bl	800243e <xEventGroupClearBits>
 8001800:	60f8      	str	r0, [r7, #12]
		if(flag2 == 0)
 8001802:	7dbb      	ldrb	r3, [r7, #22]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d129      	bne.n	800185c <TurnSignalWarningTwo+0x7c>
		{
			xSemaphoreTakeState = xSemaphoreTake(RightDisSemaphoreHandler, portMAX_DELAY); /*Take The Semaphore.*/
 8001808:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <TurnSignalWarningTwo+0xe4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	4618      	mov	r0, r3
 8001812:	f001 f8a1 	bl	8002958 <xQueueSemaphoreTake>
 8001816:	6138      	str	r0, [r7, #16]
			if(xSemaphoreTakeState == pdPASS) /*Semaphore is taken.*/
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d11e      	bne.n	800185c <TurnSignalWarningTwo+0x7c>
			{
				if(((uxBits & BIT_0) != 0) && (RightDis <= MIN_DISTANCE)) /*(The driver drifts to right while it is a car in the right BS area).*/
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00b      	beq.n	8001840 <TurnSignalWarningTwo+0x60>
 8001828:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <TurnSignalWarningTwo+0xe8>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2b0a      	cmp	r3, #10
 800182e:	d807      	bhi.n	8001840 <TurnSignalWarningTwo+0x60>
				{
					flag1 = 1;	BUZZER_on(GPIOB, GPIO_Pin_9);
 8001830:	2301      	movs	r3, #1
 8001832:	75fb      	strb	r3, [r7, #23]
 8001834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001838:	4824      	ldr	r0, [pc, #144]	@ (80018cc <TurnSignalWarningTwo+0xec>)
 800183a:	f002 fd93 	bl	8004364 <BUZZER_on>
 800183e:	e006      	b.n	800184e <TurnSignalWarningTwo+0x6e>
				}
				else
				{
					flag1 = 0; BUZZER_off(GPIOB, GPIO_Pin_9);
 8001840:	2300      	movs	r3, #0
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001848:	4820      	ldr	r0, [pc, #128]	@ (80018cc <TurnSignalWarningTwo+0xec>)
 800184a:	f002 fd9b 	bl	8004384 <BUZZER_off>
				}
				xSemaphoreGive(RightDisSemaphoreHandler);
 800184e:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <TurnSignalWarningTwo+0xe4>)
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	2300      	movs	r3, #0
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	f000 ffec 	bl	8002834 <xQueueGenericSend>
			}else{}
		}
		if(flag1 == 0)
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d129      	bne.n	80018b6 <TurnSignalWarningTwo+0xd6>
		{
			xSemaphoreTakeState = xSemaphoreTake(LeftDisSemaphoreHandler, portMAX_DELAY); /*Take The Semaphore.*/
 8001862:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <TurnSignalWarningTwo+0xf0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f04f 31ff 	mov.w	r1, #4294967295
 800186a:	4618      	mov	r0, r3
 800186c:	f001 f874 	bl	8002958 <xQueueSemaphoreTake>
 8001870:	6138      	str	r0, [r7, #16]
			if(xSemaphoreTakeState == pdPASS) /*Semaphore is taken.*/
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d11e      	bne.n	80018b6 <TurnSignalWarningTwo+0xd6>
			{
				if(((uxBits & BIT_2) != 0 ) && (LeftDis <= MIN_DISTANCE) ) /*Left Turn Signal is ON -The driver drifts to left, LeftDis <= MIN_DISTANCE.*/
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <TurnSignalWarningTwo+0xba>
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <TurnSignalWarningTwo+0xf4>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2b0a      	cmp	r3, #10
 8001888:	d807      	bhi.n	800189a <TurnSignalWarningTwo+0xba>
				{
					flag2 = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	75bb      	strb	r3, [r7, #22]
					BUZZER_on(GPIOB, GPIO_Pin_9);
 800188e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001892:	480e      	ldr	r0, [pc, #56]	@ (80018cc <TurnSignalWarningTwo+0xec>)
 8001894:	f002 fd66 	bl	8004364 <BUZZER_on>
 8001898:	e006      	b.n	80018a8 <TurnSignalWarningTwo+0xc8>
				}
				else
				{
					flag2 = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	75bb      	strb	r3, [r7, #22]
					BUZZER_off(GPIOB, GPIO_Pin_9);
 800189e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018a2:	480a      	ldr	r0, [pc, #40]	@ (80018cc <TurnSignalWarningTwo+0xec>)
 80018a4:	f002 fd6e 	bl	8004384 <BUZZER_off>
				}
				xSemaphoreGive(LeftDisSemaphoreHandler);
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <TurnSignalWarningTwo+0xf0>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	2300      	movs	r3, #0
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	f000 ffbf 	bl	8002834 <xQueueGenericSend>
			}else{}
		}
		vTaskDelay(100);
 80018b6:	2064      	movs	r0, #100	@ 0x64
 80018b8:	f001 fb02 	bl	8002ec0 <vTaskDelay>
		uxBits = xEventGroupGetBits(xCreatedEventGroup);
 80018bc:	e79a      	b.n	80017f4 <TurnSignalWarningTwo+0x14>
 80018be:	bf00      	nop
 80018c0:	200001a4 	.word	0x200001a4
 80018c4:	20000174 	.word	0x20000174
 80018c8:	2000017c 	.word	0x2000017c
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	20000178 	.word	0x20000178
 80018d4:	2000017e 	.word	0x2000017e

080018d8 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	2201      	movs	r2, #1
 80018ea:	fa02 f103 	lsl.w	r1, r2, r3
 80018ee:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <NVIC_EnableIRQ+0x2c>)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	095b      	lsrs	r3, r3, #5
 80018f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100

08001908 <Bluetooth_Init>:




void Bluetooth_Init(Bluetooth* BTx)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	USART_InitTypeDef USART_InitStruct;
	GPIO_InitTypeDef  GPIO_UART_Struct;
	if(BTx -> USARTx == USART1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a41      	ldr	r2, [pc, #260]	@ (8001a1c <Bluetooth_Init+0x114>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d105      	bne.n	8001926 <Bluetooth_Init+0x1e>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800191a:	2101      	movs	r1, #1
 800191c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001920:	f003 fb8a 	bl	8005038 <RCC_APB2PeriphClockCmd>
 8001924:	e02a      	b.n	800197c <Bluetooth_Init+0x74>
	}
	else if(BTx -> USARTx == USART2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a20 <Bluetooth_Init+0x118>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d105      	bne.n	800193c <Bluetooth_Init+0x34>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001930:	2101      	movs	r1, #1
 8001932:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001936:	f003 fb9d 	bl	8005074 <RCC_APB1PeriphClockCmd>
 800193a:	e01f      	b.n	800197c <Bluetooth_Init+0x74>
	}
	else if(BTx -> USARTx == USART3)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a38      	ldr	r2, [pc, #224]	@ (8001a24 <Bluetooth_Init+0x11c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d105      	bne.n	8001952 <Bluetooth_Init+0x4a>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8001946:	2101      	movs	r1, #1
 8001948:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800194c:	f003 fb92 	bl	8005074 <RCC_APB1PeriphClockCmd>
 8001950:	e014      	b.n	800197c <Bluetooth_Init+0x74>
	}
	else if(BTx -> USARTx == UART4)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a34      	ldr	r2, [pc, #208]	@ (8001a28 <Bluetooth_Init+0x120>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d105      	bne.n	8001968 <Bluetooth_Init+0x60>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 800195c:	2101      	movs	r1, #1
 800195e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001962:	f003 fb87 	bl	8005074 <RCC_APB1PeriphClockCmd>
 8001966:	e009      	b.n	800197c <Bluetooth_Init+0x74>
	}
	else if(BTx -> USARTx == UART5)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a2c <Bluetooth_Init+0x124>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d104      	bne.n	800197c <Bluetooth_Init+0x74>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8001972:	2101      	movs	r1, #1
 8001974:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001978:	f003 fb7c 	bl	8005074 <RCC_APB1PeriphClockCmd>
	}

	GPIO_UART_Struct.GPIO_Pin = (BTx -> GPIO_PIN_TX);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	891b      	ldrh	r3, [r3, #8]
 8001980:	81bb      	strh	r3, [r7, #12]
	GPIO_UART_Struct.GPIO_Mode = GPIO_Mode_AF_PP;
 8001982:	2318      	movs	r3, #24
 8001984:	73fb      	strb	r3, [r7, #15]
	GPIO_UART_Struct.GPIO_Speed = GPIO_Speed_2MHz;
 8001986:	2302      	movs	r3, #2
 8001988:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(BTx -> GPIOX, &GPIO_UART_Struct);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f107 020c 	add.w	r2, r7, #12
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f003 f991 	bl	8004cbc <GPIO_Init>

	GPIO_UART_Struct.GPIO_Pin = (BTx -> GPIO_PIN_RX);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	895b      	ldrh	r3, [r3, #10]
 800199e:	81bb      	strh	r3, [r7, #12]
	GPIO_UART_Struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80019a0:	2304      	movs	r3, #4
 80019a2:	73fb      	strb	r3, [r7, #15]
	GPIO_UART_Struct.GPIO_Speed = GPIO_Speed_2MHz;
 80019a4:	2302      	movs	r3, #2
 80019a6:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(BTx -> GPIOX, &GPIO_UART_Struct);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f107 020c 	add.w	r2, r7, #12
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 f982 	bl	8004cbc <GPIO_Init>

	if(BTx -> USARTx == USART3)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	@ (8001a24 <Bluetooth_Init+0x11c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d114      	bne.n	80019ec <Bluetooth_Init+0xe4>
	{

		NVIC_InitTypeDef NVIC_InitStructure;

		// USART_InitStruct.USART_WordLength = USART_WordLength_8b;
		USART_ITConfig(BTx -> USARTx , USART_IT_RXNE , ENABLE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f240 5125 	movw	r1, #1317	@ 0x525
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 f816 	bl	80059fe <USART_ITConfig>
		NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 80019d2:	2327      	movs	r3, #39	@ 0x27
 80019d4:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	727b      	strb	r3, [r7, #9]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	72bb      	strb	r3, [r7, #10]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80019de:	2301      	movs	r3, #1
 80019e0:	72fb      	strb	r3, [r7, #11]
		NVIC_Init(&NVIC_InitStructure);
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f906 	bl	8004bf8 <NVIC_Init>
	}

	USART_StructInit(&USART_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 ffc9 	bl	8005988 <USART_StructInit>
	USART_Init(BTx->USARTx,&USART_InitStruct);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f107 0210 	add.w	r2, r7, #16
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 ff07 	bl	8005814 <USART_Init>
	USART_Cmd(BTx->USARTx, ENABLE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 ffd7 	bl	80059c0 <USART_Cmd>
}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	40004400 	.word	0x40004400
 8001a24:	40004800 	.word	0x40004800
 8001a28:	40004c00 	.word	0x40004c00
 8001a2c:	40005000 	.word	0x40005000

08001a30 <SPIDev_Init>:


void SPIDev_Init(SPI_dev* BP)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2008      	movs	r0, #8
 8001a3c:	f003 fafc 	bl	8005038 <RCC_APB2PeriphClockCmd>

	if(BP->SPIx == SPI1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a39      	ldr	r2, [pc, #228]	@ (8001b2c <SPIDev_Init+0xfc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10b      	bne.n	8001a62 <SPIDev_Init+0x32>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a50:	f003 faf2 	bl	8005038 <RCC_APB2PeriphClockCmd>
		NVIC_EnableIRQ(SPI1_IRQn);
 8001a54:	2023      	movs	r0, #35	@ 0x23
 8001a56:	f7ff ff3f 	bl	80018d8 <NVIC_EnableIRQ>
		SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8001a5a:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <SPIDev_Init+0x100>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	805a      	strh	r2, [r3, #2]
 8001a60:	e00d      	b.n	8001a7e <SPIDev_Init+0x4e>
	}
	else if(BP->SPIx == SPI2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a33      	ldr	r2, [pc, #204]	@ (8001b34 <SPIDev_Init+0x104>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d108      	bne.n	8001a7e <SPIDev_Init+0x4e>
	{

		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2008      	movs	r0, #8
 8001a70:	f003 fae2 	bl	8005038 <RCC_APB2PeriphClockCmd>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001a74:	2101      	movs	r1, #1
 8001a76:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a7a:	f003 fafb 	bl	8005074 <RCC_APB1PeriphClockCmd>
		//		SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
	}


	GPIO_SPI_Struct. GPIO_Pin = (BP -> GPIO_Pin_MISO) ;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	891a      	ldrh	r2, [r3, #8]
 8001a82:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <SPIDev_Init+0x108>)
 8001a84:	801a      	strh	r2, [r3, #0]
	GPIO_Init(BP->GPIOx_MISO, &GPIO_SPI_Struct);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	492b      	ldr	r1, [pc, #172]	@ (8001b38 <SPIDev_Init+0x108>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 f915 	bl	8004cbc <GPIO_Init>

	GPIO_SPI_Struct. GPIO_Pin = (BP -> GPIO_Pin_MOSI) ;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	8a1a      	ldrh	r2, [r3, #16]
 8001a96:	4b28      	ldr	r3, [pc, #160]	@ (8001b38 <SPIDev_Init+0x108>)
 8001a98:	801a      	strh	r2, [r3, #0]
	GPIO_Init(BP->GPIOx_MOSI, &GPIO_SPI_Struct);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	4926      	ldr	r1, [pc, #152]	@ (8001b38 <SPIDev_Init+0x108>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 f90b 	bl	8004cbc <GPIO_Init>

	GPIO_SPI_Struct. GPIO_Pin = (BP -> GPIO_Pin_SCK) ;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	8b1a      	ldrh	r2, [r3, #24]
 8001aaa:	4b23      	ldr	r3, [pc, #140]	@ (8001b38 <SPIDev_Init+0x108>)
 8001aac:	801a      	strh	r2, [r3, #0]
	GPIO_Init(BP->GPIOx_SCK, &GPIO_SPI_Struct);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4921      	ldr	r1, [pc, #132]	@ (8001b38 <SPIDev_Init+0x108>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 f901 	bl	8004cbc <GPIO_Init>


	if(SPI_InitStructure.SPI_Mode == SPI_Mode_Slave)
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <SPIDev_Init+0x100>)
 8001abc:	885b      	ldrh	r3, [r3, #2]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <SPIDev_Init+0xac>
	{
		GPIO_SPI_Struct.GPIO_Mode =  GPIO_Mode_IN_FLOATING;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <SPIDev_Init+0x108>)
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	70da      	strb	r2, [r3, #3]
		GPIO_SPI_Struct. GPIO_Pin = (BP -> GPIO_Pin_NSS) ;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	8c1a      	ldrh	r2, [r3, #32]
 8001acc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <SPIDev_Init+0x108>)
 8001ace:	801a      	strh	r2, [r3, #0]
		GPIO_Init(BP->GPIOx_NSS, &GPIO_SPI_Struct);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	4918      	ldr	r1, [pc, #96]	@ (8001b38 <SPIDev_Init+0x108>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 f8f0 	bl	8004cbc <GPIO_Init>
	}

	SPI_Init(BP->SPIx, &SPI_InitStructure);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4913      	ldr	r1, [pc, #76]	@ (8001b30 <SPIDev_Init+0x100>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fae4 	bl	80050b0 <SPI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
 8001ae8:	2323      	movs	r3, #35	@ 0x23
 8001aea:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 f87b 	bl	8004bf8 <NVIC_Init>

	SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2160      	movs	r1, #96	@ 0x60
 8001b06:	4809      	ldr	r0, [pc, #36]	@ (8001b2c <SPIDev_Init+0xfc>)
 8001b08:	f003 fb37 	bl	800517a <SPI_I2S_ITConfig>
	SPI_Cmd(BP->SPIx, ENABLE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2101      	movs	r1, #1
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fb12 	bl	800513c <SPI_Cmd>
	SPI_SSOutputCmd(BP->SPIx,ENABLE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fb86 	bl	8005230 <SPI_SSOutputCmd>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40013000 	.word	0x40013000
 8001b30:	20000090 	.word	0x20000090
 8001b34:	40003800 	.word	0x40003800
 8001b38:	200000a4 	.word	0x200000a4

08001b3c <Car_Init>:


void Car_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	Motor_Init(&Rmotor);
 8001b40:	4814      	ldr	r0, [pc, #80]	@ (8001b94 <Car_Init+0x58>)
 8001b42:	f002 fc2f 	bl	80043a4 <Motor_Init>
	Motor_Init(&Lmotor);
 8001b46:	4814      	ldr	r0, [pc, #80]	@ (8001b98 <Car_Init+0x5c>)
 8001b48:	f002 fc2c 	bl	80043a4 <Motor_Init>

	SERVO_Init(&SEV);
 8001b4c:	4813      	ldr	r0, [pc, #76]	@ (8001b9c <Car_Init+0x60>)
 8001b4e:	f002 feeb 	bl	8004928 <SERVO_Init>

	Bluetooth_Init(&BT2);
 8001b52:	4813      	ldr	r0, [pc, #76]	@ (8001ba0 <Car_Init+0x64>)
 8001b54:	f7ff fed8 	bl	8001908 <Bluetooth_Init>

	SPIDev_Init(&BlackPill);
 8001b58:	4812      	ldr	r0, [pc, #72]	@ (8001ba4 <Car_Init+0x68>)
 8001b5a:	f7ff ff69 	bl	8001a30 <SPIDev_Init>

	// BS Buzzer
	BUZZER_Init(GPIOB , GPIO_Pin_9);
 8001b5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b62:	4811      	ldr	r0, [pc, #68]	@ (8001ba8 <Car_Init+0x6c>)
 8001b64:	f002 fbe4 	bl	8004330 <BUZZER_Init>

	BUZZER_Init(GPIOA , GPIO_Pin_9);
 8001b68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b6c:	480f      	ldr	r0, [pc, #60]	@ (8001bac <Car_Init+0x70>)
 8001b6e:	f002 fbdf 	bl	8004330 <BUZZER_Init>
	BUZZER_Init(GPIOA , GPIO_Pin_10);
 8001b72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b76:	480d      	ldr	r0, [pc, #52]	@ (8001bac <Car_Init+0x70>)
 8001b78:	f002 fbda 	bl	8004330 <BUZZER_Init>
	BUZZER_Init(LK_SIGNAL_LED_PORT, LK_LED_GPIO_Pin);   // LK
 8001b7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b80:	480a      	ldr	r0, [pc, #40]	@ (8001bac <Car_Init+0x70>)
 8001b82:	f002 fbd5 	bl	8004330 <BUZZER_Init>
	// AEB LED
	BUZZER_Init(AEB_LED_PORT , AEB_LED_GPIO_Pin);
 8001b86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b8a:	4808      	ldr	r0, [pc, #32]	@ (8001bac <Car_Init+0x70>)
 8001b8c:	f002 fbd0 	bl	8004330 <BUZZER_Init>


}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000028 	.word	0x20000028
 8001b9c:	20000050 	.word	0x20000050
 8001ba0:	20000060 	.word	0x20000060
 8001ba4:	2000006c 	.word	0x2000006c
 8001ba8:	40010c00 	.word	0x40010c00
 8001bac:	40010800 	.word	0x40010800

08001bb0 <Error_type_t_LKASInit>:
void vServoError			(void* arg);

/********************************************************************************************************************/
/****************************************Atomic Functions'DEF Section************************************************/
NError_type_e Error_type_t_LKASInit(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
	NError_type_e rt_type = LKAS_NO_ERROR;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	71fb      	strb	r3, [r7, #7]

	/*Create The LKAS Tasks.*/
	rt_type = NError_type_e_LKAS_CreateTasks();
 8001bba:	f000 f807 	bl	8001bcc <NError_type_e_LKAS_CreateTasks>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]


	return rt_type;
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <NError_type_e_LKAS_CreateTasks>:



static NError_type_e NError_type_e_LKAS_CreateTasks(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af02      	add	r7, sp, #8
	NError_type_e rt_type = LKAS_NO_ERROR;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	73fb      	strb	r3, [r7, #15]
	BaseType_t xTaskCreate_vTaskLDW;
	BaseType_t xTaskCreate_vServoError;

	/*Create the tasks then check if it is actually created or not.*/

	xTaskCreate_vTaskLKAS =  xTaskCreate(vTaskLKAS,"vTaskLKAS", 100, NULL, vTaskLKAS_PRIORITY,&pxLKASCreated);
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <NError_type_e_LKAS_CreateTasks+0x60>)
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2300      	movs	r3, #0
 8001be0:	2264      	movs	r2, #100	@ 0x64
 8001be2:	4913      	ldr	r1, [pc, #76]	@ (8001c30 <NError_type_e_LKAS_CreateTasks+0x64>)
 8001be4:	4813      	ldr	r0, [pc, #76]	@ (8001c34 <NError_type_e_LKAS_CreateTasks+0x68>)
 8001be6:	f001 f825 	bl	8002c34 <xTaskCreate>
 8001bea:	60b8      	str	r0, [r7, #8]
	if(xTaskCreate_vTaskLKAS != pdPASS)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <NError_type_e_LKAS_CreateTasks+0x2a>
	{
		rt_type = TASK_CREATION_ERROR;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	73fb      	strb	r3, [r7, #15]
	}

	xTaskCreate_vTaskLDW = xTaskCreate(vTaskLDW,"vTaskLDW", 100, NULL, vTaskLDW_PRIORITY, NULL);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2264      	movs	r2, #100	@ 0x64
 8001c02:	490d      	ldr	r1, [pc, #52]	@ (8001c38 <NError_type_e_LKAS_CreateTasks+0x6c>)
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <NError_type_e_LKAS_CreateTasks+0x70>)
 8001c06:	f001 f815 	bl	8002c34 <xTaskCreate>
 8001c0a:	6078      	str	r0, [r7, #4]
	if(xTaskCreate_vTaskLDW != pdPASS)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d001      	beq.n	8001c16 <NError_type_e_LKAS_CreateTasks+0x4a>
	{
		rt_type = TASK_CREATION_ERROR;
 8001c12:	2302      	movs	r3, #2
 8001c14:	73fb      	strb	r3, [r7, #15]
	}

	/*LKAS Task is initially Suspended.*/
	vTaskSuspend(pxLKASCreated);
 8001c16:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <NError_type_e_LKAS_CreateTasks+0x60>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 f974 	bl	8002f08 <vTaskSuspend>

	return rt_type;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000180 	.word	0x20000180
 8001c30:	08006c68 	.word	0x08006c68
 8001c34:	08001ce9 	.word	0x08001ce9
 8001c38:	08006c74 	.word	0x08006c74
 8001c3c:	08001c41 	.word	0x08001c41

08001c40 <vTaskLDW>:

/***********************************************************************/
/**********************Scheduling Tasks*********************************/

void vTaskLDW(void* arg)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	uint16_t WarningMes = 'W';
 8001c48:	2357      	movs	r3, #87	@ 0x57
 8001c4a:	82fb      	strh	r3, [r7, #22]
	BaseType_t xQueueSendState = errQUEUE_FULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
	EventBits_t uxBits;
	BaseType_t xSemaphoreTakeState = pdFAIL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		uxBits = xEventGroupGetBits(xCreatedEventGroup);/* Wait a maximum of 100ms for either bit to be set. */
 8001c54:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <vTaskLDW+0x98>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fbef 	bl	800243e <xEventGroupClearBits>
 8001c60:	60b8      	str	r0, [r7, #8]
		xSemaphoreTakeState = xSemaphoreTake(Offset_binarySemaphoreHandler, portMAX_DELAY); /*Take The Semaphore.*/
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <vTaskLDW+0x9c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 fe74 	bl	8002958 <xQueueSemaphoreTake>
 8001c70:	60f8      	str	r0, [r7, #12]
		if(xSemaphoreTakeState == pdPASS)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d124      	bne.n	8001cc2 <vTaskLDW+0x82>
		{
			if((UARTCenterOffset > 0) && ((uxBits & BIT_0) == 0)) /*The Car drifts to right while right turn signal is OFF.*/
 8001c78:	4b19      	ldr	r3, [pc, #100]	@ (8001ce0 <vTaskLDW+0xa0>)
 8001c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	dd0a      	ble.n	8001c98 <vTaskLDW+0x58>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <vTaskLDW+0x58>
			{
				BUZZER_on(LK_SIGNAL_LED_PORT, LK_LED_GPIO_Pin);
 8001c8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c90:	4814      	ldr	r0, [pc, #80]	@ (8001ce4 <vTaskLDW+0xa4>)
 8001c92:	f002 fb67 	bl	8004364 <BUZZER_on>
 8001c96:	e014      	b.n	8001cc2 <vTaskLDW+0x82>
			}
			else if((UARTCenterOffset < 0) && ((uxBits & BIT_2) == 0)) /*The Car drifts to left while left turn signal is OFF.*/
 8001c98:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <vTaskLDW+0xa0>)
 8001c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	da0a      	bge.n	8001cb8 <vTaskLDW+0x78>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <vTaskLDW+0x78>
			{
				BUZZER_on(LK_SIGNAL_LED_PORT, LK_LED_GPIO_Pin);
 8001cac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cb0:	480c      	ldr	r0, [pc, #48]	@ (8001ce4 <vTaskLDW+0xa4>)
 8001cb2:	f002 fb57 	bl	8004364 <BUZZER_on>
 8001cb6:	e004      	b.n	8001cc2 <vTaskLDW+0x82>
			}
			else
			{
				BUZZER_off(LK_SIGNAL_LED_PORT, LK_LED_GPIO_Pin);
 8001cb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cbc:	4809      	ldr	r0, [pc, #36]	@ (8001ce4 <vTaskLDW+0xa4>)
 8001cbe:	f002 fb61 	bl	8004384 <BUZZER_off>
			}
		}
		else{}
		xSemaphoreGive(Offset_binarySemaphoreHandler);
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <vTaskLDW+0x9c>)
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	f000 fdb2 	bl	8002834 <xQueueGenericSend>
		vTaskDelay(100);
 8001cd0:	2064      	movs	r0, #100	@ 0x64
 8001cd2:	f001 f8f5 	bl	8002ec0 <vTaskDelay>
		uxBits = xEventGroupGetBits(xCreatedEventGroup);/* Wait a maximum of 100ms for either bit to be set. */
 8001cd6:	e7bd      	b.n	8001c54 <vTaskLDW+0x14>
 8001cd8:	200001a4 	.word	0x200001a4
 8001cdc:	20000190 	.word	0x20000190
 8001ce0:	200001a8 	.word	0x200001a8
 8001ce4:	40010800 	.word	0x40010800

08001ce8 <vTaskLKAS>:
}



void vTaskLKAS(void*arg)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	EventBits_t uxBits;
	BaseType_t xSemaphoreTakeState = pdFAIL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		uxBits = xEventGroupGetBits(xCreatedEventGroup);/* Wait a maximum of 100ms for either bit to be set. */
 8001cf4:	4b35      	ldr	r3, [pc, #212]	@ (8001dcc <vTaskLKAS+0xe4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fb9f 	bl	800243e <xEventGroupClearBits>
 8001d00:	60b8      	str	r0, [r7, #8]
		xSemaphoreTakeState = xSemaphoreTake(Offset_binarySemaphoreHandler, portMAX_DELAY); /*Take The Semaphore.*/
 8001d02:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <vTaskLKAS+0xe8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fe24 	bl	8002958 <xQueueSemaphoreTake>
 8001d10:	60f8      	str	r0, [r7, #12]
		if(xSemaphoreTakeState == pdPASS)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d14d      	bne.n	8001db4 <vTaskLKAS+0xcc>
		{
			if(UARTCenterOffset > 0)
 8001d18:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <vTaskLKAS+0xec>)
 8001d1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	dd1f      	ble.n	8001d62 <vTaskLKAS+0x7a>
			{
				gCurrent_Angle = CENTER_ANGLE - 6 * (UARTCenterOffset) ;
 8001d22:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <vTaskLKAS+0xec>)
 8001d24:	f993 3000 	ldrsb.w	r3, [r3]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	333c      	adds	r3, #60	@ 0x3c
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <vTaskLKAS+0xf0>)
 8001d3a:	801a      	strh	r2, [r3, #0]
				if((gCurrent_Angle > 0) && (gCurrent_Angle < 180))
 8001d3c:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <vTaskLKAS+0xf0>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d037      	beq.n	8001db4 <vTaskLKAS+0xcc>
 8001d44:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <vTaskLKAS+0xf0>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d4a:	d833      	bhi.n	8001db4 <vTaskLKAS+0xcc>
				{
					SERVO_MoveTo(&SEV ,gCurrent_Angle);
 8001d4c:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <vTaskLKAS+0xf0>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe feb1 	bl	8000ab8 <__aeabi_ui2f>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4820      	ldr	r0, [pc, #128]	@ (8001ddc <vTaskLKAS+0xf4>)
 8001d5c:	f002 fee0 	bl	8004b20 <SERVO_MoveTo>
 8001d60:	e028      	b.n	8001db4 <vTaskLKAS+0xcc>
				}

			}else if(UARTCenterOffset < 0)
 8001d62:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <vTaskLKAS+0xec>)
 8001d64:	f993 3000 	ldrsb.w	r3, [r3]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da1f      	bge.n	8001dac <vTaskLKAS+0xc4>
			{
				gCurrent_Angle = CENTER_ANGLE - 6 * (UARTCenterOffset) ;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <vTaskLKAS+0xec>)
 8001d6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	333c      	adds	r3, #60	@ 0x3c
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <vTaskLKAS+0xf0>)
 8001d84:	801a      	strh	r2, [r3, #0]
				if((gCurrent_Angle > 0) && (gCurrent_Angle < 180))
 8001d86:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <vTaskLKAS+0xf0>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d012      	beq.n	8001db4 <vTaskLKAS+0xcc>
 8001d8e:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <vTaskLKAS+0xf0>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d94:	d80e      	bhi.n	8001db4 <vTaskLKAS+0xcc>
				{
					SERVO_MoveTo(&SEV ,gCurrent_Angle);
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <vTaskLKAS+0xf0>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fe8c 	bl	8000ab8 <__aeabi_ui2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4619      	mov	r1, r3
 8001da4:	480d      	ldr	r0, [pc, #52]	@ (8001ddc <vTaskLKAS+0xf4>)
 8001da6:	f002 febb 	bl	8004b20 <SERVO_MoveTo>
 8001daa:	e003      	b.n	8001db4 <vTaskLKAS+0xcc>
				}
			}
			else
			{
				SERVO_MoveTo(&SEV ,CENTER_ANGLE);
 8001dac:	490c      	ldr	r1, [pc, #48]	@ (8001de0 <vTaskLKAS+0xf8>)
 8001dae:	480b      	ldr	r0, [pc, #44]	@ (8001ddc <vTaskLKAS+0xf4>)
 8001db0:	f002 feb6 	bl	8004b20 <SERVO_MoveTo>
			}
		}
		else{}
		xSemaphoreGive(Offset_binarySemaphoreHandler);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <vTaskLKAS+0xe8>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	2300      	movs	r3, #0
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f000 fd39 	bl	8002834 <xQueueGenericSend>
		vTaskDelay(100);
 8001dc2:	2064      	movs	r0, #100	@ 0x64
 8001dc4:	f001 f87c 	bl	8002ec0 <vTaskDelay>
		uxBits = xEventGroupGetBits(xCreatedEventGroup);/* Wait a maximum of 100ms for either bit to be set. */
 8001dc8:	e794      	b.n	8001cf4 <vTaskLKAS+0xc>
 8001dca:	bf00      	nop
 8001dcc:	200001a4 	.word	0x200001a4
 8001dd0:	20000190 	.word	0x20000190
 8001dd4:	200001a8 	.word	0x200001a8
 8001dd8:	2000018a 	.word	0x2000018a
 8001ddc:	20000050 	.word	0x20000050
 8001de0:	42700000 	.word	0x42700000

08001de4 <SysInit>:
 * It must be called before any initialize function of this project & before the starting of the scheduler
 */
int i;

NSysInit_e SysInit(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
	NSysInit_e rt = SysInit_NO_ERROR;
 8001dea:	2304      	movs	r3, #4
 8001dec:	71fb      	strb	r3, [r7, #7]

	Car_Init();
 8001dee:	f7ff fea5 	bl	8001b3c <Car_Init>
	gCurrent_Speed = 0;
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <SysInit+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
	gCar_Direction = FORWARD;
 8001df8:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <SysInit+0x78>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
	SERVO_MoveTo(&SEV,CENTER_ANGLE);
 8001dfe:	4918      	ldr	r1, [pc, #96]	@ (8001e60 <SysInit+0x7c>)
 8001e00:	4818      	ldr	r0, [pc, #96]	@ (8001e64 <SysInit+0x80>)
 8001e02:	f002 fe8d 	bl	8004b20 <SERVO_MoveTo>

	BUZZER_off(AEB_LED_PORT, AEB_LED_GPIO_Pin);
 8001e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e0a:	4817      	ldr	r0, [pc, #92]	@ (8001e68 <SysInit+0x84>)
 8001e0c:	f002 faba 	bl	8004384 <BUZZER_off>
	BUZZER_off(RIGHT_SIGNAL_LED_PORT, LEFT_LED_GPIO_Pin);
 8001e10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e14:	4814      	ldr	r0, [pc, #80]	@ (8001e68 <SysInit+0x84>)
 8001e16:	f002 fab5 	bl	8004384 <BUZZER_off>
	BUZZER_off(LEFT_SIGNAL_LED_PORT, RIGHT_LED_GPIO_Pin);
 8001e1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e1e:	4812      	ldr	r0, [pc, #72]	@ (8001e68 <SysInit+0x84>)
 8001e20:	f002 fab0 	bl	8004384 <BUZZER_off>
	BUZZER_off(LK_SIGNAL_LED_PORT, LK_LED_GPIO_Pin);
 8001e24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e28:	480f      	ldr	r0, [pc, #60]	@ (8001e68 <SysInit+0x84>)
 8001e2a:	f002 faab 	bl	8004384 <BUZZER_off>

	/*********************************************Objects Creation**************************************/
	rt = vSysInit_CreateSemaphore();
 8001e2e:	f000 f81d 	bl	8001e6c <vSysInit_CreateSemaphore>
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
	rt = vSysInit_CreateTasks();
 8001e36:	f000 f8bd 	bl	8001fb4 <vSysInit_CreateTasks>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	rt = vSysInit_CreateQueues();
 8001e3e:	f000 f89f 	bl	8001f80 <vSysInit_CreateQueues>
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
	rt = SysInit_CreateEventGroups();
 8001e46:	f000 f8c1 	bl	8001fcc <SysInit_CreateEventGroups>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]

	return rt;
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000184 	.word	0x20000184
 8001e5c:	20000185 	.word	0x20000185
 8001e60:	42700000 	.word	0x42700000
 8001e64:	20000050 	.word	0x20000050
 8001e68:	40010800 	.word	0x40010800

08001e6c <vSysInit_CreateSemaphore>:

/**************************************One Shot Tasks Definition.************************************/
static NSysInit_e vSysInit_CreateSemaphore()
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
	NSysInit_e rt = SysInit_NO_ERROR;
 8001e72:	2304      	movs	r3, #4
 8001e74:	71fb      	strb	r3, [r7, #7]
	BaseType_t xSemaphoreGiveState = pdFAIL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]

	binarySemaphoreHandler = xSemaphoreCreateBinary(); /*Create binary semaphore for the function of receiving data*/
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f000 fc79 	bl	8002776 <xQueueGenericCreate>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4a38      	ldr	r2, [pc, #224]	@ (8001f68 <vSysInit_CreateSemaphore+0xfc>)
 8001e88:	6013      	str	r3, [r2, #0]
	if(binarySemaphoreHandler == NULL) /*The semaphore could not be created*/
 8001e8a:	4b37      	ldr	r3, [pc, #220]	@ (8001f68 <vSysInit_CreateSemaphore+0xfc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <vSysInit_CreateSemaphore+0x2a>
	{
		rt = SysInit_ERROR_COULD_NOT_CREATE_BINARY_SEMAPHORE;
 8001e92:	2302      	movs	r3, #2
 8001e94:	71fb      	strb	r3, [r7, #7]
	}

	xSemaphoreGiveState = xSemaphoreGive(binarySemaphoreHandler); /*Semaphore is initially given.*/
 8001e96:	4b34      	ldr	r3, [pc, #208]	@ (8001f68 <vSysInit_CreateSemaphore+0xfc>)
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	f000 fcc8 	bl	8002834 <xQueueGenericSend>
 8001ea4:	6038      	str	r0, [r7, #0]
	if(xSemaphoreGiveState == pdFAIL) /*The semaphore can not be given.*/
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <vSysInit_CreateSemaphore+0x44>
	{
		rt = SysInit_ERROR_COULD_NOT_GIVE_SEMAPHORE;
 8001eac:	2303      	movs	r3, #3
 8001eae:	71fb      	strb	r3, [r7, #7]
	}

	Offset_binarySemaphoreHandler = xSemaphoreCreateBinary(); /*Create binary semaphore for the function of receiving data*/
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f000 fc5e 	bl	8002776 <xQueueGenericCreate>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f6c <vSysInit_CreateSemaphore+0x100>)
 8001ebe:	6013      	str	r3, [r2, #0]
	if(Offset_binarySemaphoreHandler == NULL) /*The semaphore could not be created*/
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f6c <vSysInit_CreateSemaphore+0x100>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <vSysInit_CreateSemaphore+0x60>
	{
		rt = SysInit_ERROR_COULD_NOT_CREATE_BINARY_SEMAPHORE;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	71fb      	strb	r3, [r7, #7]
	}

	xSemaphoreGiveState = xSemaphoreGive(Offset_binarySemaphoreHandler); /*Semaphore is initially given.*/
 8001ecc:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <vSysInit_CreateSemaphore+0x100>)
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	f000 fcad 	bl	8002834 <xQueueGenericSend>
 8001eda:	6038      	str	r0, [r7, #0]
	if(xSemaphoreGiveState == pdFAIL) /*The semaphore can not be given.*/
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <vSysInit_CreateSemaphore+0x7a>
	{
		rt = SysInit_ERROR_COULD_NOT_GIVE_SEMAPHORE;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	71fb      	strb	r3, [r7, #7]
	}

	/* -------------------------- APP Semaphore ------------------------- */

	Current_Angle_Semaphore_Handler = xSemaphoreCreateBinary();
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2001      	movs	r0, #1
 8001eec:	f000 fc43 	bl	8002776 <xQueueGenericCreate>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <vSysInit_CreateSemaphore+0x104>)
 8001ef4:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(Current_Angle_Semaphore_Handler);
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <vSysInit_CreateSemaphore+0x104>)
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	2300      	movs	r3, #0
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	f000 fc98 	bl	8002834 <xQueueGenericSend>

	Current_Speed_Semaphore_Handler = xSemaphoreCreateBinary();
 8001f04:	2203      	movs	r2, #3
 8001f06:	2100      	movs	r1, #0
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f000 fc34 	bl	8002776 <xQueueGenericCreate>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a18      	ldr	r2, [pc, #96]	@ (8001f74 <vSysInit_CreateSemaphore+0x108>)
 8001f12:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(Current_Speed_Semaphore_Handler);
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <vSysInit_CreateSemaphore+0x108>)
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f000 fc89 	bl	8002834 <xQueueGenericSend>

	Desired_Speed_Semaphore_Handler = xSemaphoreCreateBinary();
 8001f22:	2203      	movs	r2, #3
 8001f24:	2100      	movs	r1, #0
 8001f26:	2001      	movs	r0, #1
 8001f28:	f000 fc25 	bl	8002776 <xQueueGenericCreate>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <vSysInit_CreateSemaphore+0x10c>)
 8001f30:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(Desired_Speed_Semaphore_Handler);
 8001f32:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <vSysInit_CreateSemaphore+0x10c>)
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	2300      	movs	r3, #0
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	f000 fc7a 	bl	8002834 <xQueueGenericSend>

	Desired_Distance_Semaphore_Handler = xSemaphoreCreateBinary();
 8001f40:	2203      	movs	r2, #3
 8001f42:	2100      	movs	r1, #0
 8001f44:	2001      	movs	r0, #1
 8001f46:	f000 fc16 	bl	8002776 <xQueueGenericCreate>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <vSysInit_CreateSemaphore+0x110>)
 8001f4e:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(Desired_Distance_Semaphore_Handler);
 8001f50:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <vSysInit_CreateSemaphore+0x110>)
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	2300      	movs	r3, #0
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	f000 fc6b 	bl	8002834 <xQueueGenericSend>


	/* ------------------------------------------------------------------- */


	return rt;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	2000018c 	.word	0x2000018c
 8001f6c:	20000190 	.word	0x20000190
 8001f70:	20000194 	.word	0x20000194
 8001f74:	2000016c 	.word	0x2000016c
 8001f78:	20000198 	.word	0x20000198
 8001f7c:	2000019c 	.word	0x2000019c

08001f80 <vSysInit_CreateQueues>:
static NSysInit_e vSysInit_CreateQueues()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
	NSysInit_e rt = SysInit_NO_ERROR;
 8001f86:	2304      	movs	r3, #4
 8001f88:	71fb      	strb	r3, [r7, #7]

	LCDQueue = xQueueCreate(MAX_LCD_MESSAGES, LEN_LCD_MESSAGE); /*Create LCD Queue.*/
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	2005      	movs	r0, #5
 8001f90:	f000 fbf1 	bl	8002776 <xQueueGenericCreate>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4a06      	ldr	r2, [pc, #24]	@ (8001fb0 <vSysInit_CreateQueues+0x30>)
 8001f98:	6013      	str	r3, [r2, #0]
	if(LCDQueue == NULL) /*The Queue could not be created*/
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <vSysInit_CreateQueues+0x30>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <vSysInit_CreateQueues+0x26>
	{
		rt = SysInit_xQueueCreate_ERROR;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	71fb      	strb	r3, [r7, #7]
	}
	return rt;
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200001a0 	.word	0x200001a0

08001fb4 <vSysInit_CreateTasks>:
static NSysInit_e vSysInit_CreateTasks()
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
	NSysInit_e rt = SysInit_NO_ERROR;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	71fb      	strb	r3, [r7, #7]
	//	xTaskCreate_vReadDataFromUART =  xTaskCreate(vReadDataFromUART,"vReadDataFromUART", 100, NULL, vReadDataFromUART_PRIORITY,NULL); /*Create UART Task, with priority 2, 100 byte.*/
	//	if(xTaskCreate_vReadDataFromUART != pdPASS) /*The task could not be created*/
	//	{
	//		rt = SysInit_ERROR_COULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	//	}
	return rt;
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
	...

08001fcc <SysInit_CreateEventGroups>:


static NSysInit_e SysInit_CreateEventGroups()
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
	NSysInit_e rt = SysInit_NO_ERROR;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	71fb      	strb	r3, [r7, #7]

	/* Attempt to create the event group. */
	xCreatedEventGroup = xEventGroupCreate();
 8001fd6:	f000 fa1b 	bl	8002410 <xEventGroupCreate>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a06      	ldr	r2, [pc, #24]	@ (8001ff8 <SysInit_CreateEventGroups+0x2c>)
 8001fde:	6013      	str	r3, [r2, #0]
	/* Was the event group created successfully? */
	if( xCreatedEventGroup == NULL )
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <SysInit_CreateEventGroups+0x2c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <SysInit_CreateEventGroups+0x20>
	{
		/* The event group was not created because there was insufficient
	FreeRTOS heap available. */
		rt = SysInit_ERROR_COULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		/* The event group was created. */
	}
	return rt;
 8001fec:	79fb      	ldrb	r3, [r7, #7]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200001a4 	.word	0x200001a4

08001ffc <vReadDataFromM4>:
/* These Functions must be treated as a critical section
 * Can be called from any task to collect the sensors'data
 ******************************************************************************************/

void vReadDataFromM4(uint16_t ID, uint16_t* data)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	80fb      	strh	r3, [r7, #6]
	SPI_I2S_SendData(SPI2 , ID);
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	4619      	mov	r1, r3
 800200c:	4806      	ldr	r0, [pc, #24]	@ (8002028 <vReadDataFromM4+0x2c>)
 800200e:	f003 f8e4 	bl	80051da <SPI_I2S_SendData>
	*data = SPI_I2S_ReceiveData(SPI2);
 8002012:	4805      	ldr	r0, [pc, #20]	@ (8002028 <vReadDataFromM4+0x2c>)
 8002014:	f003 f900 	bl	8005218 <SPI_I2S_ReceiveData>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	801a      	strh	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40003800 	.word	0x40003800

0800202c <USART3_IRQHandler>:
uint8_t RightSignalFlag = 0;
uint8_t LeftSignalFlag = 0;


void USART3_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
	EventBits_t uxBits;
	// static uint8_t ACC_State = OFF;
	// static uint8_t RightSignalFlag = 0;
	// static uint8_t LeftSignalFlag = 0;
	static uint8_t LKSignalFlag = 0;
	BaseType_t xSemaphoreTakeState = pdFAIL;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]


	RasPI_ReceivedData = USART_ReceiveData(USART3);
 8002036:	48a5      	ldr	r0, [pc, #660]	@ (80022cc <USART3_IRQHandler+0x2a0>)
 8002038:	f003 fd28 	bl	8005a8c <USART_ReceiveData>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	4ba3      	ldr	r3, [pc, #652]	@ (80022d0 <USART3_IRQHandler+0x2a4>)
 8002042:	801a      	strh	r2, [r3, #0]


	if(RasPI_ReceivedData >=1 && RasPI_ReceivedData <= 11)
 8002044:	4ba2      	ldr	r3, [pc, #648]	@ (80022d0 <USART3_IRQHandler+0x2a4>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8197 	beq.w	800237c <USART3_IRQHandler+0x350>
 800204e:	4ba0      	ldr	r3, [pc, #640]	@ (80022d0 <USART3_IRQHandler+0x2a4>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	2b0b      	cmp	r3, #11
 8002054:	f200 8192 	bhi.w	800237c <USART3_IRQHandler+0x350>
	{
		switch (RasPI_ReceivedData)
 8002058:	4b9d      	ldr	r3, [pc, #628]	@ (80022d0 <USART3_IRQHandler+0x2a4>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	3b01      	subs	r3, #1
 800205e:	2b0a      	cmp	r3, #10
 8002060:	f200 81c2 	bhi.w	80023e8 <USART3_IRQHandler+0x3bc>
 8002064:	a201      	add	r2, pc, #4	@ (adr r2, 800206c <USART3_IRQHandler+0x40>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	080020f3 	.word	0x080020f3
 8002070:	080020a1 	.word	0x080020a1
 8002074:	080020cd 	.word	0x080020cd
 8002078:	08002099 	.word	0x08002099
 800207c:	0800211f 	.word	0x0800211f
 8002080:	0800216b 	.word	0x0800216b
 8002084:	080021e3 	.word	0x080021e3
 8002088:	08002249 	.word	0x08002249
 800208c:	08002311 	.word	0x08002311
 8002090:	0800227f 	.word	0x0800227f
 8002094:	080021b7 	.word	0x080021b7
		{

		/* --------- Control Directions ------*/
		case CAR_FORWARD:  //1
			gCar_Direction = FORWARD;
 8002098:	4b8e      	ldr	r3, [pc, #568]	@ (80022d4 <USART3_IRQHandler+0x2a8>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
			break;
 800209e:	e16c      	b.n	800237a <USART3_IRQHandler+0x34e>

		case CAR_RIGHT:   //2
			if(gCurrent_Angle < MAX_ANGLE)
 80020a0:	4b8d      	ldr	r3, [pc, #564]	@ (80022d8 <USART3_IRQHandler+0x2ac>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	2b7c      	cmp	r3, #124	@ 0x7c
 80020a6:	f200 8159 	bhi.w	800235c <USART3_IRQHandler+0x330>
			{
				// xSemaphoreTake(Current_Angle_Semaphore_Handler, portMAX_DELAY);
				gCurrent_Angle += 15;
 80020aa:	4b8b      	ldr	r3, [pc, #556]	@ (80022d8 <USART3_IRQHandler+0x2ac>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	330f      	adds	r3, #15
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b89      	ldr	r3, [pc, #548]	@ (80022d8 <USART3_IRQHandler+0x2ac>)
 80020b4:	801a      	strh	r2, [r3, #0]
				//xSemaphoreGive(Current_Angle_Semaphore_Handler);
				SERVO_MoveTo(&SEV, gCurrent_Angle);
 80020b6:	4b88      	ldr	r3, [pc, #544]	@ (80022d8 <USART3_IRQHandler+0x2ac>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fcfc 	bl	8000ab8 <__aeabi_ui2f>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4619      	mov	r1, r3
 80020c4:	4885      	ldr	r0, [pc, #532]	@ (80022dc <USART3_IRQHandler+0x2b0>)
 80020c6:	f002 fd2b 	bl	8004b20 <SERVO_MoveTo>
			}
			break;
 80020ca:	e147      	b.n	800235c <USART3_IRQHandler+0x330>

		case CAR_BACKWORD:  //3
			gCar_Direction = REVERSE;
 80020cc:	4b81      	ldr	r3, [pc, #516]	@ (80022d4 <USART3_IRQHandler+0x2a8>)
 80020ce:	2202      	movs	r2, #2
 80020d0:	701a      	strb	r2, [r3, #0]
			vTaskResume(vAEB_Task_Handler);
 80020d2:	4b83      	ldr	r3, [pc, #524]	@ (80022e0 <USART3_IRQHandler+0x2b4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 ffc6 	bl	8003068 <vTaskResume>
			vTaskSuspend(vACC_Task_Handler);
 80020dc:	4b81      	ldr	r3, [pc, #516]	@ (80022e4 <USART3_IRQHandler+0x2b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 ff11 	bl	8002f08 <vTaskSuspend>
			vTaskSuspend(vSign_Task_Handler);
 80020e6:	4b80      	ldr	r3, [pc, #512]	@ (80022e8 <USART3_IRQHandler+0x2bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 ff0c 	bl	8002f08 <vTaskSuspend>
			break;
 80020f0:	e143      	b.n	800237a <USART3_IRQHandler+0x34e>

		case CAR_LEFT:  //4
			if(gCurrent_Angle > MIN_ANGLE)
 80020f2:	4b79      	ldr	r3, [pc, #484]	@ (80022d8 <USART3_IRQHandler+0x2ac>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8132 	beq.w	8002360 <USART3_IRQHandler+0x334>
			{
				//xSemaphoreTake(Current_Angle_Semaphore_Handler, portMAX_DELAY);
				gCurrent_Angle -= 15;
 80020fc:	4b76      	ldr	r3, [pc, #472]	@ (80022d8 <USART3_IRQHandler+0x2ac>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	3b0f      	subs	r3, #15
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b74      	ldr	r3, [pc, #464]	@ (80022d8 <USART3_IRQHandler+0x2ac>)
 8002106:	801a      	strh	r2, [r3, #0]
				//xSemaphoreGive(Current_Angle_Semaphore_Handler);
				SERVO_MoveTo(&SEV, gCurrent_Angle);
 8002108:	4b73      	ldr	r3, [pc, #460]	@ (80022d8 <USART3_IRQHandler+0x2ac>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fcd3 	bl	8000ab8 <__aeabi_ui2f>
 8002112:	4603      	mov	r3, r0
 8002114:	4619      	mov	r1, r3
 8002116:	4871      	ldr	r0, [pc, #452]	@ (80022dc <USART3_IRQHandler+0x2b0>)
 8002118:	f002 fd02 	bl	8004b20 <SERVO_MoveTo>
			}
			break;
 800211c:	e120      	b.n	8002360 <USART3_IRQHandler+0x334>

			/*---------- Control Speed ----------*/
		case SPEED_INC:  //5
			if(gCurrent_Speed < MAX_SPEED_ && gCar_Direction != STOP)
 800211e:	4b73      	ldr	r3, [pc, #460]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b36      	cmp	r3, #54	@ 0x36
 8002124:	f200 811e 	bhi.w	8002364 <USART3_IRQHandler+0x338>
 8002128:	4b6a      	ldr	r3, [pc, #424]	@ (80022d4 <USART3_IRQHandler+0x2a8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b03      	cmp	r3, #3
 800212e:	f000 8119 	beq.w	8002364 <USART3_IRQHandler+0x338>
			{
			xSemaphoreTake(Current_Speed_Semaphore_Handler, portMAX_DELAY);
 8002132:	4b6f      	ldr	r3, [pc, #444]	@ (80022f0 <USART3_IRQHandler+0x2c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f04f 31ff 	mov.w	r1, #4294967295
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fc0c 	bl	8002958 <xQueueSemaphoreTake>
			gCurrent_Speed += ( gCurrent_Speed == 0 )? 15 : 10;
 8002140:	4b6a      	ldr	r3, [pc, #424]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <USART3_IRQHandler+0x120>
 8002148:	220f      	movs	r2, #15
 800214a:	e000      	b.n	800214e <USART3_IRQHandler+0x122>
 800214c:	220a      	movs	r2, #10
 800214e:	4b67      	ldr	r3, [pc, #412]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b65      	ldr	r3, [pc, #404]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 8002158:	701a      	strb	r2, [r3, #0]
			// gSpeed_Up = gCurrent_Speed;
			xSemaphoreGive(Current_Speed_Semaphore_Handler);
 800215a:	4b65      	ldr	r3, [pc, #404]	@ (80022f0 <USART3_IRQHandler+0x2c4>)
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	2300      	movs	r3, #0
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	f000 fb66 	bl	8002834 <xQueueGenericSend>
			}
			break;
 8002168:	e0fc      	b.n	8002364 <USART3_IRQHandler+0x338>

		case SPEED_DEC: //6
			if (gCurrent_Speed >= MIN_SPEED && gCar_Direction != STOP)
 800216a:	4b60      	ldr	r3, [pc, #384]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b0e      	cmp	r3, #14
 8002170:	f240 80fa 	bls.w	8002368 <USART3_IRQHandler+0x33c>
 8002174:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <USART3_IRQHandler+0x2a8>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b03      	cmp	r3, #3
 800217a:	f000 80f5 	beq.w	8002368 <USART3_IRQHandler+0x33c>
			{
				xSemaphoreTake(Current_Speed_Semaphore_Handler, portMAX_DELAY);
 800217e:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <USART3_IRQHandler+0x2c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f04f 31ff 	mov.w	r1, #4294967295
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fbe6 	bl	8002958 <xQueueSemaphoreTake>
				gCurrent_Speed -= ( gCurrent_Speed == 15 )? 15 : 10;
 800218c:	4b57      	ldr	r3, [pc, #348]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 800218e:	781a      	ldrb	r2, [r3, #0]
 8002190:	4b56      	ldr	r3, [pc, #344]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d101      	bne.n	800219c <USART3_IRQHandler+0x170>
 8002198:	230f      	movs	r3, #15
 800219a:	e000      	b.n	800219e <USART3_IRQHandler+0x172>
 800219c:	230a      	movs	r3, #10
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b52      	ldr	r3, [pc, #328]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 80021a4:	701a      	strb	r2, [r3, #0]
				// gSpeed_Up = gCurrent_Speed;
				xSemaphoreGive(Current_Speed_Semaphore_Handler);
 80021a6:	4b52      	ldr	r3, [pc, #328]	@ (80022f0 <USART3_IRQHandler+0x2c4>)
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	2300      	movs	r3, #0
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	f000 fb40 	bl	8002834 <xQueueGenericSend>
			}
			break;
 80021b4:	e0d8      	b.n	8002368 <USART3_IRQHandler+0x33c>

		case CAR_STOP:  //7
			gCar_Direction = STOP;
 80021b6:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <USART3_IRQHandler+0x2a8>)
 80021b8:	2203      	movs	r2, #3
 80021ba:	701a      	strb	r2, [r3, #0]
			gCurrent_Speed = 0;
 80021bc:	4b4b      	ldr	r3, [pc, #300]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
			vTaskResume(vAEB_Task_Handler);
 80021c2:	4b47      	ldr	r3, [pc, #284]	@ (80022e0 <USART3_IRQHandler+0x2b4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 ff4e 	bl	8003068 <vTaskResume>
			vTaskSuspend(vACC_Task_Handler);
 80021cc:	4b45      	ldr	r3, [pc, #276]	@ (80022e4 <USART3_IRQHandler+0x2b8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fe99 	bl	8002f08 <vTaskSuspend>
			vTaskSuspend(vSign_Task_Handler);
 80021d6:	4b44      	ldr	r3, [pc, #272]	@ (80022e8 <USART3_IRQHandler+0x2bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fe94 	bl	8002f08 <vTaskSuspend>
			break;
 80021e0:	e0cb      	b.n	800237a <USART3_IRQHandler+0x34e>

			/*------------- ACC ---------------*/

		case ACC_ON_OFF : //8
			ACC_State = !ACC_State;
 80021e2:	4b44      	ldr	r3, [pc, #272]	@ (80022f4 <USART3_IRQHandler+0x2c8>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b40      	ldr	r3, [pc, #256]	@ (80022f4 <USART3_IRQHandler+0x2c8>)
 80021f4:	701a      	strb	r2, [r3, #0]
			if(ACC_State == ON)
 80021f6:	4b3f      	ldr	r3, [pc, #252]	@ (80022f4 <USART3_IRQHandler+0x2c8>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10f      	bne.n	800221e <USART3_IRQHandler+0x1f2>
			{
				gDesired_Speed = gCurrent_Speed;
 80021fe:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <USART3_IRQHandler+0x2c0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	4b3c      	ldr	r3, [pc, #240]	@ (80022f8 <USART3_IRQHandler+0x2cc>)
 8002206:	801a      	strh	r2, [r3, #0]
				vTaskSuspend(vAEB_Task_Handler);
 8002208:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <USART3_IRQHandler+0x2b4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fe7b 	bl	8002f08 <vTaskSuspend>
				vTaskResume(vACC_Task_Handler);
 8002212:	4b34      	ldr	r3, [pc, #208]	@ (80022e4 <USART3_IRQHandler+0x2b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 ff26 	bl	8003068 <vTaskResume>
			{
				vTaskResume(vAEB_Task_Handler);
				vTaskSuspend(vACC_Task_Handler);
				vTaskSuspend(vSign_Task_Handler);
			}
			break;
 800221c:	e0a6      	b.n	800236c <USART3_IRQHandler+0x340>
			}else if (ACC_State == OFF)
 800221e:	4b35      	ldr	r3, [pc, #212]	@ (80022f4 <USART3_IRQHandler+0x2c8>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 80a2 	bne.w	800236c <USART3_IRQHandler+0x340>
				vTaskResume(vAEB_Task_Handler);
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <USART3_IRQHandler+0x2b4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 ff1b 	bl	8003068 <vTaskResume>
				vTaskSuspend(vACC_Task_Handler);
 8002232:	4b2c      	ldr	r3, [pc, #176]	@ (80022e4 <USART3_IRQHandler+0x2b8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fe66 	bl	8002f08 <vTaskSuspend>
				vTaskSuspend(vSign_Task_Handler);
 800223c:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <USART3_IRQHandler+0x2bc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fe61 	bl	8002f08 <vTaskSuspend>
			break;
 8002246:	e091      	b.n	800236c <USART3_IRQHandler+0x340>

			/* ---------------- LK --------------------*/

		case LK_ON_OFF: //9
			if(LKSignalFlag == 0) /*LK is ON.*/
 8002248:	4b2c      	ldr	r3, [pc, #176]	@ (80022fc <USART3_IRQHandler+0x2d0>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d108      	bne.n	8002262 <USART3_IRQHandler+0x236>
			{
				xTaskResumeFromISR(pxLKASCreated);
 8002250:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <USART3_IRQHandler+0x2d4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 ff6f 	bl	8003138 <xTaskResumeFromISR>
				LKSignalFlag = 1;
 800225a:	4b28      	ldr	r3, [pc, #160]	@ (80022fc <USART3_IRQHandler+0x2d0>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
			else if(LKSignalFlag == 1)  /*LK is OFF.*/
			{
				vTaskSuspend(pxLKASCreated);
				LKSignalFlag = 0;
			}
			break;
 8002260:	e086      	b.n	8002370 <USART3_IRQHandler+0x344>
			else if(LKSignalFlag == 1)  /*LK is OFF.*/
 8002262:	4b26      	ldr	r3, [pc, #152]	@ (80022fc <USART3_IRQHandler+0x2d0>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	f040 8082 	bne.w	8002370 <USART3_IRQHandler+0x344>
				vTaskSuspend(pxLKASCreated);
 800226c:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <USART3_IRQHandler+0x2d4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fe49 	bl	8002f08 <vTaskSuspend>
				LKSignalFlag = 0;
 8002276:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <USART3_IRQHandler+0x2d0>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
			break;
 800227c:	e078      	b.n	8002370 <USART3_IRQHandler+0x344>


		case RIGHT_TURN_SIGNAL:   // A
			if(RightSignalFlag == 0)
 800227e:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <USART3_IRQHandler+0x2d8>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d112      	bne.n	80022ac <USART3_IRQHandler+0x280>
			{
				RightSignalFlag = 1;
 8002286:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <USART3_IRQHandler+0x2d8>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
				uxBits = xEventGroupSetBits(xCreatedEventGroup, BIT_0);/* The bit being set. */
 800228c:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <USART3_IRQHandler+0x2dc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f8ed 	bl	8002472 <xEventGroupSetBits>
 8002298:	6038      	str	r0, [r7, #0]
				if((uxBits & BIT_0) == 0)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d167      	bne.n	8002374 <USART3_IRQHandler+0x348>
				{
					printf("BIT 0 IS NOT SET");
 80022a4:	4819      	ldr	r0, [pc, #100]	@ (800230c <USART3_IRQHandler+0x2e0>)
 80022a6:	f003 fdfd 	bl	8005ea4 <iprintf>
			else if(RightSignalFlag == 1) /*Right Turn Signal OFF*/
			{
				uxBits = xEventGroupClearBits(xCreatedEventGroup, BIT_0 );/* The bits being cleared. */
				RightSignalFlag = 0;
			}
			break;
 80022aa:	e063      	b.n	8002374 <USART3_IRQHandler+0x348>
			else if(RightSignalFlag == 1) /*Right Turn Signal OFF*/
 80022ac:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <USART3_IRQHandler+0x2d8>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d15f      	bne.n	8002374 <USART3_IRQHandler+0x348>
				uxBits = xEventGroupClearBits(xCreatedEventGroup, BIT_0 );/* The bits being cleared. */
 80022b4:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <USART3_IRQHandler+0x2dc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f8bf 	bl	800243e <xEventGroupClearBits>
 80022c0:	6038      	str	r0, [r7, #0]
				RightSignalFlag = 0;
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <USART3_IRQHandler+0x2d8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
			break;
 80022c8:	e054      	b.n	8002374 <USART3_IRQHandler+0x348>
 80022ca:	bf00      	nop
 80022cc:	40004800 	.word	0x40004800
 80022d0:	200001aa 	.word	0x200001aa
 80022d4:	20000185 	.word	0x20000185
 80022d8:	2000018a 	.word	0x2000018a
 80022dc:	20000050 	.word	0x20000050
 80022e0:	2000015c 	.word	0x2000015c
 80022e4:	20000154 	.word	0x20000154
 80022e8:	20000158 	.word	0x20000158
 80022ec:	20000184 	.word	0x20000184
 80022f0:	2000016c 	.word	0x2000016c
 80022f4:	200001ac 	.word	0x200001ac
 80022f8:	20000186 	.word	0x20000186
 80022fc:	200001af 	.word	0x200001af
 8002300:	20000180 	.word	0x20000180
 8002304:	200001ad 	.word	0x200001ad
 8002308:	200001a4 	.word	0x200001a4
 800230c:	08006c80 	.word	0x08006c80


		case LEFT_TURN_SIGNAL:   // B
			if((LeftSignalFlag == 0))
 8002310:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <USART3_IRQHandler+0x3c4>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d112      	bne.n	800233e <USART3_IRQHandler+0x312>
			{
				LeftSignalFlag = 1;
 8002318:	4b35      	ldr	r3, [pc, #212]	@ (80023f0 <USART3_IRQHandler+0x3c4>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
				uxBits = xEventGroupSetBits(xCreatedEventGroup, BIT_2);/* The bit being set. */
 800231e:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <USART3_IRQHandler+0x3c8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2104      	movs	r1, #4
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f8a4 	bl	8002472 <xEventGroupSetBits>
 800232a:	6038      	str	r0, [r7, #0]
				if((uxBits & BIT_2) == 0)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d120      	bne.n	8002378 <USART3_IRQHandler+0x34c>
				{
					printf("BIT 2 IS NOT SET");
 8002336:	4830      	ldr	r0, [pc, #192]	@ (80023f8 <USART3_IRQHandler+0x3cc>)
 8002338:	f003 fdb4 	bl	8005ea4 <iprintf>
			else if(LeftSignalFlag == 1)  /*Left Turn Signal OFF.*/
			{
				uxBits = xEventGroupClearBits(xCreatedEventGroup, BIT_2);/* The bits being cleared. */
				LeftSignalFlag = 0;
			}
			break;
 800233c:	e01c      	b.n	8002378 <USART3_IRQHandler+0x34c>
			else if(LeftSignalFlag == 1)  /*Left Turn Signal OFF.*/
 800233e:	4b2c      	ldr	r3, [pc, #176]	@ (80023f0 <USART3_IRQHandler+0x3c4>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d118      	bne.n	8002378 <USART3_IRQHandler+0x34c>
				uxBits = xEventGroupClearBits(xCreatedEventGroup, BIT_2);/* The bits being cleared. */
 8002346:	4b2b      	ldr	r3, [pc, #172]	@ (80023f4 <USART3_IRQHandler+0x3c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2104      	movs	r1, #4
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f876 	bl	800243e <xEventGroupClearBits>
 8002352:	6038      	str	r0, [r7, #0]
				LeftSignalFlag = 0;
 8002354:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <USART3_IRQHandler+0x3c4>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
			break;
 800235a:	e00d      	b.n	8002378 <USART3_IRQHandler+0x34c>
			break;
 800235c:	bf00      	nop
 800235e:	e043      	b.n	80023e8 <USART3_IRQHandler+0x3bc>
			break;
 8002360:	bf00      	nop
 8002362:	e041      	b.n	80023e8 <USART3_IRQHandler+0x3bc>
			break;
 8002364:	bf00      	nop
 8002366:	e03f      	b.n	80023e8 <USART3_IRQHandler+0x3bc>
			break;
 8002368:	bf00      	nop
 800236a:	e03d      	b.n	80023e8 <USART3_IRQHandler+0x3bc>
			break;
 800236c:	bf00      	nop
 800236e:	e03b      	b.n	80023e8 <USART3_IRQHandler+0x3bc>
			break;
 8002370:	bf00      	nop
 8002372:	e039      	b.n	80023e8 <USART3_IRQHandler+0x3bc>
			break;
 8002374:	bf00      	nop
 8002376:	e037      	b.n	80023e8 <USART3_IRQHandler+0x3bc>
			break;
 8002378:	bf00      	nop
		switch (RasPI_ReceivedData)
 800237a:	e035      	b.n	80023e8 <USART3_IRQHandler+0x3bc>
		}
	}else if(RasPI_ReceivedData >=12 && RasPI_ReceivedData <= 15)
 800237c:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <USART3_IRQHandler+0x3d0>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	2b0b      	cmp	r3, #11
 8002382:	d90e      	bls.n	80023a2 <USART3_IRQHandler+0x376>
 8002384:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <USART3_IRQHandler+0x3d0>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d80a      	bhi.n	80023a2 <USART3_IRQHandler+0x376>
	{
		vTaskResume(vSign_Task_Handler);
 800238c:	4b1c      	ldr	r3, [pc, #112]	@ (8002400 <USART3_IRQHandler+0x3d4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fe69 	bl	8003068 <vTaskResume>
		gReceived_Sign = (int8_t)RasPI_ReceivedData;
 8002396:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <USART3_IRQHandler+0x3d0>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <USART3_IRQHandler+0x3d8>)
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e022      	b.n	80023e8 <USART3_IRQHandler+0x3bc>

	}else if (RasPI_ReceivedData >=16 && RasPI_ReceivedData < 255)
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <USART3_IRQHandler+0x3d0>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	d91e      	bls.n	80023e8 <USART3_IRQHandler+0x3bc>
 80023aa:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <USART3_IRQHandler+0x3d0>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80023b0:	d81a      	bhi.n	80023e8 <USART3_IRQHandler+0x3bc>
	{
		xSemaphoreTakeState = xSemaphoreTake(Offset_binarySemaphoreHandler, portMAX_DELAY); /*Take The Semaphore.*/
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <USART3_IRQHandler+0x3dc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 facc 	bl	8002958 <xQueueSemaphoreTake>
 80023c0:	6078      	str	r0, [r7, #4]
		if(xSemaphoreTakeState == pdPASS)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d107      	bne.n	80023d8 <USART3_IRQHandler+0x3ac>
		{
			UARTCenterOffset = (int8_t)RasPI_ReceivedData - 119;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <USART3_IRQHandler+0x3d0>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	3b77      	subs	r3, #119	@ 0x77
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	b25a      	sxtb	r2, r3
 80023d4:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <USART3_IRQHandler+0x3e0>)
 80023d6:	701a      	strb	r2, [r3, #0]
		}
		else{}
		xSemaphoreGive(Offset_binarySemaphoreHandler);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <USART3_IRQHandler+0x3dc>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	f000 fa27 	bl	8002834 <xQueueGenericSend>
	}else{

	}
}
 80023e6:	e7ff      	b.n	80023e8 <USART3_IRQHandler+0x3bc>
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200001ae 	.word	0x200001ae
 80023f4:	200001a4 	.word	0x200001a4
 80023f8:	08006c94 	.word	0x08006c94
 80023fc:	200001aa 	.word	0x200001aa
 8002400:	20000158 	.word	0x20000158
 8002404:	20000188 	.word	0x20000188
 8002408:	20000190 	.word	0x20000190
 800240c:	200001a8 	.word	0x200001a8

08002410 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002416:	2018      	movs	r0, #24
 8002418:	f001 fde2 	bl	8003fe0 <pvPortMalloc>
 800241c:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f88c 	bl	800254c <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8002434:	687b      	ldr	r3, [r7, #4]
    }
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <xEventGroupClearBits>:
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	60fb      	str	r3, [r7, #12]
    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    taskENTER_CRITICAL();
 800244c:	f001 fd2e 	bl	8003eac <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60bb      	str	r3, [r7, #8]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 8002464:	f001 fd3c 	bl	8003ee0 <vPortExitCritical>

    return uxReturn;
 8002468:	68bb      	ldr	r3, [r7, #8]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b08c      	sub	sp, #48	@ 0x30
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800247c:	2300      	movs	r3, #0
 800247e:	62bb      	str	r3, [r7, #40]	@ 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	3304      	adds	r3, #4
 800248c:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3308      	adds	r3, #8
 8002492:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 8002494:	f000 ff1a 	bl	80032cc <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 80024aa:	e03c      	b.n	8002526 <xEventGroupSetBits+0xb4>
        {
            pxNext = listGET_NEXT( pxListItem );
 80024ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80024b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80024c2:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024ca:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <xEventGroupSetBits+0x76>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <xEventGroupSetBits+0x88>
                {
                    xMatchFound = pdTRUE;
 80024e2:	2301      	movs	r3, #1
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e6:	e008      	b.n	80024fa <xEventGroupSetBits+0x88>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d101      	bne.n	80024fa <xEventGroupSetBits+0x88>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <xEventGroupSetBits+0xb0>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <xEventGroupSetBits+0xa0>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 800250a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	62bb      	str	r3, [r7, #40]	@ 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800251a:	4619      	mov	r1, r3
 800251c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800251e:	f001 f9c9 	bl	80038b4 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( pxListItem != pxListEnd )
 8002526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	429a      	cmp	r2, r3
 800252c:	d1be      	bne.n	80024ac <xEventGroupSetBits+0x3a>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002534:	43db      	mvns	r3, r3
 8002536:	401a      	ands	r2, r3
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 800253c:	f000 fed4 	bl	80032e8 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3730      	adds	r7, #48	@ 0x30
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f103 0208 	add.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f103 0208 	add.w	r2, r3, #8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f103 0208 	add.w	r2, r3, #8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d103      	bne.n	8002608 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e00c      	b.n	8002622 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3308      	adds	r3, #8
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	e002      	b.n	8002616 <vListInsert+0x2e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d2f6      	bcs.n	8002610 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6892      	ldr	r2, [r2, #8]
 800266e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6852      	ldr	r2, [r2, #4]
 8002678:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d103      	bne.n	800268c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80026b4:	2301      	movs	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d052      	beq.n	8002768 <xQueueGenericReset+0xbe>
        ( pxQueue->uxLength >= 1U ) &&
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d04e      	beq.n	8002768 <xQueueGenericReset+0xbe>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d2:	2100      	movs	r1, #0
 80026d4:	fba3 2302 	umull	r2, r3, r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d000      	beq.n	80026de <xQueueGenericReset+0x34>
 80026dc:	2101      	movs	r1, #1
 80026de:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d141      	bne.n	8002768 <xQueueGenericReset+0xbe>
    {
        taskENTER_CRITICAL();
 80026e4:	f001 fbe2 	bl	8003eac <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	441a      	add	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2200      	movs	r2, #0
 8002702:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	3b01      	subs	r3, #1
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	441a      	add	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	22ff      	movs	r2, #255	@ 0xff
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	22ff      	movs	r2, #255	@ 0xff
 8002730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <xQueueGenericReset+0xa4>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00f      	beq.n	8002762 <xQueueGenericReset+0xb8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	3310      	adds	r3, #16
 8002746:	4618      	mov	r0, r3
 8002748:	f000 ffec 	bl	8003724 <xTaskRemoveFromEventList>
 800274c:	e009      	b.n	8002762 <xQueueGenericReset+0xb8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3310      	adds	r3, #16
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fefa 	bl	800254c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3324      	adds	r3, #36	@ 0x24
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fef5 	bl	800254c <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8002762:	f001 fbbd 	bl	8003ee0 <vPortExitCritical>
 8002766:	e001      	b.n	800276c <xQueueGenericReset+0xc2>
    }
    else
    {
        xReturn = pdFAIL;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800276c:	68fb      	ldr	r3, [r7, #12]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002776:	b580      	push	{r7, lr}
 8002778:	b08a      	sub	sp, #40	@ 0x28
 800277a:	af02      	add	r7, sp, #8
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	4613      	mov	r3, r2
 8002782:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d02d      	beq.n	80027ea <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800278e:	2100      	movs	r1, #0
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	fba3 2302 	umull	r2, r3, r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d000      	beq.n	800279e <xQueueGenericCreate+0x28>
 800279c:	2101      	movs	r1, #1
 800279e:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d122      	bne.n	80027ea <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80027ac:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 80027b0:	d81b      	bhi.n	80027ea <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	3348      	adds	r3, #72	@ 0x48
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fc0d 	bl	8003fe0 <pvPortMalloc>
 80027c6:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3348      	adds	r3, #72	@ 0x48
 80027d6:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f805 	bl	80027f4 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80027ea:	69fb      	ldr	r3, [r7, #28]
    }
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e002      	b.n	8002816 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002822:	2101      	movs	r1, #1
 8002824:	69b8      	ldr	r0, [r7, #24]
 8002826:	f7ff ff40 	bl	80026aa <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800284a:	f001 fb2f 	bl	8003eac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <xQueueGenericSend+0x2c>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d112      	bne.n	8002886 <xQueueGenericSend+0x52>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	6a38      	ldr	r0, [r7, #32]
 8002866:	f000 f909 	bl	8002a7c <prvCopyDataToQueue>
 800286a:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <xQueueGenericSend+0x4a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	3324      	adds	r3, #36	@ 0x24
 8002878:	4618      	mov	r0, r3
 800287a:	f000 ff53 	bl	8003724 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800287e:	f001 fb2f 	bl	8003ee0 <vPortExitCritical>
                return pdPASS;
 8002882:	2301      	movs	r3, #1
 8002884:	e062      	b.n	800294c <xQueueGenericSend+0x118>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d103      	bne.n	8002894 <xQueueGenericSend+0x60>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800288c:	f001 fb28 	bl	8003ee0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002890:	2300      	movs	r3, #0
 8002892:	e05b      	b.n	800294c <xQueueGenericSend+0x118>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <xQueueGenericSend+0x74>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 f8a8 	bl	80039f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028a8:	f001 fb1a 	bl	8003ee0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028ac:	f000 fd0e 	bl	80032cc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028b0:	f001 fafc 	bl	8003eac <vPortEnterCritical>
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d103      	bne.n	80028ca <xQueueGenericSend+0x96>
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d103      	bne.n	80028e0 <xQueueGenericSend+0xac>
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028e0:	f001 fafe 	bl	8003ee0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e4:	1d3a      	adds	r2, r7, #4
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 f897 	bl	8003a20 <xTaskCheckForTimeOut>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d123      	bne.n	8002940 <xQueueGenericSend+0x10c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028f8:	6a38      	ldr	r0, [r7, #32]
 80028fa:	f000 f983 	bl	8002c04 <prvIsQueueFull>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d017      	beq.n	8002934 <xQueueGenericSend+0x100>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	3310      	adds	r3, #16
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fef3 	bl	80036f8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002912:	6a38      	ldr	r0, [r7, #32]
 8002914:	f000 f90e 	bl	8002b34 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002918:	f000 fce6 	bl	80032e8 <xTaskResumeAll>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d193      	bne.n	800284a <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8002922:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <xQueueGenericSend+0x120>)
 8002924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	e78a      	b.n	800284a <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002934:	6a38      	ldr	r0, [r7, #32]
 8002936:	f000 f8fd 	bl	8002b34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800293a:	f000 fcd5 	bl	80032e8 <xTaskResumeAll>
 800293e:	e784      	b.n	800284a <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002940:	6a38      	ldr	r0, [r7, #32]
 8002942:	f000 f8f7 	bl	8002b34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002946:	f000 fccf 	bl	80032e8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800294a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800294c:	4618      	mov	r0, r3
 800294e:	3728      	adds	r7, #40	@ 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	e000ed04 	.word	0xe000ed04

08002958 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	61bb      	str	r3, [r7, #24]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800296a:	f001 fa9f 	bl	8003eac <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002972:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d010      	beq.n	800299c <xQueueSemaphoreTake+0x44>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	639a      	str	r2, [r3, #56]	@ 0x38
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <xQueueSemaphoreTake+0x3c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	3310      	adds	r3, #16
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fec8 	bl	8003724 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002994:	f001 faa4 	bl	8003ee0 <vPortExitCritical>
                return pdPASS;
 8002998:	2301      	movs	r3, #1
 800299a:	e069      	b.n	8002a70 <xQueueSemaphoreTake+0x118>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <xQueueSemaphoreTake+0x52>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80029a2:	f001 fa9d 	bl	8003ee0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e062      	b.n	8002a70 <xQueueSemaphoreTake+0x118>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <xQueueSemaphoreTake+0x66>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029b0:	f107 030c 	add.w	r3, r7, #12
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f81d 	bl	80039f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029be:	f001 fa8f 	bl	8003ee0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029c2:	f000 fc83 	bl	80032cc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029c6:	f001 fa71 	bl	8003eac <vPortEnterCritical>
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029d0:	b25b      	sxtb	r3, r3
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d6:	d103      	bne.n	80029e0 <xQueueSemaphoreTake+0x88>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d103      	bne.n	80029f6 <xQueueSemaphoreTake+0x9e>
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029f6:	f001 fa73 	bl	8003ee0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029fa:	463a      	mov	r2, r7
 80029fc:	f107 030c 	add.w	r3, r7, #12
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 f80c 	bl	8003a20 <xTaskCheckForTimeOut>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d123      	bne.n	8002a56 <xQueueSemaphoreTake+0xfe>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a0e:	69b8      	ldr	r0, [r7, #24]
 8002a10:	f000 f8e2 	bl	8002bd8 <prvIsQueueEmpty>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d017      	beq.n	8002a4a <xQueueSemaphoreTake+0xf2>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	3324      	adds	r3, #36	@ 0x24
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fe68 	bl	80036f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a28:	69b8      	ldr	r0, [r7, #24]
 8002a2a:	f000 f883 	bl	8002b34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a2e:	f000 fc5b 	bl	80032e8 <xTaskResumeAll>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d198      	bne.n	800296a <xQueueSemaphoreTake+0x12>
                {
                    portYIELD_WITHIN_API();
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <xQueueSemaphoreTake+0x120>)
 8002a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	e78f      	b.n	800296a <xQueueSemaphoreTake+0x12>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002a4a:	69b8      	ldr	r0, [r7, #24]
 8002a4c:	f000 f872 	bl	8002b34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a50:	f000 fc4a 	bl	80032e8 <xTaskResumeAll>
 8002a54:	e789      	b.n	800296a <xQueueSemaphoreTake+0x12>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002a56:	69b8      	ldr	r0, [r7, #24]
 8002a58:	f000 f86c 	bl	8002b34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a5c:	f000 fc44 	bl	80032e8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a60:	69b8      	ldr	r0, [r7, #24]
 8002a62:	f000 f8b9 	bl	8002bd8 <prvIsQueueEmpty>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f43f af7e 	beq.w	800296a <xQueueSemaphoreTake+0x12>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002a6e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a90:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d043      	beq.n	8002b22 <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d119      	bne.n	8002ad4 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6858      	ldr	r0, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	f003 facb 	bl	8006046 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	441a      	add	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d32b      	bcc.n	8002b22 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	e026      	b.n	8002b22 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	68d8      	ldr	r0, [r3, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	461a      	mov	r2, r3
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	f003 fab1 	bl	8006046 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	425b      	negs	r3, r3
 8002aee:	441a      	add	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d207      	bcs.n	8002b10 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	425b      	negs	r3, r3
 8002b0a:	441a      	add	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d105      	bne.n	8002b22 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002b2a:	693b      	ldr	r3, [r7, #16]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b3c:	f001 f9b6 	bl	8003eac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b46:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b48:	e011      	b.n	8002b6e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3324      	adds	r3, #36	@ 0x24
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fde4 	bl	8003724 <xTaskRemoveFromEventList>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b62:	f000 ffa7 	bl	8003ab4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	dce9      	bgt.n	8002b4a <prvUnlockQueue+0x16>
 8002b76:	e000      	b.n	8002b7a <prvUnlockQueue+0x46>
                        break;
 8002b78:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	22ff      	movs	r2, #255	@ 0xff
 8002b7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002b82:	f001 f9ad 	bl	8003ee0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b86:	f001 f991 	bl	8003eac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b90:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b92:	e011      	b.n	8002bb8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3310      	adds	r3, #16
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fdbf 	bl	8003724 <xTaskRemoveFromEventList>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002bac:	f000 ff82 	bl	8003ab4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	dce9      	bgt.n	8002b94 <prvUnlockQueue+0x60>
 8002bc0:	e000      	b.n	8002bc4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bc2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	22ff      	movs	r2, #255	@ 0xff
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002bcc:	f001 f988 	bl	8003ee0 <vPortExitCritical>
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002be0:	f001 f964 	bl	8003eac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e001      	b.n	8002bf6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bf6:	f001 f973 	bl	8003ee0 <vPortExitCritical>

    return xReturn;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c0c:	f001 f94e 	bl	8003eac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d102      	bne.n	8002c22 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e001      	b.n	8002c26 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c26:	f001 f95b 	bl	8003ee0 <vPortExitCritical>

    return xReturn;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	@ 0x30
 8002c38:	af04      	add	r7, sp, #16
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 f9c9 	bl	8003fe0 <pvPortMalloc>
 8002c4e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c56:	204c      	movs	r0, #76	@ 0x4c
 8002c58:	f001 f9c2 	bl	8003fe0 <pvPortMalloc>
 8002c5c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c6a:	e005      	b.n	8002c78 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002c6c:	6978      	ldr	r0, [r7, #20]
 8002c6e:	f001 fa65 	bl	800413c <vPortFree>
 8002c72:	e001      	b.n	8002c78 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d013      	beq.n	8002ca6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9303      	str	r3, [sp, #12]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	9302      	str	r3, [sp, #8]
 8002c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f80e 	bl	8002cb6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c9a:	69f8      	ldr	r0, [r7, #28]
 8002c9c:	f000 f88c 	bl	8002db8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	e002      	b.n	8002cac <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002cac:	69bb      	ldr	r3, [r7, #24]
    }
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	21a5      	movs	r1, #165	@ 0xa5
 8002cd0:	f003 f93d 	bl	8005f4e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f023 0307 	bic.w	r3, r3, #7
 8002cec:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01f      	beq.n	8002d34 <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e012      	b.n	8002d20 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	4413      	add	r3, r2
 8002d00:	7819      	ldrb	r1, [r3, #0]
 8002d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	4413      	add	r3, r2
 8002d08:	3334      	adds	r3, #52	@ 0x34
 8002d0a:	460a      	mov	r2, r1
 8002d0c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	4413      	add	r3, r2
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	d9e9      	bls.n	8002cfa <prvInitialiseNewTask+0x44>
 8002d26:	e000      	b.n	8002d2a <prvInitialiseNewTask+0x74>
            {
                break;
 8002d28:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d32:	e003      	b.n	8002d3c <prvInitialiseNewTask+0x86>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d901      	bls.n	8002d46 <prvInitialiseNewTask+0x90>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d42:	2304      	movs	r3, #4
 8002d44:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4e:	3304      	adds	r3, #4
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fc1a 	bl	800258a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d58:	3318      	adds	r3, #24
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fc15 	bl	800258a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d64:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f1c3 0205 	rsb	r2, r3, #5
 8002d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d78:	3344      	adds	r3, #68	@ 0x44
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 f8e5 	bl	8005f4e <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d86:	3348      	adds	r3, #72	@ 0x48
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f003 f8de 	bl	8005f4e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	6938      	ldr	r0, [r7, #16]
 8002d98:	f000 fffa 	bl	8003d90 <pxPortInitialiseStack>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002dc0:	f001 f874 	bl	8003eac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002dc4:	4b38      	ldr	r3, [pc, #224]	@ (8002ea8 <prvAddNewTaskToReadyList+0xf0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	4a37      	ldr	r2, [pc, #220]	@ (8002ea8 <prvAddNewTaskToReadyList+0xf0>)
 8002dcc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002dce:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <prvAddNewTaskToReadyList+0xf4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002dd6:	4a35      	ldr	r2, [pc, #212]	@ (8002eac <prvAddNewTaskToReadyList+0xf4>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ddc:	4b32      	ldr	r3, [pc, #200]	@ (8002ea8 <prvAddNewTaskToReadyList+0xf0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d110      	bne.n	8002e06 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002de4:	f000 fe84 	bl	8003af0 <prvInitialiseTaskLists>
 8002de8:	e00d      	b.n	8002e06 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <prvAddNewTaskToReadyList+0xf8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002df2:	4b2e      	ldr	r3, [pc, #184]	@ (8002eac <prvAddNewTaskToReadyList+0xf4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d802      	bhi.n	8002e06 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e00:	4a2a      	ldr	r2, [pc, #168]	@ (8002eac <prvAddNewTaskToReadyList+0xf4>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e06:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb4 <prvAddNewTaskToReadyList+0xfc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	4a29      	ldr	r2, [pc, #164]	@ (8002eb4 <prvAddNewTaskToReadyList+0xfc>)
 8002e0e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	2201      	movs	r2, #1
 8002e16:	409a      	lsls	r2, r3
 8002e18:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <prvAddNewTaskToReadyList+0x100>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	4a26      	ldr	r2, [pc, #152]	@ (8002eb8 <prvAddNewTaskToReadyList+0x100>)
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e26:	4925      	ldr	r1, [pc, #148]	@ (8002ebc <prvAddNewTaskToReadyList+0x104>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3304      	adds	r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	3204      	adds	r2, #4
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	1d1a      	adds	r2, r3, #4
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4a15      	ldr	r2, [pc, #84]	@ (8002ebc <prvAddNewTaskToReadyList+0x104>)
 8002e66:	441a      	add	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	615a      	str	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e70:	4912      	ldr	r1, [pc, #72]	@ (8002ebc <prvAddNewTaskToReadyList+0x104>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1c59      	adds	r1, r3, #1
 8002e80:	480e      	ldr	r0, [pc, #56]	@ (8002ebc <prvAddNewTaskToReadyList+0x104>)
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4403      	add	r3, r0
 8002e8c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e8e:	f001 f827 	bl	8003ee0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e92:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <prvAddNewTaskToReadyList+0xf8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <prvAddNewTaskToReadyList+0xe6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e9a:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <prvAddNewTaskToReadyList+0xf4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000288 	.word	0x20000288
 8002eac:	200001b0 	.word	0x200001b0
 8002eb0:	20000294 	.word	0x20000294
 8002eb4:	200002a4 	.word	0x200002a4
 8002eb8:	20000290 	.word	0x20000290
 8002ebc:	200001b4 	.word	0x200001b4

08002ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8002ed2:	f000 f9fb 	bl	80032cc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fed9 	bl	8003c90 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ede:	f000 fa03 	bl	80032e8 <xTaskResumeAll>
 8002ee2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8002eea:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <vTaskDelay+0x44>)
 8002eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002f10:	f000 ffcc 	bl	8003eac <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <vTaskSuspend+0x18>
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <vTaskSuspend+0x100>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	e000      	b.n	8002f22 <vTaskSuspend+0x1a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3304      	adds	r3, #4
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fb95 	bl	8002658 <uxListRemove>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d115      	bne.n	8002f60 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f38:	4934      	ldr	r1, [pc, #208]	@ (800300c <vTaskSuspend+0x104>)
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10a      	bne.n	8002f60 <vTaskSuspend+0x58>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	2201      	movs	r2, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43da      	mvns	r2, r3
 8002f56:	4b2e      	ldr	r3, [pc, #184]	@ (8003010 <vTaskSuspend+0x108>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003010 <vTaskSuspend+0x108>)
 8002f5e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fb73 	bl	8002658 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3304      	adds	r3, #4
 8002f76:	4619      	mov	r1, r3
 8002f78:	4826      	ldr	r0, [pc, #152]	@ (8003014 <vTaskSuspend+0x10c>)
 8002f7a:	f7ff fb12 	bl	80025a2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e010      	b.n	8002fa6 <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4413      	add	r3, r2
 8002f8a:	3348      	adds	r3, #72	@ 0x48
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	3348      	adds	r3, #72	@ 0x48
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	ddeb      	ble.n	8002f84 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8002fac:	f000 ff98 	bl	8003ee0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002fb0:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <vTaskSuspend+0x110>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002fb8:	f000 ff78 	bl	8003eac <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002fbc:	f000 fe4e 	bl	8003c5c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002fc0:	f000 ff8e 	bl	8003ee0 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002fc4:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <vTaskSuspend+0x100>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d118      	bne.n	8003000 <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 8002fce:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <vTaskSuspend+0x110>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8002fd6:	4b11      	ldr	r3, [pc, #68]	@ (800301c <vTaskSuspend+0x114>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002fe6:	e00b      	b.n	8003000 <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <vTaskSuspend+0x10c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <vTaskSuspend+0x118>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d103      	bne.n	8002ffc <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 8002ff4:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <vTaskSuspend+0x100>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
    }
 8002ffa:	e001      	b.n	8003000 <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 8002ffc:	f000 fb36 	bl	800366c <vTaskSwitchContext>
    }
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200001b0 	.word	0x200001b0
 800300c:	200001b4 	.word	0x200001b4
 8003010:	20000290 	.word	0x20000290
 8003014:	20000274 	.word	0x20000274
 8003018:	20000294 	.word	0x20000294
 800301c:	e000ed04 	.word	0xe000ed04
 8003020:	20000288 	.word	0x20000288

08003024 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <prvTaskIsTaskSuspended+0x3c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10a      	bne.n	8003054 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	4a08      	ldr	r2, [pc, #32]	@ (8003064 <prvTaskIsTaskSuspended+0x40>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d005      	beq.n	8003054 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 8003050:	2301      	movs	r3, #1
 8003052:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003054:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	20000274 	.word	0x20000274
 8003064:	20000248 	.word	0x20000248

08003068 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003074:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <vTaskResume+0xc4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	429a      	cmp	r2, r3
 800307c:	d052      	beq.n	8003124 <vTaskResume+0xbc>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d04f      	beq.n	8003124 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 8003084:	f000 ff12 	bl	8003eac <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff ffcb 	bl	8003024 <prvTaskIsTaskSuspended>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d045      	beq.n	8003120 <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3304      	adds	r3, #4
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fadd 	bl	8002658 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a2:	2201      	movs	r2, #1
 80030a4:	409a      	lsls	r2, r3
 80030a6:	4b22      	ldr	r3, [pc, #136]	@ (8003130 <vTaskResume+0xc8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <vTaskResume+0xc8>)
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b4:	491f      	ldr	r1, [pc, #124]	@ (8003134 <vTaskResume+0xcc>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3304      	adds	r3, #4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	60da      	str	r2, [r3, #12]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	3204      	adds	r2, #4
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1d1a      	adds	r2, r3, #4
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <vTaskResume+0xcc>)
 80030f4:	441a      	add	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	615a      	str	r2, [r3, #20]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030fe:	490d      	ldr	r1, [pc, #52]	@ (8003134 <vTaskResume+0xcc>)
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	1c59      	adds	r1, r3, #1
 800310e:	4809      	ldr	r0, [pc, #36]	@ (8003134 <vTaskResume+0xcc>)
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4403      	add	r3, r0
 800311a:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800311c:	4b03      	ldr	r3, [pc, #12]	@ (800312c <vTaskResume+0xc4>)
 800311e:	681b      	ldr	r3, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003120:	f000 fede 	bl	8003ee0 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200001b0 	.word	0x200001b0
 8003130:	20000290 	.word	0x20000290
 8003134:	200001b4 	.word	0x200001b4

08003138 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	@ 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8003140:	2300      	movs	r3, #0
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	623b      	str	r3, [r7, #32]

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003148:	f3ef 8211 	mrs	r2, BASEPRI
 800314c:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	617a      	str	r2, [r7, #20]
 800315e:	613b      	str	r3, [r7, #16]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003160:	697b      	ldr	r3, [r7, #20]
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003162:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003164:	6a38      	ldr	r0, [r7, #32]
 8003166:	f7ff ff5d 	bl	8003024 <prvTaskIsTaskSuspended>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d05a      	beq.n	8003226 <xTaskResumeFromISR+0xee>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003170:	4b32      	ldr	r3, [pc, #200]	@ (800323c <xTaskResumeFromISR+0x104>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d150      	bne.n	800321a <xTaskResumeFromISR+0xe2>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317c:	4b30      	ldr	r3, [pc, #192]	@ (8003240 <xTaskResumeFromISR+0x108>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	429a      	cmp	r2, r3
 8003184:	d304      	bcc.n	8003190 <xTaskResumeFromISR+0x58>
                    {
                        xYieldRequired = pdTRUE;
 8003186:	2301      	movs	r3, #1
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 800318a:	4b2e      	ldr	r3, [pc, #184]	@ (8003244 <xTaskResumeFromISR+0x10c>)
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	3304      	adds	r3, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fa5f 	bl	8002658 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	2201      	movs	r2, #1
 80031a0:	409a      	lsls	r2, r3
 80031a2:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <xTaskResumeFromISR+0x110>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	4a27      	ldr	r2, [pc, #156]	@ (8003248 <xTaskResumeFromISR+0x110>)
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b0:	4926      	ldr	r1, [pc, #152]	@ (800324c <xTaskResumeFromISR+0x114>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3304      	adds	r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	3204      	adds	r2, #4
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	1d1a      	adds	r2, r3, #4
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <xTaskResumeFromISR+0x114>)
 80031f0:	441a      	add	r2, r3
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	615a      	str	r2, [r3, #20]
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fa:	4914      	ldr	r1, [pc, #80]	@ (800324c <xTaskResumeFromISR+0x114>)
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	1c59      	adds	r1, r3, #1
 800320a:	4810      	ldr	r0, [pc, #64]	@ (800324c <xTaskResumeFromISR+0x114>)
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4403      	add	r3, r0
 8003216:	6019      	str	r1, [r3, #0]
 8003218:	e005      	b.n	8003226 <xTaskResumeFromISR+0xee>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	3318      	adds	r3, #24
 800321e:	4619      	mov	r1, r3
 8003220:	480b      	ldr	r0, [pc, #44]	@ (8003250 <xTaskResumeFromISR+0x118>)
 8003222:	f7ff f9be 	bl	80025a2 <vListInsertEnd>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	60fb      	str	r3, [r7, #12]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003230:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003234:	4618      	mov	r0, r3
 8003236:	3728      	adds	r7, #40	@ 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200002b0 	.word	0x200002b0
 8003240:	200001b0 	.word	0x200001b0
 8003244:	2000029c 	.word	0x2000029c
 8003248:	20000290 	.word	0x20000290
 800324c:	200001b4 	.word	0x200001b4
 8003250:	20000248 	.word	0x20000248

08003254 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800325a:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <vTaskStartScheduler+0x5c>)
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2300      	movs	r3, #0
 8003264:	2280      	movs	r2, #128	@ 0x80
 8003266:	4913      	ldr	r1, [pc, #76]	@ (80032b4 <vTaskStartScheduler+0x60>)
 8003268:	4813      	ldr	r0, [pc, #76]	@ (80032b8 <vTaskStartScheduler+0x64>)
 800326a:	f7ff fce3 	bl	8002c34 <xTaskCreate>
 800326e:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d115      	bne.n	80032a2 <vTaskStartScheduler+0x4e>
        __asm volatile
 8003276:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	603b      	str	r3, [r7, #0]
    }
 8003288:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800328a:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <vTaskStartScheduler+0x68>)
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <vTaskStartScheduler+0x6c>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <vTaskStartScheduler+0x70>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800329e:	f000 fde5 	bl	8003e6c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032a2:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <vTaskStartScheduler+0x74>)
 80032a4:	681b      	ldr	r3, [r3, #0]
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200002ac 	.word	0x200002ac
 80032b4:	08006ca8 	.word	0x08006ca8
 80032b8:	08003acd 	.word	0x08003acd
 80032bc:	200002a8 	.word	0x200002a8
 80032c0:	20000294 	.word	0x20000294
 80032c4:	2000028c 	.word	0x2000028c
 80032c8:	200000a8 	.word	0x200000a8

080032cc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80032d0:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <vTaskSuspendAll+0x18>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	4a03      	ldr	r2, [pc, #12]	@ (80032e4 <vTaskSuspendAll+0x18>)
 80032d8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	200002b0 	.word	0x200002b0

080032e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80032f6:	f000 fdd9 	bl	8003eac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80032fa:	4b62      	ldr	r3, [pc, #392]	@ (8003484 <xTaskResumeAll+0x19c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3b01      	subs	r3, #1
 8003300:	4a60      	ldr	r2, [pc, #384]	@ (8003484 <xTaskResumeAll+0x19c>)
 8003302:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003304:	4b5f      	ldr	r3, [pc, #380]	@ (8003484 <xTaskResumeAll+0x19c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 80b4 	bne.w	8003476 <xTaskResumeAll+0x18e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800330e:	4b5e      	ldr	r3, [pc, #376]	@ (8003488 <xTaskResumeAll+0x1a0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80af 	beq.w	8003476 <xTaskResumeAll+0x18e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003318:	e08a      	b.n	8003430 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800331a:	4b5c      	ldr	r3, [pc, #368]	@ (800348c <xTaskResumeAll+0x1a4>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	6a12      	ldr	r2, [r2, #32]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	69d2      	ldr	r2, [r2, #28]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	3318      	adds	r3, #24
 8003344:	429a      	cmp	r2, r3
 8003346:	d103      	bne.n	8003350 <xTaskResumeAll+0x68>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	6a1a      	ldr	r2, [r3, #32]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	629a      	str	r2, [r3, #40]	@ 0x28
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	1e5a      	subs	r2, r3, #1
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	68d2      	ldr	r2, [r2, #12]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	6892      	ldr	r2, [r2, #8]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	3304      	adds	r3, #4
 8003382:	429a      	cmp	r2, r3
 8003384:	d103      	bne.n	800338e <xTaskResumeAll+0xa6>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2200      	movs	r2, #0
 8003392:	615a      	str	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	2201      	movs	r2, #1
 80033a4:	409a      	lsls	r2, r3
 80033a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003490 <xTaskResumeAll+0x1a8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	4a38      	ldr	r2, [pc, #224]	@ (8003490 <xTaskResumeAll+0x1a8>)
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b4:	4937      	ldr	r1, [pc, #220]	@ (8003494 <xTaskResumeAll+0x1ac>)
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3304      	adds	r3, #4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	60da      	str	r2, [r3, #12]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	3204      	adds	r2, #4
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	1d1a      	adds	r2, r3, #4
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4a28      	ldr	r2, [pc, #160]	@ (8003494 <xTaskResumeAll+0x1ac>)
 80033f4:	441a      	add	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	615a      	str	r2, [r3, #20]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fe:	4925      	ldr	r1, [pc, #148]	@ (8003494 <xTaskResumeAll+0x1ac>)
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	1c59      	adds	r1, r3, #1
 800340e:	4821      	ldr	r0, [pc, #132]	@ (8003494 <xTaskResumeAll+0x1ac>)
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4403      	add	r3, r0
 800341a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003420:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <xTaskResumeAll+0x1b0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	429a      	cmp	r2, r3
 8003428:	d302      	bcc.n	8003430 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800342a:	4b1c      	ldr	r3, [pc, #112]	@ (800349c <xTaskResumeAll+0x1b4>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003430:	4b16      	ldr	r3, [pc, #88]	@ (800348c <xTaskResumeAll+0x1a4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f47f af70 	bne.w	800331a <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003440:	f000 fc0c 	bl	8003c5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003444:	4b16      	ldr	r3, [pc, #88]	@ (80034a0 <xTaskResumeAll+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	613b      	str	r3, [r7, #16]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003450:	f000 f828 	bl	80034a4 <xTaskIncrementTick>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 800345a:	4b10      	ldr	r3, [pc, #64]	@ (800349c <xTaskResumeAll+0x1b4>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	3b01      	subs	r3, #1
 8003464:	613b      	str	r3, [r7, #16]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f1      	bne.n	8003450 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 800346c:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <xTaskResumeAll+0x1b8>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003472:	4b0a      	ldr	r3, [pc, #40]	@ (800349c <xTaskResumeAll+0x1b4>)
 8003474:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003476:	f000 fd33 	bl	8003ee0 <vPortExitCritical>

    return xAlreadyYielded;
 800347a:	68fb      	ldr	r3, [r7, #12]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	200002b0 	.word	0x200002b0
 8003488:	20000288 	.word	0x20000288
 800348c:	20000248 	.word	0x20000248
 8003490:	20000290 	.word	0x20000290
 8003494:	200001b4 	.word	0x200001b4
 8003498:	200001b0 	.word	0x200001b0
 800349c:	2000029c 	.word	0x2000029c
 80034a0:	20000298 	.word	0x20000298

080034a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ae:	4b66      	ldr	r3, [pc, #408]	@ (8003648 <xTaskIncrementTick+0x1a4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 80bd 	bne.w	8003632 <xTaskIncrementTick+0x18e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034b8:	4b64      	ldr	r3, [pc, #400]	@ (800364c <xTaskIncrementTick+0x1a8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80034c0:	4a62      	ldr	r2, [pc, #392]	@ (800364c <xTaskIncrementTick+0x1a8>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d110      	bne.n	80034ee <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80034cc:	4b60      	ldr	r3, [pc, #384]	@ (8003650 <xTaskIncrementTick+0x1ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	4b60      	ldr	r3, [pc, #384]	@ (8003654 <xTaskIncrementTick+0x1b0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003650 <xTaskIncrementTick+0x1ac>)
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4a5e      	ldr	r2, [pc, #376]	@ (8003654 <xTaskIncrementTick+0x1b0>)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003658 <xTaskIncrementTick+0x1b4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003658 <xTaskIncrementTick+0x1b4>)
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	f000 fbb7 	bl	8003c5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80034ee:	4b5b      	ldr	r3, [pc, #364]	@ (800365c <xTaskIncrementTick+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	f0c0 80a1 	bcc.w	800363c <xTaskIncrementTick+0x198>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034fa:	4b55      	ldr	r3, [pc, #340]	@ (8003650 <xTaskIncrementTick+0x1ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003504:	4b55      	ldr	r3, [pc, #340]	@ (800365c <xTaskIncrementTick+0x1b8>)
 8003506:	f04f 32ff 	mov.w	r2, #4294967295
 800350a:	601a      	str	r2, [r3, #0]
                    break;
 800350c:	e096      	b.n	800363c <xTaskIncrementTick+0x198>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800350e:	4b50      	ldr	r3, [pc, #320]	@ (8003650 <xTaskIncrementTick+0x1ac>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	429a      	cmp	r2, r3
 8003524:	d203      	bcs.n	800352e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003526:	4a4d      	ldr	r2, [pc, #308]	@ (800365c <xTaskIncrementTick+0x1b8>)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800352c:	e086      	b.n	800363c <xTaskIncrementTick+0x198>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	68d2      	ldr	r2, [r2, #12]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	3304      	adds	r3, #4
 8003550:	429a      	cmp	r2, r3
 8003552:	d103      	bne.n	800355c <xTaskIncrementTick+0xb8>
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	605a      	str	r2, [r3, #4]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2200      	movs	r2, #0
 8003560:	615a      	str	r2, [r3, #20]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01e      	beq.n	80035b2 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	6a12      	ldr	r2, [r2, #32]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	69d2      	ldr	r2, [r2, #28]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	3318      	adds	r3, #24
 8003596:	429a      	cmp	r2, r3
 8003598:	d103      	bne.n	80035a2 <xTaskIncrementTick+0xfe>
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2200      	movs	r2, #0
 80035a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1e5a      	subs	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	4b29      	ldr	r3, [pc, #164]	@ (8003660 <xTaskIncrementTick+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	4a27      	ldr	r2, [pc, #156]	@ (8003660 <xTaskIncrementTick+0x1bc>)
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c8:	4926      	ldr	r1, [pc, #152]	@ (8003664 <xTaskIncrementTick+0x1c0>)
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	3304      	adds	r3, #4
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	3204      	adds	r2, #4
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1d1a      	adds	r2, r3, #4
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4a17      	ldr	r2, [pc, #92]	@ (8003664 <xTaskIncrementTick+0x1c0>)
 8003608:	441a      	add	r2, r3
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	615a      	str	r2, [r3, #20]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003612:	4914      	ldr	r1, [pc, #80]	@ (8003664 <xTaskIncrementTick+0x1c0>)
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1c59      	adds	r1, r3, #1
 8003622:	4810      	ldr	r0, [pc, #64]	@ (8003664 <xTaskIncrementTick+0x1c0>)
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4403      	add	r3, r0
 800362e:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003630:	e763      	b.n	80034fa <xTaskIncrementTick+0x56>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <xTaskIncrementTick+0x1c4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a0b      	ldr	r2, [pc, #44]	@ (8003668 <xTaskIncrementTick+0x1c4>)
 800363a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800363c:	69fb      	ldr	r3, [r7, #28]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200002b0 	.word	0x200002b0
 800364c:	2000028c 	.word	0x2000028c
 8003650:	20000240 	.word	0x20000240
 8003654:	20000244 	.word	0x20000244
 8003658:	200002a0 	.word	0x200002a0
 800365c:	200002a8 	.word	0x200002a8
 8003660:	20000290 	.word	0x20000290
 8003664:	200001b4 	.word	0x200001b4
 8003668:	20000298 	.word	0x20000298

0800366c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003672:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <vTaskSwitchContext+0x78>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800367a:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <vTaskSwitchContext+0x7c>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003680:	e02a      	b.n	80036d8 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8003682:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <vTaskSwitchContext+0x7c>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003688:	4b18      	ldr	r3, [pc, #96]	@ (80036ec <vTaskSwitchContext+0x80>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	f1c3 031f 	rsb	r3, r3, #31
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4a11      	ldr	r2, [pc, #68]	@ (80036f0 <vTaskSwitchContext+0x84>)
 80036aa:	4413      	add	r3, r2
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3308      	adds	r3, #8
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d104      	bne.n	80036ce <vTaskSwitchContext+0x62>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a07      	ldr	r2, [pc, #28]	@ (80036f4 <vTaskSwitchContext+0x88>)
 80036d6:	6013      	str	r3, [r2, #0]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	200002b0 	.word	0x200002b0
 80036e8:	2000029c 	.word	0x2000029c
 80036ec:	20000290 	.word	0x20000290
 80036f0:	200001b4 	.word	0x200001b4
 80036f4:	200001b0 	.word	0x200001b0

080036f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003702:	4b07      	ldr	r3, [pc, #28]	@ (8003720 <vTaskPlaceOnEventList+0x28>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3318      	adds	r3, #24
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe ff6c 	bl	80025e8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003710:	2101      	movs	r1, #1
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	f000 fabc 	bl	8003c90 <prvAddCurrentTaskToDelayedList>
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200001b0 	.word	0x200001b0

08003724 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	@ 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	6a12      	ldr	r2, [r2, #32]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	69d2      	ldr	r2, [r2, #28]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	3318      	adds	r3, #24
 8003756:	429a      	cmp	r2, r3
 8003758:	d103      	bne.n	8003762 <xTaskRemoveFromEventList+0x3e>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	6a1a      	ldr	r2, [r3, #32]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2200      	movs	r2, #0
 8003766:	629a      	str	r2, [r3, #40]	@ 0x28
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	1e5a      	subs	r2, r3, #1
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003772:	4b4a      	ldr	r3, [pc, #296]	@ (800389c <xTaskRemoveFromEventList+0x178>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d15e      	bne.n	8003838 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	68d2      	ldr	r2, [r2, #12]
 8003788:	609a      	str	r2, [r3, #8]
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	3304      	adds	r3, #4
 800379c:	429a      	cmp	r2, r3
 800379e:	d103      	bne.n	80037a8 <xTaskRemoveFromEventList+0x84>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	2201      	movs	r2, #1
 80037be:	409a      	lsls	r2, r3
 80037c0:	4b37      	ldr	r3, [pc, #220]	@ (80038a0 <xTaskRemoveFromEventList+0x17c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	4a36      	ldr	r2, [pc, #216]	@ (80038a0 <xTaskRemoveFromEventList+0x17c>)
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ce:	4935      	ldr	r1, [pc, #212]	@ (80038a4 <xTaskRemoveFromEventList+0x180>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3304      	adds	r3, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	609a      	str	r2, [r3, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	3204      	adds	r2, #4
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1d1a      	adds	r2, r3, #4
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4a25      	ldr	r2, [pc, #148]	@ (80038a4 <xTaskRemoveFromEventList+0x180>)
 800380e:	441a      	add	r2, r3
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	615a      	str	r2, [r3, #20]
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003818:	4922      	ldr	r1, [pc, #136]	@ (80038a4 <xTaskRemoveFromEventList+0x180>)
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1c59      	adds	r1, r3, #1
 8003828:	481e      	ldr	r0, [pc, #120]	@ (80038a4 <xTaskRemoveFromEventList+0x180>)
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4403      	add	r3, r0
 8003834:	6019      	str	r1, [r3, #0]
 8003836:	e01b      	b.n	8003870 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003838:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <xTaskRemoveFromEventList+0x184>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	61da      	str	r2, [r3, #28]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	621a      	str	r2, [r3, #32]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	3218      	adds	r2, #24
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f103 0218 	add.w	r2, r3, #24
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	4a11      	ldr	r2, [pc, #68]	@ (80038a8 <xTaskRemoveFromEventList+0x184>)
 8003864:	629a      	str	r2, [r3, #40]	@ 0x28
 8003866:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <xTaskRemoveFromEventList+0x184>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3301      	adds	r3, #1
 800386c:	4a0e      	ldr	r2, [pc, #56]	@ (80038a8 <xTaskRemoveFromEventList+0x184>)
 800386e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <xTaskRemoveFromEventList+0x188>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	429a      	cmp	r2, r3
 800387c:	d905      	bls.n	800388a <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800387e:	2301      	movs	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003882:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <xTaskRemoveFromEventList+0x18c>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e001      	b.n	800388e <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800388e:	69fb      	ldr	r3, [r7, #28]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3724      	adds	r7, #36	@ 0x24
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	200002b0 	.word	0x200002b0
 80038a0:	20000290 	.word	0x20000290
 80038a4:	200001b4 	.word	0x200001b4
 80038a8:	20000248 	.word	0x20000248
 80038ac:	200001b0 	.word	0x200001b0
 80038b0:	2000029c 	.word	0x2000029c

080038b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( pxEventListItem );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6892      	ldr	r2, [r2, #8]
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6852      	ldr	r2, [r2, #4]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d103      	bne.n	80038fa <vTaskRemoveFromUnorderedEventList+0x46>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	68d2      	ldr	r2, [r2, #12]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3304      	adds	r3, #4
 800392c:	429a      	cmp	r2, r3
 800392e:	d103      	bne.n	8003938 <vTaskRemoveFromUnorderedEventList+0x84>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2200      	movs	r2, #0
 800393c:	615a      	str	r2, [r3, #20]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	1e5a      	subs	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394c:	2201      	movs	r2, #1
 800394e:	409a      	lsls	r2, r3
 8003950:	4b24      	ldr	r3, [pc, #144]	@ (80039e4 <vTaskRemoveFromUnorderedEventList+0x130>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	4a23      	ldr	r2, [pc, #140]	@ (80039e4 <vTaskRemoveFromUnorderedEventList+0x130>)
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395e:	4922      	ldr	r1, [pc, #136]	@ (80039e8 <vTaskRemoveFromUnorderedEventList+0x134>)
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3304      	adds	r3, #4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	3204      	adds	r2, #4
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	1d1a      	adds	r2, r3, #4
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4a12      	ldr	r2, [pc, #72]	@ (80039e8 <vTaskRemoveFromUnorderedEventList+0x134>)
 800399e:	441a      	add	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	615a      	str	r2, [r3, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a8:	490f      	ldr	r1, [pc, #60]	@ (80039e8 <vTaskRemoveFromUnorderedEventList+0x134>)
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1c59      	adds	r1, r3, #1
 80039b8:	480b      	ldr	r0, [pc, #44]	@ (80039e8 <vTaskRemoveFromUnorderedEventList+0x134>)
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4403      	add	r3, r0
 80039c4:	6019      	str	r1, [r3, #0]

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ca:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <vTaskRemoveFromUnorderedEventList+0x138>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d902      	bls.n	80039da <vTaskRemoveFromUnorderedEventList+0x126>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 80039d4:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <vTaskRemoveFromUnorderedEventList+0x13c>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
    }
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	20000290 	.word	0x20000290
 80039e8:	200001b4 	.word	0x200001b4
 80039ec:	200001b0 	.word	0x200001b0
 80039f0:	2000029c 	.word	0x2000029c

080039f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039fc:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <vTaskInternalSetTimeOutState+0x24>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a04:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <vTaskInternalSetTimeOutState+0x28>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	200002a0 	.word	0x200002a0
 8003a1c:	2000028c 	.word	0x2000028c

08003a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8003a2a:	f000 fa3f 	bl	8003eac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8003aac <xTaskCheckForTimeOut+0x8c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d102      	bne.n	8003a4e <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e026      	b.n	8003a9c <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b17      	ldr	r3, [pc, #92]	@ (8003ab0 <xTaskCheckForTimeOut+0x90>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d00a      	beq.n	8003a70 <xTaskCheckForTimeOut+0x50>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d305      	bcc.n	8003a70 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a64:	2301      	movs	r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e015      	b.n	8003a9c <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d20b      	bcs.n	8003a92 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ffb4 	bl	80039f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e004      	b.n	8003a9c <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003a9c:	f000 fa20 	bl	8003ee0 <vPortExitCritical>

    return xReturn;
 8003aa0:	697b      	ldr	r3, [r7, #20]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	2000028c 	.word	0x2000028c
 8003ab0:	200002a0 	.word	0x200002a0

08003ab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	@ (8003ac8 <vTaskMissedYield+0x14>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	2000029c 	.word	0x2000029c

08003acc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ad4:	f000 f84c 	bl	8003b70 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003ad8:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <prvIdleTask+0x20>)
 8003ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ae8:	bf00      	nop
 8003aea:	e7f3      	b.n	8003ad4 <prvIdleTask+0x8>
 8003aec:	e000ed04 	.word	0xe000ed04

08003af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	e00c      	b.n	8003b16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a12      	ldr	r2, [pc, #72]	@ (8003b50 <prvInitialiseTaskLists+0x60>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fd1e 	bl	800254c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3301      	adds	r3, #1
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d9ef      	bls.n	8003afc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b1c:	480d      	ldr	r0, [pc, #52]	@ (8003b54 <prvInitialiseTaskLists+0x64>)
 8003b1e:	f7fe fd15 	bl	800254c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b22:	480d      	ldr	r0, [pc, #52]	@ (8003b58 <prvInitialiseTaskLists+0x68>)
 8003b24:	f7fe fd12 	bl	800254c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b28:	480c      	ldr	r0, [pc, #48]	@ (8003b5c <prvInitialiseTaskLists+0x6c>)
 8003b2a:	f7fe fd0f 	bl	800254c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003b2e:	480c      	ldr	r0, [pc, #48]	@ (8003b60 <prvInitialiseTaskLists+0x70>)
 8003b30:	f7fe fd0c 	bl	800254c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003b34:	480b      	ldr	r0, [pc, #44]	@ (8003b64 <prvInitialiseTaskLists+0x74>)
 8003b36:	f7fe fd09 	bl	800254c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <prvInitialiseTaskLists+0x78>)
 8003b3c:	4a05      	ldr	r2, [pc, #20]	@ (8003b54 <prvInitialiseTaskLists+0x64>)
 8003b3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b40:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <prvInitialiseTaskLists+0x7c>)
 8003b42:	4a05      	ldr	r2, [pc, #20]	@ (8003b58 <prvInitialiseTaskLists+0x68>)
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200001b4 	.word	0x200001b4
 8003b54:	20000218 	.word	0x20000218
 8003b58:	2000022c 	.word	0x2000022c
 8003b5c:	20000248 	.word	0x20000248
 8003b60:	2000025c 	.word	0x2000025c
 8003b64:	20000274 	.word	0x20000274
 8003b68:	20000240 	.word	0x20000240
 8003b6c:	20000244 	.word	0x20000244

08003b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b76:	e019      	b.n	8003bac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003b78:	f000 f998 	bl	8003eac <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b7c:	4b10      	ldr	r3, [pc, #64]	@ (8003bc0 <prvCheckTasksWaitingTermination+0x50>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fd65 	bl	8002658 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <prvCheckTasksWaitingTermination+0x54>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	4a0b      	ldr	r2, [pc, #44]	@ (8003bc4 <prvCheckTasksWaitingTermination+0x54>)
 8003b96:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <prvCheckTasksWaitingTermination+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <prvCheckTasksWaitingTermination+0x58>)
 8003ba0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003ba2:	f000 f99d 	bl	8003ee0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f848 	bl	8003c3c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <prvCheckTasksWaitingTermination+0x58>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e1      	bne.n	8003b78 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	2000025c 	.word	0x2000025c
 8003bc4:	20000288 	.word	0x20000288
 8003bc8:	20000270 	.word	0x20000270

08003bcc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003bd8:	e005      	b.n	8003be6 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	607b      	str	r3, [r7, #4]
            ulCount++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3301      	adds	r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2ba5      	cmp	r3, #165	@ 0xa5
 8003bec:	d0f5      	beq.n	8003bda <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	b29b      	uxth	r3, r3
    }
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
	...

08003c04 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <uxTaskGetStackHighWaterMark+0x14>
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <uxTaskGetStackHighWaterMark+0x34>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	e000      	b.n	8003c1a <uxTaskGetStackHighWaterMark+0x16>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003c22:	6938      	ldr	r0, [r7, #16]
 8003c24:	f7ff ffd2 	bl	8003bcc <prvTaskCheckFreeStackSpace>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200001b0 	.word	0x200001b0

08003c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fa77 	bl	800413c <vPortFree>
                vPortFree( pxTCB );
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa74 	bl	800413c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c60:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <prvResetNextTaskUnblockTime+0x2c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c6a:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <prvResetNextTaskUnblockTime+0x30>)
 8003c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c72:	e005      	b.n	8003c80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <prvResetNextTaskUnblockTime+0x2c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a03      	ldr	r2, [pc, #12]	@ (8003c8c <prvResetNextTaskUnblockTime+0x30>)
 8003c7e:	6013      	str	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	20000240 	.word	0x20000240
 8003c8c:	200002a8 	.word	0x200002a8

08003c90 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c9a:	4b36      	ldr	r3, [pc, #216]	@ (8003d74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ca0:	4b35      	ldr	r3, [pc, #212]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fcd6 	bl	8002658 <uxListRemove>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003cb2:	4b31      	ldr	r3, [pc, #196]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb8:	2201      	movs	r2, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43da      	mvns	r2, r3
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8003d7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003cc8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d124      	bne.n	8003d1c <prvAddCurrentTaskToDelayedList+0x8c>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d021      	beq.n	8003d1c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cd8:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	4b26      	ldr	r3, [pc, #152]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	4b24      	ldr	r3, [pc, #144]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	4b21      	ldr	r3, [pc, #132]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	3204      	adds	r2, #4
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	609a      	str	r2, [r3, #8]
 8003d06:	4b1c      	ldr	r3, [pc, #112]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d0c:	615a      	str	r2, [r3, #20]
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	4a1a      	ldr	r2, [pc, #104]	@ (8003d80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d1a:	e026      	b.n	8003d6a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d24:	4b14      	ldr	r3, [pc, #80]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d209      	bcs.n	8003d48 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d34:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b0f      	ldr	r3, [pc, #60]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f7fe fc51 	bl	80025e8 <vListInsert>
}
 8003d46:	e010      	b.n	8003d6a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d48:	4b0f      	ldr	r3, [pc, #60]	@ (8003d88 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7fe fc47 	bl	80025e8 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d202      	bcs.n	8003d6a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8003d64:	4a09      	ldr	r2, [pc, #36]	@ (8003d8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6013      	str	r3, [r2, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	2000028c 	.word	0x2000028c
 8003d78:	200001b0 	.word	0x200001b0
 8003d7c:	20000290 	.word	0x20000290
 8003d80:	20000274 	.word	0x20000274
 8003d84:	20000244 	.word	0x20000244
 8003d88:	20000240 	.word	0x20000240
 8003d8c:	200002a8 	.word	0x200002a8

08003d90 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003da8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f023 0201 	bic.w	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3b04      	subs	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003dc0:	4a08      	ldr	r2, [pc, #32]	@ (8003de4 <pxPortInitialiseStack+0x54>)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3b14      	subs	r3, #20
 8003dca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b20      	subs	r3, #32
 8003dd6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	08003de9 	.word	0x08003de9

08003de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003df2:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	607b      	str	r3, [r7, #4]
    }
 8003e04:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e06:	bf00      	nop
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0fc      	beq.n	8003e08 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
 8003e1a:	0000      	movs	r0, r0
 8003e1c:	0000      	movs	r0, r0
	...

08003e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e20:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <pxCurrentTCBConst2>)
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	6808      	ldr	r0, [r1, #0]
 8003e26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e2a:	f380 8809 	msr	PSP, r0
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f380 8811 	msr	BASEPRI, r0
 8003e3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003e3e:	4770      	bx	lr

08003e40 <pxCurrentTCBConst2>:
 8003e40:	200001b0 	.word	0x200001b0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop

08003e48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003e48:	4806      	ldr	r0, [pc, #24]	@ (8003e64 <prvPortStartFirstTask+0x1c>)
 8003e4a:	6800      	ldr	r0, [r0, #0]
 8003e4c:	6800      	ldr	r0, [r0, #0]
 8003e4e:	f380 8808 	msr	MSP, r0
 8003e52:	b662      	cpsie	i
 8003e54:	b661      	cpsie	f
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	df00      	svc	0
 8003e60:	bf00      	nop
 8003e62:	0000      	.short	0x0000
 8003e64:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/*System call to start first task.*/
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop

08003e6c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <xPortStartScheduler+0x38>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea4 <xPortStartScheduler+0x38>)
 8003e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <xPortStartScheduler+0x38>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a08      	ldr	r2, [pc, #32]	@ (8003ea4 <xPortStartScheduler+0x38>)
 8003e82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e86:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e88:	f000 f890 	bl	8003fac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <xPortStartScheduler+0x3c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e92:	f7ff ffd9 	bl	8003e48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e96:	f7ff fbe9 	bl	800366c <vTaskSwitchContext>
    prvTaskExitError();
 8003e9a:	f7ff ffa5 	bl	8003de8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	e000ed20 	.word	0xe000ed20
 8003ea8:	200000ac 	.word	0x200000ac

08003eac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
        __asm volatile
 8003eb2:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	607b      	str	r3, [r7, #4]
    }
 8003ec4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003ec6:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <vPortEnterCritical+0x30>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	4a03      	ldr	r2, [pc, #12]	@ (8003edc <vPortEnterCritical+0x30>)
 8003ece:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	200000ac 	.word	0x200000ac

08003ee0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <vPortExitCritical+0x30>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	4a08      	ldr	r2, [pc, #32]	@ (8003f10 <vPortExitCritical+0x30>)
 8003eee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ef0:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <vPortExitCritical+0x30>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d105      	bne.n	8003f04 <vPortExitCritical+0x24>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	607b      	str	r3, [r7, #4]
        __asm volatile
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f383 8811 	msr	BASEPRI, r3
    }
 8003f02:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	200000ac 	.word	0x200000ac
	...

08003f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003f20:	f3ef 8009 	mrs	r0, PSP
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <pxCurrentTCBConst>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f30:	6010      	str	r0, [r2, #0]
 8003f32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003f36:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8003f3a:	f380 8811 	msr	BASEPRI, r0
 8003f3e:	f7ff fb95 	bl	800366c <vTaskSwitchContext>
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f380 8811 	msr	BASEPRI, r0
 8003f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	6808      	ldr	r0, [r1, #0]
 8003f52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f56:	f380 8809 	msr	PSP, r0
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	4770      	bx	lr

08003f60 <pxCurrentTCBConst>:
 8003f60:	200001b0 	.word	0x200001b0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop

08003f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f6e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	607b      	str	r3, [r7, #4]
    }
 8003f80:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f82:	f7ff fa8f 	bl	80034a4 <xTaskIncrementTick>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <SysTick_Handler+0x40>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f383 8811 	msr	BASEPRI, r3
    }
 8003f9e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fb0:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <vPortSetupTimerInterrupt+0x28>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fb6:	4b08      	ldr	r3, [pc, #32]	@ (8003fd8 <vPortSetupTimerInterrupt+0x2c>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fbc:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <vPortSetupTimerInterrupt+0x30>)
 8003fbe:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003fc2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fc4:	4b03      	ldr	r3, [pc, #12]	@ (8003fd4 <vPortSetupTimerInterrupt+0x28>)
 8003fc6:	2207      	movs	r2, #7
 8003fc8:	601a      	str	r2, [r3, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000e010 	.word	0xe000e010
 8003fd8:	e000e018 	.word	0xe000e018
 8003fdc:	e000e014 	.word	0xe000e014

08003fe0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8003fec:	f7ff f96e 	bl	80032cc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8004124 <pvPortMalloc+0x144>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003ff8:	f000 f8e0 	bl	80041bc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8004128 <pvPortMalloc+0x148>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 8086 	bne.w	8004116 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01e      	beq.n	800404e <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004010:	2208      	movs	r2, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d218      	bcs.n	800404e <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 800401c:	2208      	movs	r2, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	2b00      	cmp	r3, #0
 800402c:	d011      	beq.n	8004052 <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f023 0307 	bic.w	r3, r3, #7
 8004034:	3308      	adds	r3, #8
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d205      	bcs.n	8004048 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f023 0307 	bic.w	r3, r3, #7
 8004042:	3308      	adds	r3, #8
 8004044:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004046:	e004      	b.n	8004052 <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800404c:	e001      	b.n	8004052 <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d05e      	beq.n	8004116 <pvPortMalloc+0x136>
 8004058:	4b34      	ldr	r3, [pc, #208]	@ (800412c <pvPortMalloc+0x14c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	429a      	cmp	r2, r3
 8004060:	d859      	bhi.n	8004116 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004062:	4b33      	ldr	r3, [pc, #204]	@ (8004130 <pvPortMalloc+0x150>)
 8004064:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8004066:	4b32      	ldr	r3, [pc, #200]	@ (8004130 <pvPortMalloc+0x150>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800406c:	e004      	b.n	8004078 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	429a      	cmp	r2, r3
 8004080:	d903      	bls.n	800408a <pvPortMalloc+0xaa>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f1      	bne.n	800406e <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800408a:	4b26      	ldr	r3, [pc, #152]	@ (8004124 <pvPortMalloc+0x144>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	429a      	cmp	r2, r3
 8004092:	d040      	beq.n	8004116 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2208      	movs	r2, #8
 800409a:	4413      	add	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	1ad2      	subs	r2, r2, r3
 80040ae:	2308      	movs	r3, #8
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d90f      	bls.n	80040d6 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4413      	add	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	1ad2      	subs	r2, r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040d0:	68b8      	ldr	r0, [r7, #8]
 80040d2:	f000 f8d5 	bl	8004280 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040d6:	4b15      	ldr	r3, [pc, #84]	@ (800412c <pvPortMalloc+0x14c>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	4a12      	ldr	r2, [pc, #72]	@ (800412c <pvPortMalloc+0x14c>)
 80040e2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040e4:	4b11      	ldr	r3, [pc, #68]	@ (800412c <pvPortMalloc+0x14c>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b12      	ldr	r3, [pc, #72]	@ (8004134 <pvPortMalloc+0x154>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d203      	bcs.n	80040f8 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040f0:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <pvPortMalloc+0x14c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004134 <pvPortMalloc+0x154>)
 80040f6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <pvPortMalloc+0x148>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	431a      	orrs	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <pvPortMalloc+0x158>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3301      	adds	r3, #1
 8004112:	4a09      	ldr	r2, [pc, #36]	@ (8004138 <pvPortMalloc+0x158>)
 8004114:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004116:	f7ff f8e7 	bl	80032e8 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	200022bc 	.word	0x200022bc
 8004128:	200022d0 	.word	0x200022d0
 800412c:	200022c0 	.word	0x200022c0
 8004130:	200022b4 	.word	0x200022b4
 8004134:	200022c4 	.word	0x200022c4
 8004138:	200022c8 	.word	0x200022c8

0800413c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d02c      	beq.n	80041a8 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800414e:	2308      	movs	r3, #8
 8004150:	425b      	negs	r3, r3
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	4b13      	ldr	r3, [pc, #76]	@ (80041b0 <vPortFree+0x74>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01e      	beq.n	80041a8 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d11a      	bne.n	80041a8 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	4b0e      	ldr	r3, [pc, #56]	@ (80041b0 <vPortFree+0x74>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	43db      	mvns	r3, r3
 800417c:	401a      	ands	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004182:	f7ff f8a3 	bl	80032cc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <vPortFree+0x78>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4413      	add	r3, r2
 8004190:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <vPortFree+0x78>)
 8004192:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004194:	68b8      	ldr	r0, [r7, #8]
 8004196:	f000 f873 	bl	8004280 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800419a:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <vPortFree+0x7c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	4a05      	ldr	r2, [pc, #20]	@ (80041b8 <vPortFree+0x7c>)
 80041a2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80041a4:	f7ff f8a0 	bl	80032e8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	200022d0 	.word	0x200022d0
 80041b4:	200022c0 	.word	0x200022c0
 80041b8:	200022cc 	.word	0x200022cc

080041bc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041c6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80041c8:	4b27      	ldr	r3, [pc, #156]	@ (8004268 <prvHeapInit+0xac>)
 80041ca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3307      	adds	r3, #7
 80041da:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0307 	bic.w	r3, r3, #7
 80041e2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004268 <prvHeapInit+0xac>)
 80041ec:	4413      	add	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041f4:	4a1d      	ldr	r2, [pc, #116]	@ (800426c <prvHeapInit+0xb0>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041fa:	4b1c      	ldr	r3, [pc, #112]	@ (800426c <prvHeapInit+0xb0>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	4413      	add	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004208:	2208      	movs	r2, #8
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <prvHeapInit+0xb4>)
 800421c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800421e:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <prvHeapInit+0xb4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004226:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <prvHeapInit+0xb4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800423c:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <prvHeapInit+0xb4>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a0a      	ldr	r2, [pc, #40]	@ (8004274 <prvHeapInit+0xb8>)
 800424a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a09      	ldr	r2, [pc, #36]	@ (8004278 <prvHeapInit+0xbc>)
 8004252:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004254:	4b09      	ldr	r3, [pc, #36]	@ (800427c <prvHeapInit+0xc0>)
 8004256:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800425a:	601a      	str	r2, [r3, #0]
}
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	200002b4 	.word	0x200002b4
 800426c:	200022b4 	.word	0x200022b4
 8004270:	200022bc 	.word	0x200022bc
 8004274:	200022c4 	.word	0x200022c4
 8004278:	200022c0 	.word	0x200022c0
 800427c:	200022d0 	.word	0x200022d0

08004280 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004288:	4b27      	ldr	r3, [pc, #156]	@ (8004328 <prvInsertBlockIntoFreeList+0xa8>)
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e002      	b.n	8004294 <prvInsertBlockIntoFreeList+0x14>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d8f7      	bhi.n	800428e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	4413      	add	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d108      	bne.n	80042c2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	441a      	add	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	441a      	add	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d118      	bne.n	8004308 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b14      	ldr	r3, [pc, #80]	@ (800432c <prvInsertBlockIntoFreeList+0xac>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d00d      	beq.n	80042fe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	441a      	add	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e008      	b.n	8004310 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042fe:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <prvInsertBlockIntoFreeList+0xac>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e003      	b.n	8004310 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d002      	beq.n	800431e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	200022b4 	.word	0x200022b4
 800432c:	200022bc 	.word	0x200022bc

08004330 <BUZZER_Init>:
#include "stm32f10x_gpio.h"

#include "BUZZER.h"

void BUZZER_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef   GPIO_InitStruct;

	/* GPIOA and GPIOB clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800433c:	2101      	movs	r1, #1
 800433e:	2008      	movs	r0, #8
 8004340:	f000 fe7a 	bl	8005038 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin;
 8004344:	887b      	ldrh	r3, [r7, #2]
 8004346:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8004348:	2310      	movs	r3, #16
 800434a:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 800434c:	2302      	movs	r3, #2
 800434e:	73bb      	strb	r3, [r7, #14]

	GPIO_Init(GPIOx , &GPIO_InitStruct);
 8004350:	f107 030c 	add.w	r3, r7, #12
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fcb0 	bl	8004cbc <GPIO_Init>

}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <BUZZER_on>:
void BUZZER_on(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	807b      	strh	r3, [r7, #2]
	GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	2201      	movs	r2, #1
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fd91 	bl	8004e9e <GPIO_WriteBit>
}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <BUZZER_off>:
void BUZZER_off(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
	GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	2200      	movs	r2, #0
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fd81 	bl	8004e9e <GPIO_WriteBit>
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <Motor_Init>:
};



void Motor_Init(Motor* motor)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

	//Enable the GPIO for  PWM
	if(motor->GPIOx_pwm == GPIOA)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a95      	ldr	r2, [pc, #596]	@ (8004608 <Motor_Init+0x264>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d104      	bne.n	80043c0 <Motor_Init+0x1c>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80043b6:	2101      	movs	r1, #1
 80043b8:	2004      	movs	r0, #4
 80043ba:	f000 fe3d 	bl	8005038 <RCC_APB2PeriphClockCmd>
 80043be:	e012      	b.n	80043e6 <Motor_Init+0x42>
	}
	else if(motor->GPIOx_pwm == GPIOB)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a91      	ldr	r2, [pc, #580]	@ (800460c <Motor_Init+0x268>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d104      	bne.n	80043d4 <Motor_Init+0x30>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80043ca:	2101      	movs	r1, #1
 80043cc:	2008      	movs	r0, #8
 80043ce:	f000 fe33 	bl	8005038 <RCC_APB2PeriphClockCmd>
 80043d2:	e008      	b.n	80043e6 <Motor_Init+0x42>
	}
	else if(motor->GPIOx_pwm == GPIOC)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a8d      	ldr	r2, [pc, #564]	@ (8004610 <Motor_Init+0x26c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d103      	bne.n	80043e6 <Motor_Init+0x42>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80043de:	2101      	movs	r1, #1
 80043e0:	2010      	movs	r0, #16
 80043e2:	f000 fe29 	bl	8005038 <RCC_APB2PeriphClockCmd>
	}

	//Enable the GPIO for Input1
	if(motor->GPIOx_in1 != motor->GPIOx_pwm)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d01c      	beq.n	800442c <Motor_Init+0x88>
	{
		if(motor->GPIOx_in1 == GPIOA)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	4a84      	ldr	r2, [pc, #528]	@ (8004608 <Motor_Init+0x264>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d104      	bne.n	8004406 <Motor_Init+0x62>
		{
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80043fc:	2101      	movs	r1, #1
 80043fe:	2004      	movs	r0, #4
 8004400:	f000 fe1a 	bl	8005038 <RCC_APB2PeriphClockCmd>
 8004404:	e012      	b.n	800442c <Motor_Init+0x88>
		}
		else if(motor->GPIOx_in1 == GPIOC)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4a81      	ldr	r2, [pc, #516]	@ (8004610 <Motor_Init+0x26c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d104      	bne.n	800441a <Motor_Init+0x76>
		{
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8004410:	2101      	movs	r1, #1
 8004412:	2008      	movs	r0, #8
 8004414:	f000 fe10 	bl	8005038 <RCC_APB2PeriphClockCmd>
 8004418:	e008      	b.n	800442c <Motor_Init+0x88>
		}
		else if(motor->GPIOx_in1 == GPIOC)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	4a7c      	ldr	r2, [pc, #496]	@ (8004610 <Motor_Init+0x26c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d103      	bne.n	800442c <Motor_Init+0x88>
		{
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8004424:	2101      	movs	r1, #1
 8004426:	2010      	movs	r0, #16
 8004428:	f000 fe06 	bl	8005038 <RCC_APB2PeriphClockCmd>
		}
	}

	//Enable the GPIO for Input2
	if((motor->GPIOx_in2 != motor->GPIOx_pwm) && (motor->GPIOx_in2 != motor->GPIOx_in1))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d022      	beq.n	800447e <Motor_Init+0xda>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	429a      	cmp	r2, r3
 8004442:	d01c      	beq.n	800447e <Motor_Init+0xda>
	{
		if(motor->GPIOx_in2 == GPIOA)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	4a6f      	ldr	r2, [pc, #444]	@ (8004608 <Motor_Init+0x264>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d104      	bne.n	8004458 <Motor_Init+0xb4>
		{
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800444e:	2101      	movs	r1, #1
 8004450:	2004      	movs	r0, #4
 8004452:	f000 fdf1 	bl	8005038 <RCC_APB2PeriphClockCmd>
 8004456:	e012      	b.n	800447e <Motor_Init+0xda>
		}
		else if(motor->GPIOx_in2 == GPIOC)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	4a6c      	ldr	r2, [pc, #432]	@ (8004610 <Motor_Init+0x26c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d104      	bne.n	800446c <Motor_Init+0xc8>
		{
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8004462:	2101      	movs	r1, #1
 8004464:	2008      	movs	r0, #8
 8004466:	f000 fde7 	bl	8005038 <RCC_APB2PeriphClockCmd>
 800446a:	e008      	b.n	800447e <Motor_Init+0xda>
		}
		else if(motor->GPIOx_in2 == GPIOC)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	4a67      	ldr	r2, [pc, #412]	@ (8004610 <Motor_Init+0x26c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d103      	bne.n	800447e <Motor_Init+0xda>
		{
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8004476:	2101      	movs	r1, #1
 8004478:	2010      	movs	r0, #16
 800447a:	f000 fddd 	bl	8005038 <RCC_APB2PeriphClockCmd>
		}
	}

	////Enable the Timer for PWM
	if(motor->TIMx == TIM1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	4a64      	ldr	r2, [pc, #400]	@ (8004614 <Motor_Init+0x270>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d105      	bne.n	8004494 <Motor_Init+0xf0>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004488:	2101      	movs	r1, #1
 800448a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800448e:	f000 fdd3 	bl	8005038 <RCC_APB2PeriphClockCmd>
 8004492:	e01c      	b.n	80044ce <Motor_Init+0x12a>
	}
	else if(motor->TIMx == TIM2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449c:	d104      	bne.n	80044a8 <Motor_Init+0x104>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800449e:	2101      	movs	r1, #1
 80044a0:	2001      	movs	r0, #1
 80044a2:	f000 fde7 	bl	8005074 <RCC_APB1PeriphClockCmd>
 80044a6:	e012      	b.n	80044ce <Motor_Init+0x12a>
	}
	else if(motor->TIMx == TIM3)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004618 <Motor_Init+0x274>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d104      	bne.n	80044bc <Motor_Init+0x118>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80044b2:	2101      	movs	r1, #1
 80044b4:	2002      	movs	r0, #2
 80044b6:	f000 fddd 	bl	8005074 <RCC_APB1PeriphClockCmd>
 80044ba:	e008      	b.n	80044ce <Motor_Init+0x12a>
	}
	else if(motor->TIMx == TIM4)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	4a56      	ldr	r2, [pc, #344]	@ (800461c <Motor_Init+0x278>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d103      	bne.n	80044ce <Motor_Init+0x12a>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80044c6:	2101      	movs	r1, #1
 80044c8:	2004      	movs	r0, #4
 80044ca:	f000 fdd3 	bl	8005074 <RCC_APB1PeriphClockCmd>
	}

	//Initialize the pins of the PWM , in1 and in2
	GPIO_InitStruct_pwm.GPIO_Pin = motor->GPIO_Pin_pwm;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	889a      	ldrh	r2, [r3, #4]
 80044d2:	4b53      	ldr	r3, [pc, #332]	@ (8004620 <Motor_Init+0x27c>)
 80044d4:	801a      	strh	r2, [r3, #0]
	GPIO_Init(motor->GPIOx_pwm,&GPIO_InitStruct_pwm);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4951      	ldr	r1, [pc, #324]	@ (8004620 <Motor_Init+0x27c>)
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fbed 	bl	8004cbc <GPIO_Init>

	GPIO_InitStruct_in.GPIO_Pin = motor->GPIO_Pin_in1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	899a      	ldrh	r2, [r3, #12]
 80044e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004624 <Motor_Init+0x280>)
 80044e8:	801a      	strh	r2, [r3, #0]
	GPIO_Init(motor->GPIOx_in1,&GPIO_InitStruct_in);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	494d      	ldr	r1, [pc, #308]	@ (8004624 <Motor_Init+0x280>)
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fbe3 	bl	8004cbc <GPIO_Init>
	GPIO_ResetBits(motor->GPIOx_in1, motor->GPIO_Pin_in1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	899b      	ldrh	r3, [r3, #12]
 80044fe:	4619      	mov	r1, r3
 8004500:	4610      	mov	r0, r2
 8004502:	f000 fcbe 	bl	8004e82 <GPIO_ResetBits>

	GPIO_InitStruct_in.GPIO_Pin = motor->GPIO_Pin_in2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8a9a      	ldrh	r2, [r3, #20]
 800450a:	4b46      	ldr	r3, [pc, #280]	@ (8004624 <Motor_Init+0x280>)
 800450c:	801a      	strh	r2, [r3, #0]
	GPIO_Init(motor->GPIOx_in2,&GPIO_InitStruct_in);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	4944      	ldr	r1, [pc, #272]	@ (8004624 <Motor_Init+0x280>)
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fbd1 	bl	8004cbc <GPIO_Init>
	GPIO_ResetBits(motor->GPIOx_in2, motor->GPIO_Pin_in2);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8a9b      	ldrh	r3, [r3, #20]
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f000 fcac 	bl	8004e82 <GPIO_ResetBits>


	//Initialize the Timer of the PWM
	if(motor->TIM_Channel_x == TIM_Channel_1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8b9b      	ldrh	r3, [r3, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <Motor_Init+0x1a8>
	{
		TIM_OC1Init(motor->TIMx,&TIM_OCInitStruct);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	493c      	ldr	r1, [pc, #240]	@ (8004628 <Motor_Init+0x284>)
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fe99 	bl	8005270 <TIM_OC1Init>
		TIM_SetCompare1(motor->TIMx,0);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f001 f92b 	bl	80057a0 <TIM_SetCompare1>
 800454a:	e031      	b.n	80045b0 <Motor_Init+0x20c>
	}
	else if(motor->TIM_Channel_x == TIM_Channel_2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8b9b      	ldrh	r3, [r3, #28]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d10c      	bne.n	800456e <Motor_Init+0x1ca>
	{
		TIM_OC2Init(motor->TIMx,&TIM_OCInitStruct);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	4933      	ldr	r1, [pc, #204]	@ (8004628 <Motor_Init+0x284>)
 800455a:	4618      	mov	r0, r3
 800455c:	f000 ff14 	bl	8005388 <TIM_OC2Init>
		TIM_SetCompare2(motor->TIMx,0);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f001 f928 	bl	80057bc <TIM_SetCompare2>
 800456c:	e020      	b.n	80045b0 <Motor_Init+0x20c>
	}
	else if(motor->TIM_Channel_x == TIM_Channel_3)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8b9b      	ldrh	r3, [r3, #28]
 8004572:	2b08      	cmp	r3, #8
 8004574:	d10c      	bne.n	8004590 <Motor_Init+0x1ec>
	{
		TIM_OC3Init(motor->TIMx,&TIM_OCInitStruct);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	492b      	ldr	r1, [pc, #172]	@ (8004628 <Motor_Init+0x284>)
 800457c:	4618      	mov	r0, r3
 800457e:	f000 ff8b 	bl	8005498 <TIM_OC3Init>
		TIM_SetCompare3(motor->TIMx,0);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f001 f925 	bl	80057d8 <TIM_SetCompare3>
 800458e:	e00f      	b.n	80045b0 <Motor_Init+0x20c>
	}
	else if(motor->TIM_Channel_x == TIM_Channel_4)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8b9b      	ldrh	r3, [r3, #28]
 8004594:	2b0c      	cmp	r3, #12
 8004596:	d10b      	bne.n	80045b0 <Motor_Init+0x20c>
	{
		TIM_OC4Init(motor->TIMx,&TIM_OCInitStruct);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4922      	ldr	r1, [pc, #136]	@ (8004628 <Motor_Init+0x284>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 f800 	bl	80055a4 <TIM_OC4Init>
		TIM_SetCompare4(motor->TIMx,0);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 f922 	bl	80057f4 <TIM_SetCompare4>
	}

	TIM_PrescalerConfig(motor->TIMx, TIMER_PSC_VALUE,TIM_PSCReloadMode_Immediate);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2201      	movs	r2, #1
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 f88b 	bl	80056d4 <TIM_PrescalerConfig>
	TIM_SetAutoreload(motor->TIMx, MAX_TIMER_VALUE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 f8dc 	bl	8005784 <TIM_SetAutoreload>
	TIM_CounterModeConfig(motor->TIMx,TIM_CounterMode_Up);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 f891 	bl	80056fa <TIM_CounterModeConfig>
	TIM_InternalClockConfig(motor->TIMx);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 f868 	bl	80056b2 <TIM_InternalClockConfig>

	/* TIMx enable counter */
	TIM_Cmd(motor->TIMx,ENABLE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2101      	movs	r1, #1
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 f843 	bl	8005674 <TIM_Cmd>
	TIM_CCxCmd(motor->TIMx,motor->TIM_Channel_x,TIM_CCx_Enable);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6998      	ldr	r0, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	8b9b      	ldrh	r3, [r3, #28]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4619      	mov	r1, r3
 80045fa:	f001 f899 	bl	8005730 <TIM_CCxCmd>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40010800 	.word	0x40010800
 800460c:	40010c00 	.word	0x40010c00
 8004610:	40011000 	.word	0x40011000
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	200000c0 	.word	0x200000c0
 8004624:	200000c4 	.word	0x200000c4
 8004628:	200000b0 	.word	0x200000b0
 800462c:	00000000 	.word	0x00000000

08004630 <Motor_SetSpeed>:


void Motor_SetSpeed(Motor* motor,float speed)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
	uint16_t mapped_vlaue = (speed/MAX_SPEED) * MAX_TIMER_VALUE;
 800463a:	6838      	ldr	r0, [r7, #0]
 800463c:	f7fb fefc 	bl	8000438 <__aeabi_f2d>
 8004640:	a325      	add	r3, pc, #148	@ (adr r3, 80046d8 <Motor_SetSpeed+0xa8>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	f7fc f879 	bl	800073c <__aeabi_ddiv>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	a323      	add	r3, pc, #140	@ (adr r3, 80046e0 <Motor_SetSpeed+0xb0>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f7fb ff46 	bl	80004e8 <__aeabi_dmul>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	f7fc f952 	bl	800090c <__aeabi_d2uiz>
 8004668:	4603      	mov	r3, r0
 800466a:	81fb      	strh	r3, [r7, #14]
	if(motor->TIM_Channel_x == TIM_Channel_1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8b9b      	ldrh	r3, [r3, #28]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <Motor_SetSpeed+0x54>
	{
		TIM_SetCompare1(motor->TIMx,mapped_vlaue);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	89fa      	ldrh	r2, [r7, #14]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f001 f88f 	bl	80057a0 <TIM_SetCompare1>
	}
	else if(motor->TIM_Channel_x == TIM_Channel_4)
	{
		TIM_SetCompare4(motor->TIMx,mapped_vlaue);
	}
}
 8004682:	e022      	b.n	80046ca <Motor_SetSpeed+0x9a>
	else if(motor->TIM_Channel_x == TIM_Channel_2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8b9b      	ldrh	r3, [r3, #28]
 8004688:	2b04      	cmp	r3, #4
 800468a:	d107      	bne.n	800469c <Motor_SetSpeed+0x6c>
		TIM_SetCompare2(motor->TIMx,mapped_vlaue);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	89fa      	ldrh	r2, [r7, #14]
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f001 f891 	bl	80057bc <TIM_SetCompare2>
}
 800469a:	e016      	b.n	80046ca <Motor_SetSpeed+0x9a>
	else if(motor->TIM_Channel_x == TIM_Channel_3)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8b9b      	ldrh	r3, [r3, #28]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d107      	bne.n	80046b4 <Motor_SetSpeed+0x84>
		TIM_SetCompare3(motor->TIMx,mapped_vlaue);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	89fa      	ldrh	r2, [r7, #14]
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 f893 	bl	80057d8 <TIM_SetCompare3>
}
 80046b2:	e00a      	b.n	80046ca <Motor_SetSpeed+0x9a>
	else if(motor->TIM_Channel_x == TIM_Channel_4)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8b9b      	ldrh	r3, [r3, #28]
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d106      	bne.n	80046ca <Motor_SetSpeed+0x9a>
		TIM_SetCompare4(motor->TIMx,mapped_vlaue);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	89fa      	ldrh	r2, [r7, #14]
 80046c2:	4611      	mov	r1, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 f895 	bl	80057f4 <TIM_SetCompare4>
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	f3af 8000 	nop.w
 80046d8:	7ced9168 	.word	0x7ced9168
 80046dc:	404bb53f 	.word	0x404bb53f
 80046e0:	00000000 	.word	0x00000000
 80046e4:	40efffe0 	.word	0x40efffe0

080046e8 <Motor_SetCarDir>:
	}
	motor->error[0] =  error;
}

void Motor_SetCarDir(Motor* Rmotor,Motor* Lmotor,MOTOR_DIR direction)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	71fb      	strb	r3, [r7, #7]
	switch(direction)
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	f200 810f 	bhi.w	800491e <Motor_SetCarDir+0x236>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <Motor_SetCarDir+0x20>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800471d 	.word	0x0800471d
 800470c:	0800478d 	.word	0x0800478d
 8004710:	080047fd 	.word	0x080047fd
 8004714:	080048af 	.word	0x080048af
 8004718:	0800483f 	.word	0x0800483f
	{
	case FORWARD:
		GPIO_ResetBits(Rmotor->GPIOx_in2, Rmotor->GPIO_Pin_in2);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8a9b      	ldrh	r3, [r3, #20]
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f000 fbab 	bl	8004e82 <GPIO_ResetBits>
		GPIO_ResetBits(Lmotor->GPIOx_in2, Lmotor->GPIO_Pin_in2);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	8a9b      	ldrh	r3, [r3, #20]
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f000 fba3 	bl	8004e82 <GPIO_ResetBits>
		while(GPIO_ReadOutputDataBit(Rmotor->GPIOx_in2, Rmotor->GPIO_Pin_in2) ||
 800473c:	bf00      	nop
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8a9b      	ldrh	r3, [r3, #20]
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 fb73 	bl	8004e34 <GPIO_ReadOutputDataBit>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f4      	bne.n	800473e <Motor_SetCarDir+0x56>
				GPIO_ReadOutputDataBit(Lmotor->GPIOx_in2, Lmotor->GPIO_Pin_in2)   );
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	8a9b      	ldrh	r3, [r3, #20]
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f000 fb68 	bl	8004e34 <GPIO_ReadOutputDataBit>
 8004764:	4603      	mov	r3, r0
		while(GPIO_ReadOutputDataBit(Rmotor->GPIOx_in2, Rmotor->GPIO_Pin_in2) ||
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e9      	bne.n	800473e <Motor_SetCarDir+0x56>
		GPIO_SetBits(Rmotor->GPIOx_in1, Rmotor->GPIO_Pin_in1);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	899b      	ldrh	r3, [r3, #12]
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f000 fb76 	bl	8004e66 <GPIO_SetBits>
		GPIO_SetBits(Lmotor->GPIOx_in1, Lmotor->GPIO_Pin_in1);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	899b      	ldrh	r3, [r3, #12]
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f000 fb6e 	bl	8004e66 <GPIO_SetBits>
		break;
 800478a:	e0c8      	b.n	800491e <Motor_SetCarDir+0x236>
	case REVERSE:
		GPIO_ResetBits(Rmotor->GPIOx_in1, Rmotor->GPIO_Pin_in1);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	899b      	ldrh	r3, [r3, #12]
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f000 fb73 	bl	8004e82 <GPIO_ResetBits>
		GPIO_ResetBits(Lmotor->GPIOx_in1, Lmotor->GPIO_Pin_in1);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	899b      	ldrh	r3, [r3, #12]
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 fb6b 	bl	8004e82 <GPIO_ResetBits>
		while(GPIO_ReadOutputDataBit(Rmotor->GPIOx_in1, Rmotor->GPIO_Pin_in1) ||
 80047ac:	bf00      	nop
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	899b      	ldrh	r3, [r3, #12]
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f000 fb3b 	bl	8004e34 <GPIO_ReadOutputDataBit>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f4      	bne.n	80047ae <Motor_SetCarDir+0xc6>
				GPIO_ReadOutputDataBit(Lmotor->GPIOx_in1, Lmotor->GPIO_Pin_in1)   );
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	899b      	ldrh	r3, [r3, #12]
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f000 fb30 	bl	8004e34 <GPIO_ReadOutputDataBit>
 80047d4:	4603      	mov	r3, r0
		while(GPIO_ReadOutputDataBit(Rmotor->GPIOx_in1, Rmotor->GPIO_Pin_in1) ||
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e9      	bne.n	80047ae <Motor_SetCarDir+0xc6>
		GPIO_SetBits(Rmotor->GPIOx_in2, Rmotor->GPIO_Pin_in2);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8a9b      	ldrh	r3, [r3, #20]
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f000 fb3e 	bl	8004e66 <GPIO_SetBits>
		GPIO_SetBits(Lmotor->GPIOx_in2, Lmotor->GPIO_Pin_in2);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	8a9b      	ldrh	r3, [r3, #20]
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f000 fb36 	bl	8004e66 <GPIO_SetBits>
		break;
 80047fa:	e090      	b.n	800491e <Motor_SetCarDir+0x236>
	case STOP:
		GPIO_ResetBits(Rmotor->GPIOx_in1, Rmotor->GPIO_Pin_in1);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	899b      	ldrh	r3, [r3, #12]
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f000 fb3b 	bl	8004e82 <GPIO_ResetBits>
		GPIO_ResetBits(Lmotor->GPIOx_in1, Lmotor->GPIO_Pin_in1);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	899b      	ldrh	r3, [r3, #12]
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f000 fb33 	bl	8004e82 <GPIO_ResetBits>
		GPIO_ResetBits(Rmotor->GPIOx_in2, Rmotor->GPIO_Pin_in2);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8a9b      	ldrh	r3, [r3, #20]
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f000 fb2b 	bl	8004e82 <GPIO_ResetBits>
		GPIO_ResetBits(Lmotor->GPIOx_in2, Lmotor->GPIO_Pin_in2);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	8a9b      	ldrh	r3, [r3, #20]
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f000 fb23 	bl	8004e82 <GPIO_ResetBits>
		break;
 800483c:	e06f      	b.n	800491e <Motor_SetCarDir+0x236>
	case TURN_LEFT:
		GPIO_ResetBits(Rmotor->GPIOx_in2, Rmotor->GPIO_Pin_in2);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8a9b      	ldrh	r3, [r3, #20]
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f000 fb1a 	bl	8004e82 <GPIO_ResetBits>
		GPIO_ResetBits(Lmotor->GPIOx_in1, Lmotor->GPIO_Pin_in1);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	899b      	ldrh	r3, [r3, #12]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 fb12 	bl	8004e82 <GPIO_ResetBits>
		while(GPIO_ReadOutputDataBit(Rmotor->GPIOx_in2, Rmotor->GPIO_Pin_in2) ||
 800485e:	bf00      	nop
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8a9b      	ldrh	r3, [r3, #20]
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f000 fae2 	bl	8004e34 <GPIO_ReadOutputDataBit>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f4      	bne.n	8004860 <Motor_SetCarDir+0x178>
				GPIO_ReadOutputDataBit(Lmotor->GPIOx_in1, Lmotor->GPIO_Pin_in1)   ) ;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	899b      	ldrh	r3, [r3, #12]
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f000 fad7 	bl	8004e34 <GPIO_ReadOutputDataBit>
 8004886:	4603      	mov	r3, r0
		while(GPIO_ReadOutputDataBit(Rmotor->GPIOx_in2, Rmotor->GPIO_Pin_in2) ||
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e9      	bne.n	8004860 <Motor_SetCarDir+0x178>
		GPIO_SetBits(Rmotor->GPIOx_in1, Rmotor->GPIO_Pin_in1);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	899b      	ldrh	r3, [r3, #12]
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f000 fae5 	bl	8004e66 <GPIO_SetBits>
		GPIO_SetBits(Lmotor->GPIOx_in2, Lmotor->GPIO_Pin_in2);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	8a9b      	ldrh	r3, [r3, #20]
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fadd 	bl	8004e66 <GPIO_SetBits>
		break;
 80048ac:	e037      	b.n	800491e <Motor_SetCarDir+0x236>
	case TURN_RIGHT:
		GPIO_ResetBits(Rmotor->GPIOx_in1, Rmotor->GPIO_Pin_in1);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	899b      	ldrh	r3, [r3, #12]
 80048b6:	4619      	mov	r1, r3
 80048b8:	4610      	mov	r0, r2
 80048ba:	f000 fae2 	bl	8004e82 <GPIO_ResetBits>
		GPIO_ResetBits(Lmotor->GPIOx_in2, Lmotor->GPIO_Pin_in2);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	8a9b      	ldrh	r3, [r3, #20]
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f000 fada 	bl	8004e82 <GPIO_ResetBits>
		while(GPIO_ReadOutputDataBit(Rmotor->GPIOx_in1, Rmotor->GPIO_Pin_in1) ||
 80048ce:	bf00      	nop
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	899b      	ldrh	r3, [r3, #12]
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f000 faaa 	bl	8004e34 <GPIO_ReadOutputDataBit>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f4      	bne.n	80048d0 <Motor_SetCarDir+0x1e8>
				GPIO_ReadOutputDataBit(Lmotor->GPIOx_in2, Lmotor->GPIO_Pin_in2)   );
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	8a9b      	ldrh	r3, [r3, #20]
 80048ee:	4619      	mov	r1, r3
 80048f0:	4610      	mov	r0, r2
 80048f2:	f000 fa9f 	bl	8004e34 <GPIO_ReadOutputDataBit>
 80048f6:	4603      	mov	r3, r0
		while(GPIO_ReadOutputDataBit(Rmotor->GPIOx_in1, Rmotor->GPIO_Pin_in1) ||
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e9      	bne.n	80048d0 <Motor_SetCarDir+0x1e8>
		GPIO_SetBits(Rmotor->GPIOx_in2, Rmotor->GPIO_Pin_in2);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8a9b      	ldrh	r3, [r3, #20]
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f000 faad 	bl	8004e66 <GPIO_SetBits>
		GPIO_SetBits(Lmotor->GPIOx_in1, Lmotor->GPIO_Pin_in1);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	899b      	ldrh	r3, [r3, #12]
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f000 faa5 	bl	8004e66 <GPIO_SetBits>
		break;
 800491c:	bf00      	nop
	}

}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop

08004928 <SERVO_Init>:

SERVO_info gs_SERVO_info;


void SERVO_Init(SERVO* SEV )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
	TIM_OCInitTypeDef TIM_OCInitStruct =
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	2360      	movs	r3, #96	@ 0x60
 8004944:	81bb      	strh	r3, [r7, #12]
 8004946:	2301      	movs	r3, #1
 8004948:	81fb      	strh	r3, [r7, #14]
 800494a:	2304      	movs	r3, #4
 800494c:	823b      	strh	r3, [r7, #16]
			TIM_OutputNState_Enable,
			0,
			TIM_OCPolarity_High
	};
	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/
	if(SEV->SERVO_GPIO == GPIOA)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a6c      	ldr	r2, [pc, #432]	@ (8004b04 <SERVO_Init+0x1dc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d104      	bne.n	8004962 <SERVO_Init+0x3a>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8004958:	2101      	movs	r1, #1
 800495a:	2004      	movs	r0, #4
 800495c:	f000 fb6c 	bl	8005038 <RCC_APB2PeriphClockCmd>
 8004960:	e012      	b.n	8004988 <SERVO_Init+0x60>
	}
	else if(SEV->SERVO_GPIO == GPIOB)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a68      	ldr	r2, [pc, #416]	@ (8004b08 <SERVO_Init+0x1e0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d104      	bne.n	8004976 <SERVO_Init+0x4e>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800496c:	2101      	movs	r1, #1
 800496e:	2008      	movs	r0, #8
 8004970:	f000 fb62 	bl	8005038 <RCC_APB2PeriphClockCmd>
 8004974:	e008      	b.n	8004988 <SERVO_Init+0x60>
	}
	else if(SEV->SERVO_GPIO == GPIOC)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a64      	ldr	r2, [pc, #400]	@ (8004b0c <SERVO_Init+0x1e4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <SERVO_Init+0x60>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8004980:	2101      	movs	r1, #1
 8004982:	2010      	movs	r0, #16
 8004984:	f000 fb58 	bl	8005038 <RCC_APB2PeriphClockCmd>
	}

	GPIO_InitStruct.GPIO_Pin = SEV->SERVO_PIN;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	889b      	ldrh	r3, [r3, #4]
 800498c:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 800498e:	2318      	movs	r3, #24
 8004990:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8004992:	2303      	movs	r3, #3
 8004994:	77bb      	strb	r3, [r7, #30]

	GPIO_Init(SEV->SERVO_GPIO, &GPIO_InitStruct);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f107 021c 	add.w	r2, r7, #28
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f98b 	bl	8004cbc <GPIO_Init>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info.Period_Min = (uint16_t) (ARR_Value * (MinPulse/20.0));
 80049a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004b10 <SERVO_Init+0x1e8>)
 80049a8:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80049ac:	801a      	strh	r2, [r3, #0]
	gs_SERVO_info.Period_Max = (uint16_t) (ARR_Value * (MaxPulse/20.0));
 80049ae:	4b58      	ldr	r3, [pc, #352]	@ (8004b10 <SERVO_Init+0x1e8>)
 80049b0:	f641 1299 	movw	r2, #6553	@ 0x1999
 80049b4:	805a      	strh	r2, [r3, #2]


	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SEV->TIMx == TIM1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	4a56      	ldr	r2, [pc, #344]	@ (8004b14 <SERVO_Init+0x1ec>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d105      	bne.n	80049cc <SERVO_Init+0xa4>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80049c0:	2101      	movs	r1, #1
 80049c2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80049c6:	f000 fb37 	bl	8005038 <RCC_APB2PeriphClockCmd>
 80049ca:	e01c      	b.n	8004a06 <SERVO_Init+0xde>
	}
	else if(SEV->TIMx == TIM2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d4:	d104      	bne.n	80049e0 <SERVO_Init+0xb8>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80049d6:	2101      	movs	r1, #1
 80049d8:	2001      	movs	r0, #1
 80049da:	f000 fb4b 	bl	8005074 <RCC_APB1PeriphClockCmd>
 80049de:	e012      	b.n	8004a06 <SERVO_Init+0xde>
	}
	else if(SEV->TIMx == TIM3)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a4c      	ldr	r2, [pc, #304]	@ (8004b18 <SERVO_Init+0x1f0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d104      	bne.n	80049f4 <SERVO_Init+0xcc>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80049ea:	2101      	movs	r1, #1
 80049ec:	2002      	movs	r0, #2
 80049ee:	f000 fb41 	bl	8005074 <RCC_APB1PeriphClockCmd>
 80049f2:	e008      	b.n	8004a06 <SERVO_Init+0xde>
	}
	else if(SEV->TIMx == TIM4)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a48      	ldr	r2, [pc, #288]	@ (8004b1c <SERVO_Init+0x1f4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d103      	bne.n	8004a06 <SERVO_Init+0xde>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80049fe:	2101      	movs	r1, #1
 8004a00:	2004      	movs	r0, #4
 8004a02:	f000 fb37 	bl	8005074 <RCC_APB1PeriphClockCmd>
	}

	/* Changes the mapping of the specified pin */
	if(SEV->TIM_Channel_x == TIM_Channel_1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	899b      	ldrh	r3, [r3, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d110      	bne.n	8004a30 <SERVO_Init+0x108>
	{
		TIM_OC1Init(SEV->TIMx,&TIM_OCInitStruct);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f107 020c 	add.w	r2, r7, #12
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fc29 	bl	8005270 <TIM_OC1Init>
		TIM_SetCompare1(SEV->TIMx,gs_SERVO_info.Period_Min);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	4a3b      	ldr	r2, [pc, #236]	@ (8004b10 <SERVO_Init+0x1e8>)
 8004a24:	8812      	ldrh	r2, [r2, #0]
 8004a26:	4611      	mov	r1, r2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 feb9 	bl	80057a0 <TIM_SetCompare1>
 8004a2e:	e03d      	b.n	8004aac <SERVO_Init+0x184>
	}
	else if(SEV->TIM_Channel_x == TIM_Channel_2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	899b      	ldrh	r3, [r3, #12]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d110      	bne.n	8004a5a <SERVO_Init+0x132>
	{
		TIM_OC2Init(SEV->TIMx,&TIM_OCInitStruct);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f107 020c 	add.w	r2, r7, #12
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fca0 	bl	8005388 <TIM_OC2Init>
		TIM_SetCompare2(SEV->TIMx,gs_SERVO_info.Period_Min);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4a30      	ldr	r2, [pc, #192]	@ (8004b10 <SERVO_Init+0x1e8>)
 8004a4e:	8812      	ldrh	r2, [r2, #0]
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 feb2 	bl	80057bc <TIM_SetCompare2>
 8004a58:	e028      	b.n	8004aac <SERVO_Init+0x184>
	}
	else if(SEV->TIM_Channel_x == TIM_Channel_3)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	899b      	ldrh	r3, [r3, #12]
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d110      	bne.n	8004a84 <SERVO_Init+0x15c>
	{
		TIM_OC3Init(SEV->TIMx,&TIM_OCInitStruct);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f107 020c 	add.w	r2, r7, #12
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fd13 	bl	8005498 <TIM_OC3Init>
		TIM_SetCompare3(SEV->TIMx,gs_SERVO_info.Period_Min);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	4a26      	ldr	r2, [pc, #152]	@ (8004b10 <SERVO_Init+0x1e8>)
 8004a78:	8812      	ldrh	r2, [r2, #0]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 feab 	bl	80057d8 <TIM_SetCompare3>
 8004a82:	e013      	b.n	8004aac <SERVO_Init+0x184>
	}
	else if(SEV->TIM_Channel_x == TIM_Channel_4)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	899b      	ldrh	r3, [r3, #12]
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	d10f      	bne.n	8004aac <SERVO_Init+0x184>
	{
		TIM_OC4Init(SEV->TIMx,&TIM_OCInitStruct);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f107 020c 	add.w	r2, r7, #12
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fd84 	bl	80055a4 <TIM_OC4Init>
		TIM_SetCompare4(SEV->TIMx,gs_SERVO_info.Period_Min);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <SERVO_Init+0x1e8>)
 8004aa2:	8812      	ldrh	r2, [r2, #0]
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fea4 	bl	80057f4 <TIM_SetCompare4>
	}

	TIM_PrescalerConfig(SEV->TIMx, TIMER_PSC_VALUE,TIM_PSCReloadMode_Immediate);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fe0d 	bl	80056d4 <TIM_PrescalerConfig>
	TIM_SetAutoreload(SEV->TIMx, ARR_Value);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fe5e 	bl	8005784 <TIM_SetAutoreload>
	TIM_CounterModeConfig(SEV->TIMx,TIM_CounterMode_Up);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fe13 	bl	80056fa <TIM_CounterModeConfig>
	TIM_InternalClockConfig(SEV->TIMx);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fdea 	bl	80056b2 <TIM_InternalClockConfig>

	/* TIMx enable counter */
	TIM_Cmd(SEV->TIMx,ENABLE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fdc5 	bl	8005674 <TIM_Cmd>
	TIM_CCxCmd(SEV->TIMx,SEV->TIM_Channel_x,TIM_CCx_Enable);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6898      	ldr	r0, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	899b      	ldrh	r3, [r3, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	4619      	mov	r1, r3
 8004af6:	f000 fe1b 	bl	8005730 <TIM_CCxCmd>
}
 8004afa:	bf00      	nop
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40010800 	.word	0x40010800
 8004b08:	40010c00 	.word	0x40010c00
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	200022d4 	.word	0x200022d4
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800

08004b20 <SERVO_MoveTo>:

/* Moves A Specific SEV To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(SERVO* SEV ,float af_Angle)
{
 8004b20:	b5b0      	push	{r4, r5, r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	uint16_t au16_Pulse = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info.Period_Max - gs_SERVO_info.Period_Min))/180.0)
 8004b2e:	4b30      	ldr	r3, [pc, #192]	@ (8004bf0 <SERVO_MoveTo+0xd0>)
 8004b30:	885b      	ldrh	r3, [r3, #2]
 8004b32:	461a      	mov	r2, r3
 8004b34:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf0 <SERVO_MoveTo+0xd0>)
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb ffc0 	bl	8000ac0 <__aeabi_i2f>
 8004b40:	4603      	mov	r3, r0
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fc f80f 	bl	8000b68 <__aeabi_fmul>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fb fc73 	bl	8000438 <__aeabi_f2d>
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	4b27      	ldr	r3, [pc, #156]	@ (8004bf4 <SERVO_MoveTo+0xd4>)
 8004b58:	f7fb fdf0 	bl	800073c <__aeabi_ddiv>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4614      	mov	r4, r2
 8004b62:	461d      	mov	r5, r3
							+ gs_SERVO_info.Period_Min;
 8004b64:	4b22      	ldr	r3, [pc, #136]	@ (8004bf0 <SERVO_MoveTo+0xd0>)
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fb fc53 	bl	8000414 <__aeabi_i2d>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	f7fb fb01 	bl	800017c <__adddf3>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info.Period_Max - gs_SERVO_info.Period_Min))/180.0)
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	f7fb fec3 	bl	800090c <__aeabi_d2uiz>
 8004b86:	4603      	mov	r3, r0
 8004b88:	81fb      	strh	r3, [r7, #14]

	if(SEV->TIM_Channel_x == TIM_Channel_1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	899b      	ldrh	r3, [r3, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d107      	bne.n	8004ba2 <SERVO_MoveTo+0x82>
	{
		TIM_SetCompare1(SEV->TIMx,au16_Pulse);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	89fa      	ldrh	r2, [r7, #14]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fe00 	bl	80057a0 <TIM_SetCompare1>
	}
	else if(SEV->TIM_Channel_x == TIM_Channel_4)
	{
		TIM_SetCompare4(SEV->TIMx,au16_Pulse);
	}
}
 8004ba0:	e022      	b.n	8004be8 <SERVO_MoveTo+0xc8>
	else if(SEV->TIM_Channel_x == TIM_Channel_2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	899b      	ldrh	r3, [r3, #12]
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d107      	bne.n	8004bba <SERVO_MoveTo+0x9a>
		TIM_SetCompare2(SEV->TIMx,au16_Pulse);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	89fa      	ldrh	r2, [r7, #14]
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fe02 	bl	80057bc <TIM_SetCompare2>
}
 8004bb8:	e016      	b.n	8004be8 <SERVO_MoveTo+0xc8>
	else if(SEV->TIM_Channel_x == TIM_Channel_3)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	899b      	ldrh	r3, [r3, #12]
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d107      	bne.n	8004bd2 <SERVO_MoveTo+0xb2>
		TIM_SetCompare3(SEV->TIMx,au16_Pulse);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	89fa      	ldrh	r2, [r7, #14]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fe04 	bl	80057d8 <TIM_SetCompare3>
}
 8004bd0:	e00a      	b.n	8004be8 <SERVO_MoveTo+0xc8>
	else if(SEV->TIM_Channel_x == TIM_Channel_4)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	899b      	ldrh	r3, [r3, #12]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d106      	bne.n	8004be8 <SERVO_MoveTo+0xc8>
		TIM_SetCompare4(SEV->TIMx,au16_Pulse);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	89fa      	ldrh	r2, [r7, #14]
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fe06 	bl	80057f4 <TIM_SetCompare4>
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf0:	200022d4 	.word	0x200022d4
 8004bf4:	40668000 	.word	0x40668000

08004bf8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	230f      	movs	r3, #15
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	78db      	ldrb	r3, [r3, #3]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03a      	beq.n	8004c8a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004c14:	4b27      	ldr	r3, [pc, #156]	@ (8004cb4 <NVIC_Init+0xbc>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	0a1b      	lsrs	r3, r3, #8
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f1c3 0304 	rsb	r3, r3, #4
 8004c28:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	789b      	ldrb	r3, [r3, #2]
 8004c46:	461a      	mov	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8004c58:	4a17      	ldr	r2, [pc, #92]	@ (8004cb8 <NVIC_Init+0xc0>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	6979      	ldr	r1, [r7, #20]
 8004c60:	b2c9      	uxtb	r1, r1
 8004c62:	4413      	add	r3, r2
 8004c64:	460a      	mov	r2, r1
 8004c66:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004c72:	4911      	ldr	r1, [pc, #68]	@ (8004cb8 <NVIC_Init+0xc0>)
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	0952      	lsrs	r2, r2, #5
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004c7e:	2201      	movs	r2, #1
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004c84:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8004c88:	e00f      	b.n	8004caa <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004c92:	4909      	ldr	r1, [pc, #36]	@ (8004cb8 <NVIC_Init+0xc0>)
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	7812      	ldrb	r2, [r2, #0]
 8004c98:	0952      	lsrs	r2, r2, #5
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004ca2:	f100 0320 	add.w	r3, r0, #32
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	e000ed00 	.word	0xe000ed00
 8004cb8:	e000e100 	.word	0xe000e100

08004cbc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b089      	sub	sp, #36	@ 0x24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	78db      	ldrb	r3, [r3, #3]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	78db      	ldrb	r3, [r3, #3]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	789b      	ldrb	r3, [r3, #2]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d044      	beq.n	8004d94 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e038      	b.n	8004d88 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8004d16:	2201      	movs	r2, #1
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d126      	bne.n	8004d82 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8004d3a:	220f      	movs	r2, #15
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	78db      	ldrb	r3, [r3, #3]
 8004d60:	2b28      	cmp	r3, #40	@ 0x28
 8004d62:	d105      	bne.n	8004d70 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8004d64:	2201      	movs	r2, #1
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	615a      	str	r2, [r3, #20]
 8004d6e:	e008      	b.n	8004d82 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	78db      	ldrb	r3, [r3, #3]
 8004d74:	2b48      	cmp	r3, #72	@ 0x48
 8004d76:	d104      	bne.n	8004d82 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8004d78:	2201      	movs	r2, #1
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b07      	cmp	r3, #7
 8004d8c:	d9c3      	bls.n	8004d16 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	2bff      	cmp	r3, #255	@ 0xff
 8004d9a:	d946      	bls.n	8004e2a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	e03a      	b.n	8004e1e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	3308      	adds	r3, #8
 8004dac:	2201      	movs	r2, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d127      	bne.n	8004e18 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8004dce:	220f      	movs	r2, #15
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4013      	ands	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	78db      	ldrb	r3, [r3, #3]
 8004df4:	2b28      	cmp	r3, #40	@ 0x28
 8004df6:	d105      	bne.n	8004e04 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	78db      	ldrb	r3, [r3, #3]
 8004e08:	2b48      	cmp	r3, #72	@ 0x48
 8004e0a:	d105      	bne.n	8004e18 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	2201      	movs	r2, #1
 8004e12:	409a      	lsls	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b07      	cmp	r3, #7
 8004e22:	d9c1      	bls.n	8004da8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	605a      	str	r2, [r3, #4]
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	3724      	adds	r7, #36	@ 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8004e40:	2300      	movs	r3, #0
 8004e42:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	887b      	ldrh	r3, [r7, #2]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	e001      	b.n	8004e5a <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8004e72:	887a      	ldrh	r2, [r7, #2]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	611a      	str	r2, [r3, #16]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8004e8e:	887a      	ldrh	r2, [r7, #2]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	615a      	str	r2, [r3, #20]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	807b      	strh	r3, [r7, #2]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8004eae:	787b      	ldrb	r3, [r7, #1]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eb4:	887a      	ldrh	r2, [r7, #2]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8004eba:	e002      	b.n	8004ec2 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8004ebc:	887a      	ldrh	r2, [r7, #2]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	615a      	str	r2, [r3, #20]
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8005024 <RCC_GetClocksFreq+0x158>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
 8004eec:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d011      	beq.n	8004f18 <RCC_GetClocksFreq+0x4c>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d83a      	bhi.n	8004f70 <RCC_GetClocksFreq+0xa4>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <RCC_GetClocksFreq+0x3c>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d004      	beq.n	8004f10 <RCC_GetClocksFreq+0x44>
 8004f06:	e033      	b.n	8004f70 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a47      	ldr	r2, [pc, #284]	@ (8005028 <RCC_GetClocksFreq+0x15c>)
 8004f0c:	601a      	str	r2, [r3, #0]
      break;
 8004f0e:	e033      	b.n	8004f78 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a45      	ldr	r2, [pc, #276]	@ (8005028 <RCC_GetClocksFreq+0x15c>)
 8004f14:	601a      	str	r2, [r3, #0]
      break;
 8004f16:	e02f      	b.n	8004f78 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004f18:	4b42      	ldr	r3, [pc, #264]	@ (8005024 <RCC_GetClocksFreq+0x158>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004f20:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8004f22:	4b40      	ldr	r3, [pc, #256]	@ (8005024 <RCC_GetClocksFreq+0x158>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	0c9b      	lsrs	r3, r3, #18
 8004f30:	3302      	adds	r3, #2
 8004f32:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4a3b      	ldr	r2, [pc, #236]	@ (800502c <RCC_GetClocksFreq+0x160>)
 8004f3e:	fb03 f202 	mul.w	r2, r3, r2
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8004f46:	e017      	b.n	8004f78 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8004f48:	4b36      	ldr	r3, [pc, #216]	@ (8005024 <RCC_GetClocksFreq+0x158>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d006      	beq.n	8004f62 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4a35      	ldr	r2, [pc, #212]	@ (800502c <RCC_GetClocksFreq+0x160>)
 8004f58:	fb03 f202 	mul.w	r2, r3, r2
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]
      break;
 8004f60:	e00a      	b.n	8004f78 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4a30      	ldr	r2, [pc, #192]	@ (8005028 <RCC_GetClocksFreq+0x15c>)
 8004f66:	fb03 f202 	mul.w	r2, r3, r2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
      break;
 8004f6e:	e003      	b.n	8004f78 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a2d      	ldr	r2, [pc, #180]	@ (8005028 <RCC_GetClocksFreq+0x15c>)
 8004f74:	601a      	str	r2, [r3, #0]
      break;
 8004f76:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004f78:	4b2a      	ldr	r3, [pc, #168]	@ (8005024 <RCC_GetClocksFreq+0x158>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f80:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8004f88:	4a29      	ldr	r2, [pc, #164]	@ (8005030 <RCC_GetClocksFreq+0x164>)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	40da      	lsrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8004fa0:	4b20      	ldr	r3, [pc, #128]	@ (8005024 <RCC_GetClocksFreq+0x158>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fa8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8004fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8005030 <RCC_GetClocksFreq+0x164>)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	40da      	lsrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8004fc8:	4b16      	ldr	r3, [pc, #88]	@ (8005024 <RCC_GetClocksFreq+0x158>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004fd0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	0adb      	lsrs	r3, r3, #11
 8004fd6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8004fd8:	4a15      	ldr	r2, [pc, #84]	@ (8005030 <RCC_GetClocksFreq+0x164>)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	4413      	add	r3, r2
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	40da      	lsrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <RCC_GetClocksFreq+0x158>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ff8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	0b9b      	lsrs	r3, r3, #14
 8004ffe:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8005000:	4a0c      	ldr	r2, [pc, #48]	@ (8005034 <RCC_GetClocksFreq+0x168>)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	4413      	add	r3, r2
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	fbb2 f2f3 	udiv	r2, r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	611a      	str	r2, [r3, #16]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40021000 	.word	0x40021000
 8005028:	007a1200 	.word	0x007a1200
 800502c:	003d0900 	.word	0x003d0900
 8005030:	200000c8 	.word	0x200000c8
 8005034:	200000d8 	.word	0x200000d8

08005038 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d006      	beq.n	8005058 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800504a:	4b09      	ldr	r3, [pc, #36]	@ (8005070 <RCC_APB2PeriphClockCmd+0x38>)
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	4908      	ldr	r1, [pc, #32]	@ (8005070 <RCC_APB2PeriphClockCmd+0x38>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4313      	orrs	r3, r2
 8005054:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8005056:	e006      	b.n	8005066 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8005058:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <RCC_APB2PeriphClockCmd+0x38>)
 800505a:	699a      	ldr	r2, [r3, #24]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	43db      	mvns	r3, r3
 8005060:	4903      	ldr	r1, [pc, #12]	@ (8005070 <RCC_APB2PeriphClockCmd+0x38>)
 8005062:	4013      	ands	r3, r2
 8005064:	618b      	str	r3, [r1, #24]
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr
 8005070:	40021000 	.word	0x40021000

08005074 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8005086:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <RCC_APB1PeriphClockCmd+0x38>)
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	4908      	ldr	r1, [pc, #32]	@ (80050ac <RCC_APB1PeriphClockCmd+0x38>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4313      	orrs	r3, r2
 8005090:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8005092:	e006      	b.n	80050a2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8005094:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <RCC_APB1PeriphClockCmd+0x38>)
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	43db      	mvns	r3, r3
 800509c:	4903      	ldr	r1, [pc, #12]	@ (80050ac <RCC_APB1PeriphClockCmd+0x38>)
 800509e:	4013      	ands	r3, r2
 80050a0:	61cb      	str	r3, [r1, #28]
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	40021000 	.word	0x40021000

080050b0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80050c4:	89fb      	ldrh	r3, [r7, #14]
 80050c6:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 80050ca:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	885b      	ldrh	r3, [r3, #2]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80050dc:	4313      	orrs	r3, r2
 80050de:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80050e4:	4313      	orrs	r3, r2
 80050e6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80050f4:	4313      	orrs	r3, r2
 80050f6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80050fc:	4313      	orrs	r3, r2
 80050fe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005104:	4313      	orrs	r3, r2
 8005106:	b29a      	uxth	r2, r3
 8005108:	89fb      	ldrh	r3, [r7, #14]
 800510a:	4313      	orrs	r3, r2
 800510c:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = (tmpreg|(1 << 8) | (1 << 9));
 800510e:	89fb      	ldrh	r3, [r7, #14]
 8005110:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8b9b      	ldrh	r3, [r3, #28]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	8a1a      	ldrh	r2, [r3, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	821a      	strh	r2, [r3, #16]
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr

0800513c <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005158:	b29a      	uxth	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 800515e:	e007      	b.n	8005170 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	801a      	strh	r2, [r3, #0]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI/I2S interrupt.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	460b      	mov	r3, r1
 8005184:	70fb      	strb	r3, [r7, #3]
 8005186:	4613      	mov	r3, r2
 8005188:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800518a:	2300      	movs	r3, #0
 800518c:	81fb      	strh	r3, [r7, #14]
 800518e:	2300      	movs	r3, #0
 8005190:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	b2db      	uxtb	r3, r3
 8005198:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800519a:	89fb      	ldrh	r3, [r7, #14]
 800519c:	2201      	movs	r2, #1
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80051a4:	78bb      	ldrb	r3, [r7, #2]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	889b      	ldrh	r3, [r3, #4]
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	89bb      	ldrh	r3, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80051ba:	e009      	b.n	80051d0 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	889b      	ldrh	r3, [r3, #4]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	89bb      	ldrh	r3, [r7, #12]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4013      	ands	r3, r2
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	809a      	strh	r2, [r3, #4]
}
 80051d0:	bf00      	nop
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr

080051da <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));


  while(!(SPIx->SR & SPI_SR_TXE));
 80051e6:	bf00      	nop
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	891b      	ldrh	r3, [r3, #8]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f8      	beq.n	80051e8 <SPI_I2S_SendData+0xe>
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	887a      	ldrh	r2, [r7, #2]
 80051fa:	819a      	strh	r2, [r3, #12]
  while(SPIx->SR & SPI_SR_BSY);
 80051fc:	bf00      	nop
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	891b      	ldrh	r3, [r3, #8]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f8      	bne.n	80051fe <SPI_I2S_SendData+0x24>
}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr

08005218 <SPI_I2S_ReceiveData>:
  */



uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));


  /* Return the data in the DR register */
  return SPIx->DR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	899b      	ldrh	r3, [r3, #12]
 8005224:	b29b      	uxth	r3, r3
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	889b      	ldrh	r3, [r3, #4]
 8005246:	b29b      	uxth	r3, r3
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8005252:	e007      	b.n	8005264 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	889b      	ldrh	r3, [r3, #4]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f023 0304 	bic.w	r3, r3, #4
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	809a      	strh	r2, [r3, #4]
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
	...

08005270 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	817b      	strh	r3, [r7, #10]
 800527e:	2300      	movs	r3, #0
 8005280:	81fb      	strh	r3, [r7, #14]
 8005282:	2300      	movs	r3, #0
 8005284:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8c1b      	ldrh	r3, [r3, #32]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8c1b      	ldrh	r3, [r3, #32]
 800529a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	889b      	ldrh	r3, [r3, #4]
 80052a0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8b1b      	ldrh	r3, [r3, #24]
 80052a6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 80052a8:	897b      	ldrh	r3, [r7, #10]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ae:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80052b0:	897b      	ldrh	r3, [r7, #10]
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	881a      	ldrh	r2, [r3, #0]
 80052bc:	897b      	ldrh	r3, [r7, #10]
 80052be:	4313      	orrs	r3, r2
 80052c0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80052c2:	89fb      	ldrh	r3, [r7, #14]
 80052c4:	f023 0302 	bic.w	r3, r3, #2
 80052c8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	891a      	ldrh	r2, [r3, #8]
 80052ce:	89fb      	ldrh	r3, [r7, #14]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	885a      	ldrh	r2, [r3, #2]
 80052d8:	89fb      	ldrh	r3, [r7, #14]
 80052da:	4313      	orrs	r3, r2
 80052dc:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a24      	ldr	r2, [pc, #144]	@ (8005374 <TIM_OC1Init+0x104>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00f      	beq.n	8005306 <TIM_OC1Init+0x96>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a23      	ldr	r2, [pc, #140]	@ (8005378 <TIM_OC1Init+0x108>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00b      	beq.n	8005306 <TIM_OC1Init+0x96>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a22      	ldr	r2, [pc, #136]	@ (800537c <TIM_OC1Init+0x10c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d007      	beq.n	8005306 <TIM_OC1Init+0x96>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a21      	ldr	r2, [pc, #132]	@ (8005380 <TIM_OC1Init+0x110>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a20      	ldr	r2, [pc, #128]	@ (8005384 <TIM_OC1Init+0x114>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d123      	bne.n	800534e <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8005306:	89fb      	ldrh	r3, [r7, #14]
 8005308:	f023 0308 	bic.w	r3, r3, #8
 800530c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	895a      	ldrh	r2, [r3, #10]
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	4313      	orrs	r3, r2
 8005316:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8005318:	89fb      	ldrh	r3, [r7, #14]
 800531a:	f023 0304 	bic.w	r3, r3, #4
 800531e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	889a      	ldrh	r2, [r3, #4]
 8005324:	89fb      	ldrh	r3, [r7, #14]
 8005326:	4313      	orrs	r3, r2
 8005328:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 800532a:	89bb      	ldrh	r3, [r7, #12]
 800532c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005330:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8005332:	89bb      	ldrh	r3, [r7, #12]
 8005334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005338:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	899a      	ldrh	r2, [r3, #12]
 800533e:	89bb      	ldrh	r3, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	89da      	ldrh	r2, [r3, #14]
 8005348:	89bb      	ldrh	r3, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	89ba      	ldrh	r2, [r7, #12]
 8005352:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	897a      	ldrh	r2, [r7, #10]
 8005358:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	88da      	ldrh	r2, [r3, #6]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	869a      	strh	r2, [r3, #52]	@ 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	89fa      	ldrh	r2, [r7, #14]
 8005366:	841a      	strh	r2, [r3, #32]
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40013400 	.word	0x40013400
 800537c:	40014000 	.word	0x40014000
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800

08005388 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	817b      	strh	r3, [r7, #10]
 8005396:	2300      	movs	r3, #0
 8005398:	81fb      	strh	r3, [r7, #14]
 800539a:	2300      	movs	r3, #0
 800539c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8c1b      	ldrh	r3, [r3, #32]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8c1b      	ldrh	r3, [r3, #32]
 80053b2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	889b      	ldrh	r3, [r3, #4]
 80053b8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8b1b      	ldrh	r3, [r3, #24]
 80053be:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 80053c0:	897b      	ldrh	r3, [r7, #10]
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053c6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80053c8:	897b      	ldrh	r3, [r7, #10]
 80053ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ce:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	897b      	ldrh	r3, [r7, #10]
 80053da:	4313      	orrs	r3, r2
 80053dc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80053de:	89fb      	ldrh	r3, [r7, #14]
 80053e0:	f023 0320 	bic.w	r3, r3, #32
 80053e4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	891b      	ldrh	r3, [r3, #8]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	885b      	ldrh	r3, [r3, #2]
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	89fb      	ldrh	r3, [r7, #14]
 80053fe:	4313      	orrs	r3, r2
 8005400:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a22      	ldr	r2, [pc, #136]	@ (8005490 <TIM_OC2Init+0x108>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_OC2Init+0x8a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a21      	ldr	r2, [pc, #132]	@ (8005494 <TIM_OC2Init+0x10c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d12b      	bne.n	800546a <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8005412:	89fb      	ldrh	r3, [r7, #14]
 8005414:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005418:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	895b      	ldrh	r3, [r3, #10]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	b29a      	uxth	r2, r3
 8005422:	89fb      	ldrh	r3, [r7, #14]
 8005424:	4313      	orrs	r3, r2
 8005426:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8005428:	89fb      	ldrh	r3, [r7, #14]
 800542a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800542e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	889b      	ldrh	r3, [r3, #4]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	b29a      	uxth	r2, r3
 8005438:	89fb      	ldrh	r3, [r7, #14]
 800543a:	4313      	orrs	r3, r2
 800543c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 800543e:	89bb      	ldrh	r3, [r7, #12]
 8005440:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005444:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8005446:	89bb      	ldrh	r3, [r7, #12]
 8005448:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800544c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	899b      	ldrh	r3, [r3, #12]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	b29a      	uxth	r2, r3
 8005456:	89bb      	ldrh	r3, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	89db      	ldrh	r3, [r3, #14]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	b29a      	uxth	r2, r3
 8005464:	89bb      	ldrh	r3, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	89ba      	ldrh	r2, [r7, #12]
 800546e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	897a      	ldrh	r2, [r7, #10]
 8005474:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	88da      	ldrh	r2, [r3, #6]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	871a      	strh	r2, [r3, #56]	@ 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	89fa      	ldrh	r2, [r7, #14]
 8005482:	841a      	strh	r2, [r3, #32]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40013400 	.word	0x40013400

08005498 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	817b      	strh	r3, [r7, #10]
 80054a6:	2300      	movs	r3, #0
 80054a8:	81fb      	strh	r3, [r7, #14]
 80054aa:	2300      	movs	r3, #0
 80054ac:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8c1b      	ldrh	r3, [r3, #32]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8c1b      	ldrh	r3, [r3, #32]
 80054c2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	889b      	ldrh	r3, [r3, #4]
 80054c8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8b9b      	ldrh	r3, [r3, #28]
 80054ce:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80054d0:	897b      	ldrh	r3, [r7, #10]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 80054d8:	897b      	ldrh	r3, [r7, #10]
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	881a      	ldrh	r2, [r3, #0]
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80054ea:	89fb      	ldrh	r3, [r7, #14]
 80054ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054f0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	891b      	ldrh	r3, [r3, #8]
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	89fb      	ldrh	r3, [r7, #14]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	885b      	ldrh	r3, [r3, #2]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	b29a      	uxth	r2, r3
 8005508:	89fb      	ldrh	r3, [r7, #14]
 800550a:	4313      	orrs	r3, r2
 800550c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a22      	ldr	r2, [pc, #136]	@ (800559c <TIM_OC3Init+0x104>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_OC3Init+0x86>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a21      	ldr	r2, [pc, #132]	@ (80055a0 <TIM_OC3Init+0x108>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d12b      	bne.n	8005576 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 800551e:	89fb      	ldrh	r3, [r7, #14]
 8005520:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005524:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	895b      	ldrh	r3, [r3, #10]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	b29a      	uxth	r2, r3
 800552e:	89fb      	ldrh	r3, [r7, #14]
 8005530:	4313      	orrs	r3, r2
 8005532:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8005534:	89fb      	ldrh	r3, [r7, #14]
 8005536:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800553a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	889b      	ldrh	r3, [r3, #4]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	b29a      	uxth	r2, r3
 8005544:	89fb      	ldrh	r3, [r7, #14]
 8005546:	4313      	orrs	r3, r2
 8005548:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 800554a:	89bb      	ldrh	r3, [r7, #12]
 800554c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005550:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8005552:	89bb      	ldrh	r3, [r7, #12]
 8005554:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005558:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	899b      	ldrh	r3, [r3, #12]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	b29a      	uxth	r2, r3
 8005562:	89bb      	ldrh	r3, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	89db      	ldrh	r3, [r3, #14]
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	b29a      	uxth	r2, r3
 8005570:	89bb      	ldrh	r3, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	89ba      	ldrh	r2, [r7, #12]
 800557a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	897a      	ldrh	r2, [r7, #10]
 8005580:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	88da      	ldrh	r2, [r3, #6]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	89fa      	ldrh	r2, [r7, #14]
 800558e:	841a      	strh	r2, [r3, #32]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40013400 	.word	0x40013400

080055a4 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	81bb      	strh	r3, [r7, #12]
 80055b2:	2300      	movs	r3, #0
 80055b4:	817b      	strh	r3, [r7, #10]
 80055b6:	2300      	movs	r3, #0
 80055b8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8c1b      	ldrh	r3, [r3, #32]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8c1b      	ldrh	r3, [r3, #32]
 80055ce:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	889b      	ldrh	r3, [r3, #4]
 80055d4:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	8b9b      	ldrh	r3, [r3, #28]
 80055da:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 80055dc:	89bb      	ldrh	r3, [r7, #12]
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055e2:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80055e4:	89bb      	ldrh	r3, [r7, #12]
 80055e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ea:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	89bb      	ldrh	r3, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80055fa:	897b      	ldrh	r3, [r7, #10]
 80055fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005600:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	891b      	ldrh	r3, [r3, #8]
 8005606:	031b      	lsls	r3, r3, #12
 8005608:	b29a      	uxth	r2, r3
 800560a:	897b      	ldrh	r3, [r7, #10]
 800560c:	4313      	orrs	r3, r2
 800560e:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	885b      	ldrh	r3, [r3, #2]
 8005614:	031b      	lsls	r3, r3, #12
 8005616:	b29a      	uxth	r2, r3
 8005618:	897b      	ldrh	r3, [r7, #10]
 800561a:	4313      	orrs	r3, r2
 800561c:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a12      	ldr	r2, [pc, #72]	@ (800566c <TIM_OC4Init+0xc8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_OC4Init+0x8a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a11      	ldr	r2, [pc, #68]	@ (8005670 <TIM_OC4Init+0xcc>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d10a      	bne.n	8005644 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 800562e:	89fb      	ldrh	r3, [r7, #14]
 8005630:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005634:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	899b      	ldrh	r3, [r3, #12]
 800563a:	019b      	lsls	r3, r3, #6
 800563c:	b29a      	uxth	r2, r3
 800563e:	89fb      	ldrh	r3, [r7, #14]
 8005640:	4313      	orrs	r3, r2
 8005642:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	89fa      	ldrh	r2, [r7, #14]
 8005648:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	89ba      	ldrh	r2, [r7, #12]
 800564e:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	88da      	ldrh	r2, [r3, #6]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	897a      	ldrh	r2, [r7, #10]
 800565e:	841a      	strh	r2, [r3, #32]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40013400 	.word	0x40013400

08005674 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d008      	beq.n	8005698 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8005696:	e007      	b.n	80056a8 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	801a      	strh	r2, [r3, #0]
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	891b      	ldrh	r3, [r3, #8]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f023 0307 	bic.w	r3, r3, #7
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	811a      	strh	r2, [r3, #8]
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	807b      	strh	r3, [r7, #2]
 80056e0:	4613      	mov	r3, r2
 80056e2:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	887a      	ldrh	r2, [r7, #2]
 80056e8:	851a      	strh	r2, [r3, #40]	@ 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	883a      	ldrh	r2, [r7, #0]
 80056ee:	829a      	strh	r2, [r3, #20]
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr

080056fa <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b085      	sub	sp, #20
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	460b      	mov	r3, r1
 8005704:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8005710:	89fb      	ldrh	r3, [r7, #14]
 8005712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005716:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8005718:	89fa      	ldrh	r2, [r7, #14]
 800571a:	887b      	ldrh	r3, [r7, #2]
 800571c:	4313      	orrs	r3, r2
 800571e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	89fa      	ldrh	r2, [r7, #14]
 8005724:	801a      	strh	r2, [r3, #0]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr

08005730 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	807b      	strh	r3, [r7, #2]
 800573c:	4613      	mov	r3, r2
 800573e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
 8005744:	887b      	ldrh	r3, [r7, #2]
 8005746:	2201      	movs	r2, #1
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8c1b      	ldrh	r3, [r3, #32]
 8005752:	b29a      	uxth	r2, r3
 8005754:	89fb      	ldrh	r3, [r7, #14]
 8005756:	43db      	mvns	r3, r3
 8005758:	b29b      	uxth	r3, r3
 800575a:	4013      	ands	r3, r2
 800575c:	b29a      	uxth	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8c1b      	ldrh	r3, [r3, #32]
 8005766:	b29a      	uxth	r2, r3
 8005768:	8839      	ldrh	r1, [r7, #0]
 800576a:	887b      	ldrh	r3, [r7, #2]
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	b29b      	uxth	r3, r3
 8005772:	4313      	orrs	r3, r2
 8005774:	b29a      	uxth	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	841a      	strh	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	887a      	ldrh	r2, [r7, #2]
 80057b0:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	887a      	ldrh	r2, [r7, #2]
 80057cc:	871a      	strh	r2, [r3, #56]	@ 0x38
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
	...

08005814 <USART_Init>:
 *         that contains the configuration information for the specified USART
 *         peripheral.
 * @retval None
 */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08c      	sub	sp, #48	@ 0x30
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0x00, apbclock = 0x00;
 800581e:	2300      	movs	r3, #0
 8005820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005822:	2300      	movs	r3, #0
 8005824:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t integerdivider = 0x00;
 8005826:	2300      	movs	r3, #0
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t fractionaldivider = 0x00;
 800582a:	2300      	movs	r3, #0
 800582c:	623b      	str	r3, [r7, #32]
	uint32_t usartxbase = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
	if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
	{
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t)USARTx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	61fb      	str	r3, [r7, #28]

	/*---------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = USARTx->CR2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8a1b      	ldrh	r3, [r3, #16]
 800583a:	b29b      	uxth	r3, r3
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Clear STOP[13:12] bits */
	tmpreg &= CR2_STOP_CLEAR_Mask;
 800583e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005840:	f64c 73ff 	movw	r3, #53247	@ 0xcfff
 8005844:	4013      	ands	r3, r2
 8005846:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
	/* Set STOP[13:12] bits according to USART_StopBits value */
	tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	88db      	ldrh	r3, [r3, #6]
 800584c:	461a      	mov	r2, r3
 800584e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005850:	4313      	orrs	r3, r2
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Write to USART CR2 */
	USARTx->CR2 = (uint16_t)tmpreg;
 8005854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	821a      	strh	r2, [r3, #16]

	/*---------------------------- USART CR1 Configuration -----------------------*/
	tmpreg = USARTx->CR1;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	899b      	ldrh	r3, [r3, #12]
 8005860:	b29b      	uxth	r3, r3
 8005862:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Clear M, PCE, PS, TE and RE bits */
	tmpreg &= CR1_CLEAR_Mask;
 8005864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005866:	f64e 13f3 	movw	r3, #59891	@ 0xe9f3
 800586a:	4013      	ands	r3, r2
 800586c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Configure the USART Word Length, Parity and mode ----------------------- */
	/* Set the M bits according to USART_WordLength value */
	/* Set PCE and PS bits according to USART_Parity value */
	/* Set TE and RE bits according to USART_Mode value */
	tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	889a      	ldrh	r2, [r3, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	891b      	ldrh	r3, [r3, #8]
 8005876:	4313      	orrs	r3, r2
 8005878:	b29a      	uxth	r2, r3
			USART_InitStruct->USART_Mode;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	895b      	ldrh	r3, [r3, #10]
	tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800587e:	4313      	orrs	r3, r2
 8005880:	b29b      	uxth	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	4313      	orrs	r3, r2
 8005888:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Write to USART CR1 */
	USARTx->CR1 = (uint16_t)tmpreg;
 800588a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588c:	b29a      	uxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	819a      	strh	r2, [r3, #12]

	/*---------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = USARTx->CR3;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8a9b      	ldrh	r3, [r3, #20]
 8005896:	b29b      	uxth	r3, r3
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Clear CTSE and RTSE bits */
	tmpreg &= CR3_CLEAR_Mask;
 800589a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800589c:	f64f 43ff 	movw	r3, #64767	@ 0xfcff
 80058a0:	4013      	ands	r3, r2
 80058a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Configure the USART HFC -------------------------------------------------*/
	/* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
	tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	899b      	ldrh	r3, [r3, #12]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ac:	4313      	orrs	r3, r2
 80058ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Write to USART CR3 */
	USARTx->CR3 = (uint16_t)tmpreg;
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	829a      	strh	r2, [r3, #20]

	/*---------------------------- USART BRR Configuration -----------------------*/
	/* Configure the USART Baud Rate -------------------------------------------*/
	RCC_GetClocksFreq(&RCC_ClocksStatus);
 80058b8:	f107 0308 	add.w	r3, r7, #8
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fb05 	bl	8004ecc <RCC_GetClocksFreq>
	if (usartxbase == USART1_BASE)
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005980 <USART_Init+0x16c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d102      	bne.n	80058d0 <USART_Init+0xbc>
	{
		apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ce:	e001      	b.n	80058d4 <USART_Init+0xc0>
	}
	else
	{
		apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	899b      	ldrh	r3, [r3, #12]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	b21b      	sxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	da0c      	bge.n	80058fa <USART_Init+0xe6>
	{
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
 80058e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009a      	lsls	r2, r3, #2
 80058ea:	441a      	add	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f8:	e00b      	b.n	8005912 <USART_Init+0xfe>
	}
	else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
 80058fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009a      	lsls	r2, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	tmpreg = (integerdivider / 100) << 4;
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	4a1b      	ldr	r2, [pc, #108]	@ (8005984 <USART_Init+0x170>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Determine the fractional part */
	fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8005920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	2264      	movs	r2, #100	@ 0x64
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	623b      	str	r3, [r7, #32]

	/* Implement the fractional part in the register */
	if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	899b      	ldrh	r3, [r3, #12]
 8005934:	b29b      	uxth	r3, r3
 8005936:	b21b      	sxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	da0c      	bge.n	8005956 <USART_Init+0x142>
	{
		tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	3332      	adds	r3, #50	@ 0x32
 8005942:	4a10      	ldr	r2, [pc, #64]	@ (8005984 <USART_Init+0x170>)
 8005944:	fba2 2303 	umull	r2, r3, r2, r3
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005950:	4313      	orrs	r3, r2
 8005952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005954:	e00b      	b.n	800596e <USART_Init+0x15a>
	}
	else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
	{
		tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	3332      	adds	r3, #50	@ 0x32
 800595c:	4a09      	ldr	r2, [pc, #36]	@ (8005984 <USART_Init+0x170>)
 800595e:	fba2 2303 	umull	r2, r3, r2, r3
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800596a:	4313      	orrs	r3, r2
 800596c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	/* Write to USART BRR */
	USARTx->BRR = (uint16_t)tmpreg;
 800596e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	811a      	strh	r2, [r3, #8]
}
 8005976:	bf00      	nop
 8005978:	3730      	adds	r7, #48	@ 0x30
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40013800 	.word	0x40013800
 8005984:	51eb851f 	.word	0x51eb851f

08005988 <USART_StructInit>:
 * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 *         which will be initialized.
 * @retval None
 */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	/* USART_InitStruct members default value */
	USART_InitStruct->USART_BaudRate = 9600;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005996:	601a      	str	r2, [r3, #0]
	USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	809a      	strh	r2, [r3, #4]
	USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	80da      	strh	r2, [r3, #6]
	USART_InitStruct->USART_Parity = USART_Parity_No ;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	811a      	strh	r2, [r3, #8]
	USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	220c      	movs	r2, #12
 80059ae:	815a      	strh	r2, [r3, #10]
	USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	819a      	strh	r2, [r3, #12]
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <USART_Cmd>:
 * @param  NewState: new state of the USARTx peripheral.
 *         This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTx));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE)
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d008      	beq.n	80059e4 <USART_Cmd+0x24>
	{
		/* Enable the selected USART by setting the UE bit in the CR1 register */
		USARTx->CR1 |= CR1_UE_Set;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	899b      	ldrh	r3, [r3, #12]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80059dc:	b29a      	uxth	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	819a      	strh	r2, [r3, #12]
	else
	{
		/* Disable the selected USART by clearing the UE bit in the CR1 register */
		USARTx->CR1 &= CR1_UE_Reset;
	}
}
 80059e2:	e007      	b.n	80059f4 <USART_Cmd+0x34>
		USARTx->CR1 &= CR1_UE_Reset;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	899b      	ldrh	r3, [r3, #12]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	819a      	strh	r2, [r3, #12]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr

080059fe <USART_ITConfig>:
 * @param  NewState: new state of the specified USARTx interrupts.
 *   This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b087      	sub	sp, #28
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	807b      	strh	r3, [r7, #2]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	707b      	strb	r3, [r7, #1]
	uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
	uint32_t usartxbase = 0x00;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
	if (USART_IT == USART_IT_CTS)
	{
		assert_param(IS_USART_123_PERIPH(USARTx));
	}

	usartxbase = (uint32_t)USARTx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	617b      	str	r3, [r7, #20]

	/* Get the USART register index */
	usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005a22:	887b      	ldrh	r3, [r7, #2]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	613b      	str	r3, [r7, #16]

	/* Get the interrupt position */
	itpos = USART_IT & IT_Mask;
 8005a2c:	887b      	ldrh	r3, [r7, #2]
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	60fb      	str	r3, [r7, #12]
	itmask = (((uint32_t)0x01) << itpos);
 8005a34:	2201      	movs	r2, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	60bb      	str	r3, [r7, #8]

	if (usartreg == 0x01) /* The IT is in CR1 register */
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d103      	bne.n	8005a4c <USART_ITConfig+0x4e>
	{
		usartxbase += 0x0C;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	330c      	adds	r3, #12
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e009      	b.n	8005a60 <USART_ITConfig+0x62>
	}
	else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d103      	bne.n	8005a5a <USART_ITConfig+0x5c>
	{
		usartxbase += 0x10;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	3310      	adds	r3, #16
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e002      	b.n	8005a60 <USART_ITConfig+0x62>
	}
	else /* The IT is in CR3 register */
	{
		usartxbase += 0x14;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	617b      	str	r3, [r7, #20]
	}
	if (NewState != DISABLE)
 8005a60:	787b      	ldrb	r3, [r7, #1]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d006      	beq.n	8005a74 <USART_ITConfig+0x76>
	{
		*(__IO uint32_t*)usartxbase  |= itmask;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	6819      	ldr	r1, [r3, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*(__IO uint32_t*)usartxbase &= ~itmask;
	}
}
 8005a72:	e006      	b.n	8005a82 <USART_ITConfig+0x84>
		*(__IO uint32_t*)usartxbase &= ~itmask;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	6819      	ldr	r1, [r3, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	400a      	ands	r2, r1
 8005a80:	601a      	str	r2, [r3, #0]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr

08005a8c <USART_ReceiveData>:
 *   This parameter can be one of the following values:
 *   USART1, USART2, USART3, UART4 or UART5.
 * @retval The received data.
 */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	/* Receive Data */
	/* Check if the data new or not */

	// return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);

	if(((USARTx->SR >> 5) & 1))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d006      	beq.n	8005ab4 <USART_ReceiveData+0x28>
	{
		return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	889b      	ldrh	r3, [r3, #4]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	e000      	b.n	8005ab6 <USART_ReceiveData+0x2a>
	}else{
		return 0;
 8005ab4:	2300      	movs	r3, #0
	}

}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <main>:




int main(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0

	/* ----- Initiate System ----- */
   	 SysInit();
 8005ac4:	f7fc f98e 	bl	8001de4 <SysInit>

	/* ------- Initiate AEB ------ */
     vAEB_Init();
 8005ac8:	f7fb facc 	bl	8001064 <vAEB_Init>

	/* ------ Initiate ACC --------*/
     vACC_Init();
 8005acc:	f7fb f9bc 	bl	8000e48 <vACC_Init>

	/* -- Initiate Lane Keeping -- */
	 Error_type_t_LKASInit();
 8005ad0:	f7fc f86e 	bl	8001bb0 <Error_type_t_LKASInit>

	/*----- Initiate Blind Spot -- */
	 BS_ReturnTypeBS_Init();
 8005ad4:	f7fb fcfe 	bl	80014d4 <BS_ReturnTypeBS_Init>

	/* ----- Start Schaduler ----- */
	vTaskStartScheduler();
 8005ad8:	f7fd fbbc 	bl	8003254 <vTaskStartScheduler>
	while(1);
 8005adc:	bf00      	nop
 8005ade:	e7fd      	b.n	8005adc <main+0x1c>

08005ae0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0

}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005af0:	bf00      	nop
 8005af2:	e7fd      	b.n	8005af0 <HardFault_Handler+0x4>

08005af4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <MemManage_Handler+0x4>

08005afc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005b00:	bf00      	nop
 8005b02:	e7fd      	b.n	8005b00 <BusFault_Handler+0x4>

08005b04 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <UsageFault_Handler+0x4>

08005b0c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
}
 8005b10:	bf00      	nop
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e00a      	b.n	8005b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005b2a:	f3af 8000 	nop.w
 8005b2e:	4601      	mov	r1, r0
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	60ba      	str	r2, [r7, #8]
 8005b36:	b2ca      	uxtb	r2, r1
 8005b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	dbf0      	blt.n	8005b2a <_read+0x12>
  }

  return len;
 8005b48:	687b      	ldr	r3, [r7, #4]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b086      	sub	sp, #24
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e009      	b.n	8005b78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	60ba      	str	r2, [r7, #8]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	3301      	adds	r3, #1
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	dbf1      	blt.n	8005b64 <_write+0x12>
  }
  return len;
 8005b80:	687b      	ldr	r3, [r7, #4]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_close>:

int _close(int file)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005bb0:	605a      	str	r2, [r3, #4]
  return 0;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <_isatty>:

int _isatty(int file)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005bc6:	2301      	movs	r3, #1
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr

08005bd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr
	...

08005bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bf4:	4a14      	ldr	r2, [pc, #80]	@ (8005c48 <_sbrk+0x5c>)
 8005bf6:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <_sbrk+0x60>)
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c00:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <_sbrk+0x64>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c08:	4b11      	ldr	r3, [pc, #68]	@ (8005c50 <_sbrk+0x64>)
 8005c0a:	4a12      	ldr	r2, [pc, #72]	@ (8005c54 <_sbrk+0x68>)
 8005c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c0e:	4b10      	ldr	r3, [pc, #64]	@ (8005c50 <_sbrk+0x64>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d207      	bcs.n	8005c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c1c:	f000 f9e6 	bl	8005fec <__errno>
 8005c20:	4603      	mov	r3, r0
 8005c22:	220c      	movs	r2, #12
 8005c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c26:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2a:	e009      	b.n	8005c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c2c:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <_sbrk+0x64>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c32:	4b07      	ldr	r3, [pc, #28]	@ (8005c50 <_sbrk+0x64>)
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4413      	add	r3, r2
 8005c3a:	4a05      	ldr	r2, [pc, #20]	@ (8005c50 <_sbrk+0x64>)
 8005c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20005000 	.word	0x20005000
 8005c4c:	00000400 	.word	0x00000400
 8005c50:	200022d8 	.word	0x200022d8
 8005c54:	20002428 	.word	0x20002428

08005c58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c5c:	4b15      	ldr	r3, [pc, #84]	@ (8005cb4 <SystemInit+0x5c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a14      	ldr	r2, [pc, #80]	@ (8005cb4 <SystemInit+0x5c>)
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8005c68:	4b12      	ldr	r3, [pc, #72]	@ (8005cb4 <SystemInit+0x5c>)
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	4911      	ldr	r1, [pc, #68]	@ (8005cb4 <SystemInit+0x5c>)
 8005c6e:	4b12      	ldr	r3, [pc, #72]	@ (8005cb8 <SystemInit+0x60>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005c74:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb4 <SystemInit+0x5c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb4 <SystemInit+0x5c>)
 8005c7a:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8005c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c82:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <SystemInit+0x5c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb4 <SystemInit+0x5c>)
 8005c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c8e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005c90:	4b08      	ldr	r3, [pc, #32]	@ (8005cb4 <SystemInit+0x5c>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a07      	ldr	r2, [pc, #28]	@ (8005cb4 <SystemInit+0x5c>)
 8005c96:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8005c9a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8005c9c:	4b05      	ldr	r3, [pc, #20]	@ (8005cb4 <SystemInit+0x5c>)
 8005c9e:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8005ca2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8005ca4:	f000 f80c 	bl	8005cc0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005ca8:	4b04      	ldr	r3, [pc, #16]	@ (8005cbc <SystemInit+0x64>)
 8005caa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005cae:	609a      	str	r2, [r3, #8]
#endif 
}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	f8ff0000 	.word	0xf8ff0000
 8005cbc:	e000ed00 	.word	0xe000ed00

08005cc0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8005cc4:	bf00      	nop
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005ccc:	480d      	ldr	r0, [pc, #52]	@ (8005d04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005cce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005cd0:	f7ff ffc2 	bl	8005c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005cd4:	480c      	ldr	r0, [pc, #48]	@ (8005d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8005cd6:	490d      	ldr	r1, [pc, #52]	@ (8005d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8005d10 <LoopForever+0xe>)
  movs r3, #0
 8005cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005cdc:	e002      	b.n	8005ce4 <LoopCopyDataInit>

08005cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ce2:	3304      	adds	r3, #4

08005ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ce8:	d3f9      	bcc.n	8005cde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cea:	4a0a      	ldr	r2, [pc, #40]	@ (8005d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005cec:	4c0a      	ldr	r4, [pc, #40]	@ (8005d18 <LoopForever+0x16>)
  movs r3, #0
 8005cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005cf0:	e001      	b.n	8005cf6 <LoopFillZerobss>

08005cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005cf4:	3204      	adds	r2, #4

08005cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cf8:	d3fb      	bcc.n	8005cf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005cfa:	f000 f97d 	bl	8005ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005cfe:	f7ff fedf 	bl	8005ac0 <main>

08005d02 <LoopForever>:

LoopForever:
  b LoopForever
 8005d02:	e7fe      	b.n	8005d02 <LoopForever>
  ldr   r0, =_estack
 8005d04:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d0c:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8005d10:	08006ce8 	.word	0x08006ce8
  ldr r2, =_sbss
 8005d14:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8005d18:	20002428 	.word	0x20002428

08005d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d1c:	e7fe      	b.n	8005d1c <ADC1_2_IRQHandler>
	...

08005d20 <std>:
 8005d20:	2300      	movs	r3, #0
 8005d22:	b510      	push	{r4, lr}
 8005d24:	4604      	mov	r4, r0
 8005d26:	e9c0 3300 	strd	r3, r3, [r0]
 8005d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d2e:	6083      	str	r3, [r0, #8]
 8005d30:	8181      	strh	r1, [r0, #12]
 8005d32:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d34:	81c2      	strh	r2, [r0, #14]
 8005d36:	6183      	str	r3, [r0, #24]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	305c      	adds	r0, #92	@ 0x5c
 8005d3e:	f000 f906 	bl	8005f4e <memset>
 8005d42:	4b0d      	ldr	r3, [pc, #52]	@ (8005d78 <std+0x58>)
 8005d44:	6224      	str	r4, [r4, #32]
 8005d46:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d48:	4b0c      	ldr	r3, [pc, #48]	@ (8005d7c <std+0x5c>)
 8005d4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d80 <std+0x60>)
 8005d4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d50:	4b0c      	ldr	r3, [pc, #48]	@ (8005d84 <std+0x64>)
 8005d52:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d54:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <std+0x68>)
 8005d56:	429c      	cmp	r4, r3
 8005d58:	d006      	beq.n	8005d68 <std+0x48>
 8005d5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d5e:	4294      	cmp	r4, r2
 8005d60:	d002      	beq.n	8005d68 <std+0x48>
 8005d62:	33d0      	adds	r3, #208	@ 0xd0
 8005d64:	429c      	cmp	r4, r3
 8005d66:	d105      	bne.n	8005d74 <std+0x54>
 8005d68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d70:	f000 b966 	b.w	8006040 <__retarget_lock_init_recursive>
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	bf00      	nop
 8005d78:	08005ec9 	.word	0x08005ec9
 8005d7c:	08005eeb 	.word	0x08005eeb
 8005d80:	08005f23 	.word	0x08005f23
 8005d84:	08005f47 	.word	0x08005f47
 8005d88:	200022dc 	.word	0x200022dc

08005d8c <stdio_exit_handler>:
 8005d8c:	4a02      	ldr	r2, [pc, #8]	@ (8005d98 <stdio_exit_handler+0xc>)
 8005d8e:	4903      	ldr	r1, [pc, #12]	@ (8005d9c <stdio_exit_handler+0x10>)
 8005d90:	4803      	ldr	r0, [pc, #12]	@ (8005da0 <stdio_exit_handler+0x14>)
 8005d92:	f000 b869 	b.w	8005e68 <_fwalk_sglue>
 8005d96:	bf00      	nop
 8005d98:	200000dc 	.word	0x200000dc
 8005d9c:	080068f5 	.word	0x080068f5
 8005da0:	200000ec 	.word	0x200000ec

08005da4 <cleanup_stdio>:
 8005da4:	6841      	ldr	r1, [r0, #4]
 8005da6:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd8 <cleanup_stdio+0x34>)
 8005da8:	b510      	push	{r4, lr}
 8005daa:	4299      	cmp	r1, r3
 8005dac:	4604      	mov	r4, r0
 8005dae:	d001      	beq.n	8005db4 <cleanup_stdio+0x10>
 8005db0:	f000 fda0 	bl	80068f4 <_fflush_r>
 8005db4:	68a1      	ldr	r1, [r4, #8]
 8005db6:	4b09      	ldr	r3, [pc, #36]	@ (8005ddc <cleanup_stdio+0x38>)
 8005db8:	4299      	cmp	r1, r3
 8005dba:	d002      	beq.n	8005dc2 <cleanup_stdio+0x1e>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 fd99 	bl	80068f4 <_fflush_r>
 8005dc2:	68e1      	ldr	r1, [r4, #12]
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <cleanup_stdio+0x3c>)
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	d004      	beq.n	8005dd4 <cleanup_stdio+0x30>
 8005dca:	4620      	mov	r0, r4
 8005dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd0:	f000 bd90 	b.w	80068f4 <_fflush_r>
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200022dc 	.word	0x200022dc
 8005ddc:	20002344 	.word	0x20002344
 8005de0:	200023ac 	.word	0x200023ac

08005de4 <global_stdio_init.part.0>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <global_stdio_init.part.0+0x30>)
 8005de8:	4c0b      	ldr	r4, [pc, #44]	@ (8005e18 <global_stdio_init.part.0+0x34>)
 8005dea:	4a0c      	ldr	r2, [pc, #48]	@ (8005e1c <global_stdio_init.part.0+0x38>)
 8005dec:	4620      	mov	r0, r4
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	2104      	movs	r1, #4
 8005df2:	2200      	movs	r2, #0
 8005df4:	f7ff ff94 	bl	8005d20 <std>
 8005df8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	2109      	movs	r1, #9
 8005e00:	f7ff ff8e 	bl	8005d20 <std>
 8005e04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e08:	2202      	movs	r2, #2
 8005e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0e:	2112      	movs	r1, #18
 8005e10:	f7ff bf86 	b.w	8005d20 <std>
 8005e14:	20002414 	.word	0x20002414
 8005e18:	200022dc 	.word	0x200022dc
 8005e1c:	08005d8d 	.word	0x08005d8d

08005e20 <__sfp_lock_acquire>:
 8005e20:	4801      	ldr	r0, [pc, #4]	@ (8005e28 <__sfp_lock_acquire+0x8>)
 8005e22:	f000 b90e 	b.w	8006042 <__retarget_lock_acquire_recursive>
 8005e26:	bf00      	nop
 8005e28:	2000241d 	.word	0x2000241d

08005e2c <__sfp_lock_release>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	@ (8005e34 <__sfp_lock_release+0x8>)
 8005e2e:	f000 b909 	b.w	8006044 <__retarget_lock_release_recursive>
 8005e32:	bf00      	nop
 8005e34:	2000241d 	.word	0x2000241d

08005e38 <__sinit>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	f7ff fff0 	bl	8005e20 <__sfp_lock_acquire>
 8005e40:	6a23      	ldr	r3, [r4, #32]
 8005e42:	b11b      	cbz	r3, 8005e4c <__sinit+0x14>
 8005e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e48:	f7ff bff0 	b.w	8005e2c <__sfp_lock_release>
 8005e4c:	4b04      	ldr	r3, [pc, #16]	@ (8005e60 <__sinit+0x28>)
 8005e4e:	6223      	str	r3, [r4, #32]
 8005e50:	4b04      	ldr	r3, [pc, #16]	@ (8005e64 <__sinit+0x2c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f5      	bne.n	8005e44 <__sinit+0xc>
 8005e58:	f7ff ffc4 	bl	8005de4 <global_stdio_init.part.0>
 8005e5c:	e7f2      	b.n	8005e44 <__sinit+0xc>
 8005e5e:	bf00      	nop
 8005e60:	08005da5 	.word	0x08005da5
 8005e64:	20002414 	.word	0x20002414

08005e68 <_fwalk_sglue>:
 8005e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	4688      	mov	r8, r1
 8005e70:	4614      	mov	r4, r2
 8005e72:	2600      	movs	r6, #0
 8005e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e78:	f1b9 0901 	subs.w	r9, r9, #1
 8005e7c:	d505      	bpl.n	8005e8a <_fwalk_sglue+0x22>
 8005e7e:	6824      	ldr	r4, [r4, #0]
 8005e80:	2c00      	cmp	r4, #0
 8005e82:	d1f7      	bne.n	8005e74 <_fwalk_sglue+0xc>
 8005e84:	4630      	mov	r0, r6
 8005e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e8a:	89ab      	ldrh	r3, [r5, #12]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d907      	bls.n	8005ea0 <_fwalk_sglue+0x38>
 8005e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e94:	3301      	adds	r3, #1
 8005e96:	d003      	beq.n	8005ea0 <_fwalk_sglue+0x38>
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c0      	blx	r8
 8005e9e:	4306      	orrs	r6, r0
 8005ea0:	3568      	adds	r5, #104	@ 0x68
 8005ea2:	e7e9      	b.n	8005e78 <_fwalk_sglue+0x10>

08005ea4 <iprintf>:
 8005ea4:	b40f      	push	{r0, r1, r2, r3}
 8005ea6:	b507      	push	{r0, r1, r2, lr}
 8005ea8:	4906      	ldr	r1, [pc, #24]	@ (8005ec4 <iprintf+0x20>)
 8005eaa:	ab04      	add	r3, sp, #16
 8005eac:	6808      	ldr	r0, [r1, #0]
 8005eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eb2:	6881      	ldr	r1, [r0, #8]
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	f000 f9f3 	bl	80062a0 <_vfiprintf_r>
 8005eba:	b003      	add	sp, #12
 8005ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ec0:	b004      	add	sp, #16
 8005ec2:	4770      	bx	lr
 8005ec4:	200000e8 	.word	0x200000e8

08005ec8 <__sread>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	460c      	mov	r4, r1
 8005ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed0:	f000 f868 	bl	8005fa4 <_read_r>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	bfab      	itete	ge
 8005ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005eda:	89a3      	ldrhlt	r3, [r4, #12]
 8005edc:	181b      	addge	r3, r3, r0
 8005ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ee2:	bfac      	ite	ge
 8005ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ee6:	81a3      	strhlt	r3, [r4, #12]
 8005ee8:	bd10      	pop	{r4, pc}

08005eea <__swrite>:
 8005eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eee:	461f      	mov	r7, r3
 8005ef0:	898b      	ldrh	r3, [r1, #12]
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	05db      	lsls	r3, r3, #23
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	4616      	mov	r6, r2
 8005efa:	d505      	bpl.n	8005f08 <__swrite+0x1e>
 8005efc:	2302      	movs	r3, #2
 8005efe:	2200      	movs	r2, #0
 8005f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f04:	f000 f83c 	bl	8005f80 <_lseek_r>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	4632      	mov	r2, r6
 8005f0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	4628      	mov	r0, r5
 8005f14:	463b      	mov	r3, r7
 8005f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1e:	f000 b853 	b.w	8005fc8 <_write_r>

08005f22 <__sseek>:
 8005f22:	b510      	push	{r4, lr}
 8005f24:	460c      	mov	r4, r1
 8005f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2a:	f000 f829 	bl	8005f80 <_lseek_r>
 8005f2e:	1c43      	adds	r3, r0, #1
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	bf15      	itete	ne
 8005f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f3e:	81a3      	strheq	r3, [r4, #12]
 8005f40:	bf18      	it	ne
 8005f42:	81a3      	strhne	r3, [r4, #12]
 8005f44:	bd10      	pop	{r4, pc}

08005f46 <__sclose>:
 8005f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4a:	f000 b809 	b.w	8005f60 <_close_r>

08005f4e <memset>:
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4402      	add	r2, r0
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d100      	bne.n	8005f58 <memset+0xa>
 8005f56:	4770      	bx	lr
 8005f58:	f803 1b01 	strb.w	r1, [r3], #1
 8005f5c:	e7f9      	b.n	8005f52 <memset+0x4>
	...

08005f60 <_close_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	2300      	movs	r3, #0
 8005f64:	4d05      	ldr	r5, [pc, #20]	@ (8005f7c <_close_r+0x1c>)
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7ff fe0d 	bl	8005b8a <_close>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_close_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_close_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20002418 	.word	0x20002418

08005f80 <_lseek_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4d05      	ldr	r5, [pc, #20]	@ (8005fa0 <_lseek_r+0x20>)
 8005f8c:	602a      	str	r2, [r5, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f7ff fe1f 	bl	8005bd2 <_lseek>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_lseek_r+0x1e>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_lseek_r+0x1e>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	20002418 	.word	0x20002418

08005fa4 <_read_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	2200      	movs	r2, #0
 8005fae:	4d05      	ldr	r5, [pc, #20]	@ (8005fc4 <_read_r+0x20>)
 8005fb0:	602a      	str	r2, [r5, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f7ff fdb0 	bl	8005b18 <_read>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_read_r+0x1e>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_read_r+0x1e>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	20002418 	.word	0x20002418

08005fc8 <_write_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4608      	mov	r0, r1
 8005fce:	4611      	mov	r1, r2
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4d05      	ldr	r5, [pc, #20]	@ (8005fe8 <_write_r+0x20>)
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f7ff fdbb 	bl	8005b52 <_write>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_write_r+0x1e>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_write_r+0x1e>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20002418 	.word	0x20002418

08005fec <__errno>:
 8005fec:	4b01      	ldr	r3, [pc, #4]	@ (8005ff4 <__errno+0x8>)
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	200000e8 	.word	0x200000e8

08005ff8 <__libc_init_array>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	4d0c      	ldr	r5, [pc, #48]	@ (8006030 <__libc_init_array+0x38>)
 8005ffe:	4c0d      	ldr	r4, [pc, #52]	@ (8006034 <__libc_init_array+0x3c>)
 8006000:	1b64      	subs	r4, r4, r5
 8006002:	10a4      	asrs	r4, r4, #2
 8006004:	42a6      	cmp	r6, r4
 8006006:	d109      	bne.n	800601c <__libc_init_array+0x24>
 8006008:	f000 fdf6 	bl	8006bf8 <_init>
 800600c:	2600      	movs	r6, #0
 800600e:	4d0a      	ldr	r5, [pc, #40]	@ (8006038 <__libc_init_array+0x40>)
 8006010:	4c0a      	ldr	r4, [pc, #40]	@ (800603c <__libc_init_array+0x44>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	42a6      	cmp	r6, r4
 8006018:	d105      	bne.n	8006026 <__libc_init_array+0x2e>
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006020:	4798      	blx	r3
 8006022:	3601      	adds	r6, #1
 8006024:	e7ee      	b.n	8006004 <__libc_init_array+0xc>
 8006026:	f855 3b04 	ldr.w	r3, [r5], #4
 800602a:	4798      	blx	r3
 800602c:	3601      	adds	r6, #1
 800602e:	e7f2      	b.n	8006016 <__libc_init_array+0x1e>
 8006030:	08006ce0 	.word	0x08006ce0
 8006034:	08006ce0 	.word	0x08006ce0
 8006038:	08006ce0 	.word	0x08006ce0
 800603c:	08006ce4 	.word	0x08006ce4

08006040 <__retarget_lock_init_recursive>:
 8006040:	4770      	bx	lr

08006042 <__retarget_lock_acquire_recursive>:
 8006042:	4770      	bx	lr

08006044 <__retarget_lock_release_recursive>:
 8006044:	4770      	bx	lr

08006046 <memcpy>:
 8006046:	440a      	add	r2, r1
 8006048:	4291      	cmp	r1, r2
 800604a:	f100 33ff 	add.w	r3, r0, #4294967295
 800604e:	d100      	bne.n	8006052 <memcpy+0xc>
 8006050:	4770      	bx	lr
 8006052:	b510      	push	{r4, lr}
 8006054:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006058:	4291      	cmp	r1, r2
 800605a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800605e:	d1f9      	bne.n	8006054 <memcpy+0xe>
 8006060:	bd10      	pop	{r4, pc}
	...

08006064 <_free_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4605      	mov	r5, r0
 8006068:	2900      	cmp	r1, #0
 800606a:	d040      	beq.n	80060ee <_free_r+0x8a>
 800606c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006070:	1f0c      	subs	r4, r1, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	bfb8      	it	lt
 8006076:	18e4      	addlt	r4, r4, r3
 8006078:	f000 f8de 	bl	8006238 <__malloc_lock>
 800607c:	4a1c      	ldr	r2, [pc, #112]	@ (80060f0 <_free_r+0x8c>)
 800607e:	6813      	ldr	r3, [r2, #0]
 8006080:	b933      	cbnz	r3, 8006090 <_free_r+0x2c>
 8006082:	6063      	str	r3, [r4, #4]
 8006084:	6014      	str	r4, [r2, #0]
 8006086:	4628      	mov	r0, r5
 8006088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800608c:	f000 b8da 	b.w	8006244 <__malloc_unlock>
 8006090:	42a3      	cmp	r3, r4
 8006092:	d908      	bls.n	80060a6 <_free_r+0x42>
 8006094:	6820      	ldr	r0, [r4, #0]
 8006096:	1821      	adds	r1, r4, r0
 8006098:	428b      	cmp	r3, r1
 800609a:	bf01      	itttt	eq
 800609c:	6819      	ldreq	r1, [r3, #0]
 800609e:	685b      	ldreq	r3, [r3, #4]
 80060a0:	1809      	addeq	r1, r1, r0
 80060a2:	6021      	streq	r1, [r4, #0]
 80060a4:	e7ed      	b.n	8006082 <_free_r+0x1e>
 80060a6:	461a      	mov	r2, r3
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	b10b      	cbz	r3, 80060b0 <_free_r+0x4c>
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d9fa      	bls.n	80060a6 <_free_r+0x42>
 80060b0:	6811      	ldr	r1, [r2, #0]
 80060b2:	1850      	adds	r0, r2, r1
 80060b4:	42a0      	cmp	r0, r4
 80060b6:	d10b      	bne.n	80060d0 <_free_r+0x6c>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	4401      	add	r1, r0
 80060bc:	1850      	adds	r0, r2, r1
 80060be:	4283      	cmp	r3, r0
 80060c0:	6011      	str	r1, [r2, #0]
 80060c2:	d1e0      	bne.n	8006086 <_free_r+0x22>
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	4408      	add	r0, r1
 80060ca:	6010      	str	r0, [r2, #0]
 80060cc:	6053      	str	r3, [r2, #4]
 80060ce:	e7da      	b.n	8006086 <_free_r+0x22>
 80060d0:	d902      	bls.n	80060d8 <_free_r+0x74>
 80060d2:	230c      	movs	r3, #12
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	e7d6      	b.n	8006086 <_free_r+0x22>
 80060d8:	6820      	ldr	r0, [r4, #0]
 80060da:	1821      	adds	r1, r4, r0
 80060dc:	428b      	cmp	r3, r1
 80060de:	bf01      	itttt	eq
 80060e0:	6819      	ldreq	r1, [r3, #0]
 80060e2:	685b      	ldreq	r3, [r3, #4]
 80060e4:	1809      	addeq	r1, r1, r0
 80060e6:	6021      	streq	r1, [r4, #0]
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	6054      	str	r4, [r2, #4]
 80060ec:	e7cb      	b.n	8006086 <_free_r+0x22>
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	20002424 	.word	0x20002424

080060f4 <sbrk_aligned>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	4e0f      	ldr	r6, [pc, #60]	@ (8006134 <sbrk_aligned+0x40>)
 80060f8:	460c      	mov	r4, r1
 80060fa:	6831      	ldr	r1, [r6, #0]
 80060fc:	4605      	mov	r5, r0
 80060fe:	b911      	cbnz	r1, 8006106 <sbrk_aligned+0x12>
 8006100:	f000 fcb4 	bl	8006a6c <_sbrk_r>
 8006104:	6030      	str	r0, [r6, #0]
 8006106:	4621      	mov	r1, r4
 8006108:	4628      	mov	r0, r5
 800610a:	f000 fcaf 	bl	8006a6c <_sbrk_r>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d103      	bne.n	800611a <sbrk_aligned+0x26>
 8006112:	f04f 34ff 	mov.w	r4, #4294967295
 8006116:	4620      	mov	r0, r4
 8006118:	bd70      	pop	{r4, r5, r6, pc}
 800611a:	1cc4      	adds	r4, r0, #3
 800611c:	f024 0403 	bic.w	r4, r4, #3
 8006120:	42a0      	cmp	r0, r4
 8006122:	d0f8      	beq.n	8006116 <sbrk_aligned+0x22>
 8006124:	1a21      	subs	r1, r4, r0
 8006126:	4628      	mov	r0, r5
 8006128:	f000 fca0 	bl	8006a6c <_sbrk_r>
 800612c:	3001      	adds	r0, #1
 800612e:	d1f2      	bne.n	8006116 <sbrk_aligned+0x22>
 8006130:	e7ef      	b.n	8006112 <sbrk_aligned+0x1e>
 8006132:	bf00      	nop
 8006134:	20002420 	.word	0x20002420

08006138 <_malloc_r>:
 8006138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800613c:	1ccd      	adds	r5, r1, #3
 800613e:	f025 0503 	bic.w	r5, r5, #3
 8006142:	3508      	adds	r5, #8
 8006144:	2d0c      	cmp	r5, #12
 8006146:	bf38      	it	cc
 8006148:	250c      	movcc	r5, #12
 800614a:	2d00      	cmp	r5, #0
 800614c:	4606      	mov	r6, r0
 800614e:	db01      	blt.n	8006154 <_malloc_r+0x1c>
 8006150:	42a9      	cmp	r1, r5
 8006152:	d904      	bls.n	800615e <_malloc_r+0x26>
 8006154:	230c      	movs	r3, #12
 8006156:	6033      	str	r3, [r6, #0]
 8006158:	2000      	movs	r0, #0
 800615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006234 <_malloc_r+0xfc>
 8006162:	f000 f869 	bl	8006238 <__malloc_lock>
 8006166:	f8d8 3000 	ldr.w	r3, [r8]
 800616a:	461c      	mov	r4, r3
 800616c:	bb44      	cbnz	r4, 80061c0 <_malloc_r+0x88>
 800616e:	4629      	mov	r1, r5
 8006170:	4630      	mov	r0, r6
 8006172:	f7ff ffbf 	bl	80060f4 <sbrk_aligned>
 8006176:	1c43      	adds	r3, r0, #1
 8006178:	4604      	mov	r4, r0
 800617a:	d158      	bne.n	800622e <_malloc_r+0xf6>
 800617c:	f8d8 4000 	ldr.w	r4, [r8]
 8006180:	4627      	mov	r7, r4
 8006182:	2f00      	cmp	r7, #0
 8006184:	d143      	bne.n	800620e <_malloc_r+0xd6>
 8006186:	2c00      	cmp	r4, #0
 8006188:	d04b      	beq.n	8006222 <_malloc_r+0xea>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	4639      	mov	r1, r7
 800618e:	4630      	mov	r0, r6
 8006190:	eb04 0903 	add.w	r9, r4, r3
 8006194:	f000 fc6a 	bl	8006a6c <_sbrk_r>
 8006198:	4581      	cmp	r9, r0
 800619a:	d142      	bne.n	8006222 <_malloc_r+0xea>
 800619c:	6821      	ldr	r1, [r4, #0]
 800619e:	4630      	mov	r0, r6
 80061a0:	1a6d      	subs	r5, r5, r1
 80061a2:	4629      	mov	r1, r5
 80061a4:	f7ff ffa6 	bl	80060f4 <sbrk_aligned>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d03a      	beq.n	8006222 <_malloc_r+0xea>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	442b      	add	r3, r5
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	f8d8 3000 	ldr.w	r3, [r8]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	bb62      	cbnz	r2, 8006214 <_malloc_r+0xdc>
 80061ba:	f8c8 7000 	str.w	r7, [r8]
 80061be:	e00f      	b.n	80061e0 <_malloc_r+0xa8>
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	1b52      	subs	r2, r2, r5
 80061c4:	d420      	bmi.n	8006208 <_malloc_r+0xd0>
 80061c6:	2a0b      	cmp	r2, #11
 80061c8:	d917      	bls.n	80061fa <_malloc_r+0xc2>
 80061ca:	1961      	adds	r1, r4, r5
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	6025      	str	r5, [r4, #0]
 80061d0:	bf18      	it	ne
 80061d2:	6059      	strne	r1, [r3, #4]
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	bf08      	it	eq
 80061d8:	f8c8 1000 	streq.w	r1, [r8]
 80061dc:	5162      	str	r2, [r4, r5]
 80061de:	604b      	str	r3, [r1, #4]
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 f82f 	bl	8006244 <__malloc_unlock>
 80061e6:	f104 000b 	add.w	r0, r4, #11
 80061ea:	1d23      	adds	r3, r4, #4
 80061ec:	f020 0007 	bic.w	r0, r0, #7
 80061f0:	1ac2      	subs	r2, r0, r3
 80061f2:	bf1c      	itt	ne
 80061f4:	1a1b      	subne	r3, r3, r0
 80061f6:	50a3      	strne	r3, [r4, r2]
 80061f8:	e7af      	b.n	800615a <_malloc_r+0x22>
 80061fa:	6862      	ldr	r2, [r4, #4]
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	bf0c      	ite	eq
 8006200:	f8c8 2000 	streq.w	r2, [r8]
 8006204:	605a      	strne	r2, [r3, #4]
 8006206:	e7eb      	b.n	80061e0 <_malloc_r+0xa8>
 8006208:	4623      	mov	r3, r4
 800620a:	6864      	ldr	r4, [r4, #4]
 800620c:	e7ae      	b.n	800616c <_malloc_r+0x34>
 800620e:	463c      	mov	r4, r7
 8006210:	687f      	ldr	r7, [r7, #4]
 8006212:	e7b6      	b.n	8006182 <_malloc_r+0x4a>
 8006214:	461a      	mov	r2, r3
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	42a3      	cmp	r3, r4
 800621a:	d1fb      	bne.n	8006214 <_malloc_r+0xdc>
 800621c:	2300      	movs	r3, #0
 800621e:	6053      	str	r3, [r2, #4]
 8006220:	e7de      	b.n	80061e0 <_malloc_r+0xa8>
 8006222:	230c      	movs	r3, #12
 8006224:	4630      	mov	r0, r6
 8006226:	6033      	str	r3, [r6, #0]
 8006228:	f000 f80c 	bl	8006244 <__malloc_unlock>
 800622c:	e794      	b.n	8006158 <_malloc_r+0x20>
 800622e:	6005      	str	r5, [r0, #0]
 8006230:	e7d6      	b.n	80061e0 <_malloc_r+0xa8>
 8006232:	bf00      	nop
 8006234:	20002424 	.word	0x20002424

08006238 <__malloc_lock>:
 8006238:	4801      	ldr	r0, [pc, #4]	@ (8006240 <__malloc_lock+0x8>)
 800623a:	f7ff bf02 	b.w	8006042 <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	2000241c 	.word	0x2000241c

08006244 <__malloc_unlock>:
 8006244:	4801      	ldr	r0, [pc, #4]	@ (800624c <__malloc_unlock+0x8>)
 8006246:	f7ff befd 	b.w	8006044 <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	2000241c 	.word	0x2000241c

08006250 <__sfputc_r>:
 8006250:	6893      	ldr	r3, [r2, #8]
 8006252:	b410      	push	{r4}
 8006254:	3b01      	subs	r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	6093      	str	r3, [r2, #8]
 800625a:	da07      	bge.n	800626c <__sfputc_r+0x1c>
 800625c:	6994      	ldr	r4, [r2, #24]
 800625e:	42a3      	cmp	r3, r4
 8006260:	db01      	blt.n	8006266 <__sfputc_r+0x16>
 8006262:	290a      	cmp	r1, #10
 8006264:	d102      	bne.n	800626c <__sfputc_r+0x1c>
 8006266:	bc10      	pop	{r4}
 8006268:	f000 bb6c 	b.w	8006944 <__swbuf_r>
 800626c:	6813      	ldr	r3, [r2, #0]
 800626e:	1c58      	adds	r0, r3, #1
 8006270:	6010      	str	r0, [r2, #0]
 8006272:	7019      	strb	r1, [r3, #0]
 8006274:	4608      	mov	r0, r1
 8006276:	bc10      	pop	{r4}
 8006278:	4770      	bx	lr

0800627a <__sfputs_r>:
 800627a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	4614      	mov	r4, r2
 8006282:	18d5      	adds	r5, r2, r3
 8006284:	42ac      	cmp	r4, r5
 8006286:	d101      	bne.n	800628c <__sfputs_r+0x12>
 8006288:	2000      	movs	r0, #0
 800628a:	e007      	b.n	800629c <__sfputs_r+0x22>
 800628c:	463a      	mov	r2, r7
 800628e:	4630      	mov	r0, r6
 8006290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006294:	f7ff ffdc 	bl	8006250 <__sfputc_r>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d1f3      	bne.n	8006284 <__sfputs_r+0xa>
 800629c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062a0 <_vfiprintf_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	460d      	mov	r5, r1
 80062a6:	4614      	mov	r4, r2
 80062a8:	4698      	mov	r8, r3
 80062aa:	4606      	mov	r6, r0
 80062ac:	b09d      	sub	sp, #116	@ 0x74
 80062ae:	b118      	cbz	r0, 80062b8 <_vfiprintf_r+0x18>
 80062b0:	6a03      	ldr	r3, [r0, #32]
 80062b2:	b90b      	cbnz	r3, 80062b8 <_vfiprintf_r+0x18>
 80062b4:	f7ff fdc0 	bl	8005e38 <__sinit>
 80062b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062ba:	07d9      	lsls	r1, r3, #31
 80062bc:	d405      	bmi.n	80062ca <_vfiprintf_r+0x2a>
 80062be:	89ab      	ldrh	r3, [r5, #12]
 80062c0:	059a      	lsls	r2, r3, #22
 80062c2:	d402      	bmi.n	80062ca <_vfiprintf_r+0x2a>
 80062c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062c6:	f7ff febc 	bl	8006042 <__retarget_lock_acquire_recursive>
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	071b      	lsls	r3, r3, #28
 80062ce:	d501      	bpl.n	80062d4 <_vfiprintf_r+0x34>
 80062d0:	692b      	ldr	r3, [r5, #16]
 80062d2:	b99b      	cbnz	r3, 80062fc <_vfiprintf_r+0x5c>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4630      	mov	r0, r6
 80062d8:	f000 fb72 	bl	80069c0 <__swsetup_r>
 80062dc:	b170      	cbz	r0, 80062fc <_vfiprintf_r+0x5c>
 80062de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062e0:	07dc      	lsls	r4, r3, #31
 80062e2:	d504      	bpl.n	80062ee <_vfiprintf_r+0x4e>
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	b01d      	add	sp, #116	@ 0x74
 80062ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ee:	89ab      	ldrh	r3, [r5, #12]
 80062f0:	0598      	lsls	r0, r3, #22
 80062f2:	d4f7      	bmi.n	80062e4 <_vfiprintf_r+0x44>
 80062f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062f6:	f7ff fea5 	bl	8006044 <__retarget_lock_release_recursive>
 80062fa:	e7f3      	b.n	80062e4 <_vfiprintf_r+0x44>
 80062fc:	2300      	movs	r3, #0
 80062fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006300:	2320      	movs	r3, #32
 8006302:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006306:	2330      	movs	r3, #48	@ 0x30
 8006308:	f04f 0901 	mov.w	r9, #1
 800630c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006310:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80064bc <_vfiprintf_r+0x21c>
 8006314:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006318:	4623      	mov	r3, r4
 800631a:	469a      	mov	sl, r3
 800631c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006320:	b10a      	cbz	r2, 8006326 <_vfiprintf_r+0x86>
 8006322:	2a25      	cmp	r2, #37	@ 0x25
 8006324:	d1f9      	bne.n	800631a <_vfiprintf_r+0x7a>
 8006326:	ebba 0b04 	subs.w	fp, sl, r4
 800632a:	d00b      	beq.n	8006344 <_vfiprintf_r+0xa4>
 800632c:	465b      	mov	r3, fp
 800632e:	4622      	mov	r2, r4
 8006330:	4629      	mov	r1, r5
 8006332:	4630      	mov	r0, r6
 8006334:	f7ff ffa1 	bl	800627a <__sfputs_r>
 8006338:	3001      	adds	r0, #1
 800633a:	f000 80a7 	beq.w	800648c <_vfiprintf_r+0x1ec>
 800633e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006340:	445a      	add	r2, fp
 8006342:	9209      	str	r2, [sp, #36]	@ 0x24
 8006344:	f89a 3000 	ldrb.w	r3, [sl]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 809f 	beq.w	800648c <_vfiprintf_r+0x1ec>
 800634e:	2300      	movs	r3, #0
 8006350:	f04f 32ff 	mov.w	r2, #4294967295
 8006354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006358:	f10a 0a01 	add.w	sl, sl, #1
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	9307      	str	r3, [sp, #28]
 8006360:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006364:	931a      	str	r3, [sp, #104]	@ 0x68
 8006366:	4654      	mov	r4, sl
 8006368:	2205      	movs	r2, #5
 800636a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636e:	4853      	ldr	r0, [pc, #332]	@ (80064bc <_vfiprintf_r+0x21c>)
 8006370:	f000 fb8c 	bl	8006a8c <memchr>
 8006374:	9a04      	ldr	r2, [sp, #16]
 8006376:	b9d8      	cbnz	r0, 80063b0 <_vfiprintf_r+0x110>
 8006378:	06d1      	lsls	r1, r2, #27
 800637a:	bf44      	itt	mi
 800637c:	2320      	movmi	r3, #32
 800637e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006382:	0713      	lsls	r3, r2, #28
 8006384:	bf44      	itt	mi
 8006386:	232b      	movmi	r3, #43	@ 0x2b
 8006388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800638c:	f89a 3000 	ldrb.w	r3, [sl]
 8006390:	2b2a      	cmp	r3, #42	@ 0x2a
 8006392:	d015      	beq.n	80063c0 <_vfiprintf_r+0x120>
 8006394:	4654      	mov	r4, sl
 8006396:	2000      	movs	r0, #0
 8006398:	f04f 0c0a 	mov.w	ip, #10
 800639c:	9a07      	ldr	r2, [sp, #28]
 800639e:	4621      	mov	r1, r4
 80063a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a4:	3b30      	subs	r3, #48	@ 0x30
 80063a6:	2b09      	cmp	r3, #9
 80063a8:	d94b      	bls.n	8006442 <_vfiprintf_r+0x1a2>
 80063aa:	b1b0      	cbz	r0, 80063da <_vfiprintf_r+0x13a>
 80063ac:	9207      	str	r2, [sp, #28]
 80063ae:	e014      	b.n	80063da <_vfiprintf_r+0x13a>
 80063b0:	eba0 0308 	sub.w	r3, r0, r8
 80063b4:	fa09 f303 	lsl.w	r3, r9, r3
 80063b8:	4313      	orrs	r3, r2
 80063ba:	46a2      	mov	sl, r4
 80063bc:	9304      	str	r3, [sp, #16]
 80063be:	e7d2      	b.n	8006366 <_vfiprintf_r+0xc6>
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	1d19      	adds	r1, r3, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	9103      	str	r1, [sp, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bfbb      	ittet	lt
 80063cc:	425b      	neglt	r3, r3
 80063ce:	f042 0202 	orrlt.w	r2, r2, #2
 80063d2:	9307      	strge	r3, [sp, #28]
 80063d4:	9307      	strlt	r3, [sp, #28]
 80063d6:	bfb8      	it	lt
 80063d8:	9204      	strlt	r2, [sp, #16]
 80063da:	7823      	ldrb	r3, [r4, #0]
 80063dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80063de:	d10a      	bne.n	80063f6 <_vfiprintf_r+0x156>
 80063e0:	7863      	ldrb	r3, [r4, #1]
 80063e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e4:	d132      	bne.n	800644c <_vfiprintf_r+0x1ac>
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	3402      	adds	r4, #2
 80063ea:	1d1a      	adds	r2, r3, #4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	9203      	str	r2, [sp, #12]
 80063f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063f4:	9305      	str	r3, [sp, #20]
 80063f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80064c0 <_vfiprintf_r+0x220>
 80063fa:	2203      	movs	r2, #3
 80063fc:	4650      	mov	r0, sl
 80063fe:	7821      	ldrb	r1, [r4, #0]
 8006400:	f000 fb44 	bl	8006a8c <memchr>
 8006404:	b138      	cbz	r0, 8006416 <_vfiprintf_r+0x176>
 8006406:	2240      	movs	r2, #64	@ 0x40
 8006408:	9b04      	ldr	r3, [sp, #16]
 800640a:	eba0 000a 	sub.w	r0, r0, sl
 800640e:	4082      	lsls	r2, r0
 8006410:	4313      	orrs	r3, r2
 8006412:	3401      	adds	r4, #1
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641a:	2206      	movs	r2, #6
 800641c:	4829      	ldr	r0, [pc, #164]	@ (80064c4 <_vfiprintf_r+0x224>)
 800641e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006422:	f000 fb33 	bl	8006a8c <memchr>
 8006426:	2800      	cmp	r0, #0
 8006428:	d03f      	beq.n	80064aa <_vfiprintf_r+0x20a>
 800642a:	4b27      	ldr	r3, [pc, #156]	@ (80064c8 <_vfiprintf_r+0x228>)
 800642c:	bb1b      	cbnz	r3, 8006476 <_vfiprintf_r+0x1d6>
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	3307      	adds	r3, #7
 8006432:	f023 0307 	bic.w	r3, r3, #7
 8006436:	3308      	adds	r3, #8
 8006438:	9303      	str	r3, [sp, #12]
 800643a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643c:	443b      	add	r3, r7
 800643e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006440:	e76a      	b.n	8006318 <_vfiprintf_r+0x78>
 8006442:	460c      	mov	r4, r1
 8006444:	2001      	movs	r0, #1
 8006446:	fb0c 3202 	mla	r2, ip, r2, r3
 800644a:	e7a8      	b.n	800639e <_vfiprintf_r+0xfe>
 800644c:	2300      	movs	r3, #0
 800644e:	f04f 0c0a 	mov.w	ip, #10
 8006452:	4619      	mov	r1, r3
 8006454:	3401      	adds	r4, #1
 8006456:	9305      	str	r3, [sp, #20]
 8006458:	4620      	mov	r0, r4
 800645a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800645e:	3a30      	subs	r2, #48	@ 0x30
 8006460:	2a09      	cmp	r2, #9
 8006462:	d903      	bls.n	800646c <_vfiprintf_r+0x1cc>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0c6      	beq.n	80063f6 <_vfiprintf_r+0x156>
 8006468:	9105      	str	r1, [sp, #20]
 800646a:	e7c4      	b.n	80063f6 <_vfiprintf_r+0x156>
 800646c:	4604      	mov	r4, r0
 800646e:	2301      	movs	r3, #1
 8006470:	fb0c 2101 	mla	r1, ip, r1, r2
 8006474:	e7f0      	b.n	8006458 <_vfiprintf_r+0x1b8>
 8006476:	ab03      	add	r3, sp, #12
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	462a      	mov	r2, r5
 800647c:	4630      	mov	r0, r6
 800647e:	4b13      	ldr	r3, [pc, #76]	@ (80064cc <_vfiprintf_r+0x22c>)
 8006480:	a904      	add	r1, sp, #16
 8006482:	f3af 8000 	nop.w
 8006486:	4607      	mov	r7, r0
 8006488:	1c78      	adds	r0, r7, #1
 800648a:	d1d6      	bne.n	800643a <_vfiprintf_r+0x19a>
 800648c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800648e:	07d9      	lsls	r1, r3, #31
 8006490:	d405      	bmi.n	800649e <_vfiprintf_r+0x1fe>
 8006492:	89ab      	ldrh	r3, [r5, #12]
 8006494:	059a      	lsls	r2, r3, #22
 8006496:	d402      	bmi.n	800649e <_vfiprintf_r+0x1fe>
 8006498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800649a:	f7ff fdd3 	bl	8006044 <__retarget_lock_release_recursive>
 800649e:	89ab      	ldrh	r3, [r5, #12]
 80064a0:	065b      	lsls	r3, r3, #25
 80064a2:	f53f af1f 	bmi.w	80062e4 <_vfiprintf_r+0x44>
 80064a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064a8:	e71e      	b.n	80062e8 <_vfiprintf_r+0x48>
 80064aa:	ab03      	add	r3, sp, #12
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	462a      	mov	r2, r5
 80064b0:	4630      	mov	r0, r6
 80064b2:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <_vfiprintf_r+0x22c>)
 80064b4:	a904      	add	r1, sp, #16
 80064b6:	f000 f87d 	bl	80065b4 <_printf_i>
 80064ba:	e7e4      	b.n	8006486 <_vfiprintf_r+0x1e6>
 80064bc:	08006cad 	.word	0x08006cad
 80064c0:	08006cb3 	.word	0x08006cb3
 80064c4:	08006cb7 	.word	0x08006cb7
 80064c8:	00000000 	.word	0x00000000
 80064cc:	0800627b 	.word	0x0800627b

080064d0 <_printf_common>:
 80064d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	4616      	mov	r6, r2
 80064d6:	4698      	mov	r8, r3
 80064d8:	688a      	ldr	r2, [r1, #8]
 80064da:	690b      	ldr	r3, [r1, #16]
 80064dc:	4607      	mov	r7, r0
 80064de:	4293      	cmp	r3, r2
 80064e0:	bfb8      	it	lt
 80064e2:	4613      	movlt	r3, r2
 80064e4:	6033      	str	r3, [r6, #0]
 80064e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064ea:	460c      	mov	r4, r1
 80064ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064f0:	b10a      	cbz	r2, 80064f6 <_printf_common+0x26>
 80064f2:	3301      	adds	r3, #1
 80064f4:	6033      	str	r3, [r6, #0]
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	0699      	lsls	r1, r3, #26
 80064fa:	bf42      	ittt	mi
 80064fc:	6833      	ldrmi	r3, [r6, #0]
 80064fe:	3302      	addmi	r3, #2
 8006500:	6033      	strmi	r3, [r6, #0]
 8006502:	6825      	ldr	r5, [r4, #0]
 8006504:	f015 0506 	ands.w	r5, r5, #6
 8006508:	d106      	bne.n	8006518 <_printf_common+0x48>
 800650a:	f104 0a19 	add.w	sl, r4, #25
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	6832      	ldr	r2, [r6, #0]
 8006512:	1a9b      	subs	r3, r3, r2
 8006514:	42ab      	cmp	r3, r5
 8006516:	dc2b      	bgt.n	8006570 <_printf_common+0xa0>
 8006518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	3b00      	subs	r3, #0
 8006520:	bf18      	it	ne
 8006522:	2301      	movne	r3, #1
 8006524:	0692      	lsls	r2, r2, #26
 8006526:	d430      	bmi.n	800658a <_printf_common+0xba>
 8006528:	4641      	mov	r1, r8
 800652a:	4638      	mov	r0, r7
 800652c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006530:	47c8      	blx	r9
 8006532:	3001      	adds	r0, #1
 8006534:	d023      	beq.n	800657e <_printf_common+0xae>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	6922      	ldr	r2, [r4, #16]
 800653a:	f003 0306 	and.w	r3, r3, #6
 800653e:	2b04      	cmp	r3, #4
 8006540:	bf14      	ite	ne
 8006542:	2500      	movne	r5, #0
 8006544:	6833      	ldreq	r3, [r6, #0]
 8006546:	f04f 0600 	mov.w	r6, #0
 800654a:	bf08      	it	eq
 800654c:	68e5      	ldreq	r5, [r4, #12]
 800654e:	f104 041a 	add.w	r4, r4, #26
 8006552:	bf08      	it	eq
 8006554:	1aed      	subeq	r5, r5, r3
 8006556:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800655a:	bf08      	it	eq
 800655c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006560:	4293      	cmp	r3, r2
 8006562:	bfc4      	itt	gt
 8006564:	1a9b      	subgt	r3, r3, r2
 8006566:	18ed      	addgt	r5, r5, r3
 8006568:	42b5      	cmp	r5, r6
 800656a:	d11a      	bne.n	80065a2 <_printf_common+0xd2>
 800656c:	2000      	movs	r0, #0
 800656e:	e008      	b.n	8006582 <_printf_common+0xb2>
 8006570:	2301      	movs	r3, #1
 8006572:	4652      	mov	r2, sl
 8006574:	4641      	mov	r1, r8
 8006576:	4638      	mov	r0, r7
 8006578:	47c8      	blx	r9
 800657a:	3001      	adds	r0, #1
 800657c:	d103      	bne.n	8006586 <_printf_common+0xb6>
 800657e:	f04f 30ff 	mov.w	r0, #4294967295
 8006582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006586:	3501      	adds	r5, #1
 8006588:	e7c1      	b.n	800650e <_printf_common+0x3e>
 800658a:	2030      	movs	r0, #48	@ 0x30
 800658c:	18e1      	adds	r1, r4, r3
 800658e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006598:	4422      	add	r2, r4
 800659a:	3302      	adds	r3, #2
 800659c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065a0:	e7c2      	b.n	8006528 <_printf_common+0x58>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4622      	mov	r2, r4
 80065a6:	4641      	mov	r1, r8
 80065a8:	4638      	mov	r0, r7
 80065aa:	47c8      	blx	r9
 80065ac:	3001      	adds	r0, #1
 80065ae:	d0e6      	beq.n	800657e <_printf_common+0xae>
 80065b0:	3601      	adds	r6, #1
 80065b2:	e7d9      	b.n	8006568 <_printf_common+0x98>

080065b4 <_printf_i>:
 80065b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	7e0f      	ldrb	r7, [r1, #24]
 80065ba:	4691      	mov	r9, r2
 80065bc:	2f78      	cmp	r7, #120	@ 0x78
 80065be:	4680      	mov	r8, r0
 80065c0:	460c      	mov	r4, r1
 80065c2:	469a      	mov	sl, r3
 80065c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065ca:	d807      	bhi.n	80065dc <_printf_i+0x28>
 80065cc:	2f62      	cmp	r7, #98	@ 0x62
 80065ce:	d80a      	bhi.n	80065e6 <_printf_i+0x32>
 80065d0:	2f00      	cmp	r7, #0
 80065d2:	f000 80d3 	beq.w	800677c <_printf_i+0x1c8>
 80065d6:	2f58      	cmp	r7, #88	@ 0x58
 80065d8:	f000 80ba 	beq.w	8006750 <_printf_i+0x19c>
 80065dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065e4:	e03a      	b.n	800665c <_printf_i+0xa8>
 80065e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065ea:	2b15      	cmp	r3, #21
 80065ec:	d8f6      	bhi.n	80065dc <_printf_i+0x28>
 80065ee:	a101      	add	r1, pc, #4	@ (adr r1, 80065f4 <_printf_i+0x40>)
 80065f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065f4:	0800664d 	.word	0x0800664d
 80065f8:	08006661 	.word	0x08006661
 80065fc:	080065dd 	.word	0x080065dd
 8006600:	080065dd 	.word	0x080065dd
 8006604:	080065dd 	.word	0x080065dd
 8006608:	080065dd 	.word	0x080065dd
 800660c:	08006661 	.word	0x08006661
 8006610:	080065dd 	.word	0x080065dd
 8006614:	080065dd 	.word	0x080065dd
 8006618:	080065dd 	.word	0x080065dd
 800661c:	080065dd 	.word	0x080065dd
 8006620:	08006763 	.word	0x08006763
 8006624:	0800668b 	.word	0x0800668b
 8006628:	0800671d 	.word	0x0800671d
 800662c:	080065dd 	.word	0x080065dd
 8006630:	080065dd 	.word	0x080065dd
 8006634:	08006785 	.word	0x08006785
 8006638:	080065dd 	.word	0x080065dd
 800663c:	0800668b 	.word	0x0800668b
 8006640:	080065dd 	.word	0x080065dd
 8006644:	080065dd 	.word	0x080065dd
 8006648:	08006725 	.word	0x08006725
 800664c:	6833      	ldr	r3, [r6, #0]
 800664e:	1d1a      	adds	r2, r3, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6032      	str	r2, [r6, #0]
 8006654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800665c:	2301      	movs	r3, #1
 800665e:	e09e      	b.n	800679e <_printf_i+0x1ea>
 8006660:	6833      	ldr	r3, [r6, #0]
 8006662:	6820      	ldr	r0, [r4, #0]
 8006664:	1d19      	adds	r1, r3, #4
 8006666:	6031      	str	r1, [r6, #0]
 8006668:	0606      	lsls	r6, r0, #24
 800666a:	d501      	bpl.n	8006670 <_printf_i+0xbc>
 800666c:	681d      	ldr	r5, [r3, #0]
 800666e:	e003      	b.n	8006678 <_printf_i+0xc4>
 8006670:	0645      	lsls	r5, r0, #25
 8006672:	d5fb      	bpl.n	800666c <_printf_i+0xb8>
 8006674:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006678:	2d00      	cmp	r5, #0
 800667a:	da03      	bge.n	8006684 <_printf_i+0xd0>
 800667c:	232d      	movs	r3, #45	@ 0x2d
 800667e:	426d      	negs	r5, r5
 8006680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006684:	230a      	movs	r3, #10
 8006686:	4859      	ldr	r0, [pc, #356]	@ (80067ec <_printf_i+0x238>)
 8006688:	e011      	b.n	80066ae <_printf_i+0xfa>
 800668a:	6821      	ldr	r1, [r4, #0]
 800668c:	6833      	ldr	r3, [r6, #0]
 800668e:	0608      	lsls	r0, r1, #24
 8006690:	f853 5b04 	ldr.w	r5, [r3], #4
 8006694:	d402      	bmi.n	800669c <_printf_i+0xe8>
 8006696:	0649      	lsls	r1, r1, #25
 8006698:	bf48      	it	mi
 800669a:	b2ad      	uxthmi	r5, r5
 800669c:	2f6f      	cmp	r7, #111	@ 0x6f
 800669e:	6033      	str	r3, [r6, #0]
 80066a0:	bf14      	ite	ne
 80066a2:	230a      	movne	r3, #10
 80066a4:	2308      	moveq	r3, #8
 80066a6:	4851      	ldr	r0, [pc, #324]	@ (80067ec <_printf_i+0x238>)
 80066a8:	2100      	movs	r1, #0
 80066aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066ae:	6866      	ldr	r6, [r4, #4]
 80066b0:	2e00      	cmp	r6, #0
 80066b2:	bfa8      	it	ge
 80066b4:	6821      	ldrge	r1, [r4, #0]
 80066b6:	60a6      	str	r6, [r4, #8]
 80066b8:	bfa4      	itt	ge
 80066ba:	f021 0104 	bicge.w	r1, r1, #4
 80066be:	6021      	strge	r1, [r4, #0]
 80066c0:	b90d      	cbnz	r5, 80066c6 <_printf_i+0x112>
 80066c2:	2e00      	cmp	r6, #0
 80066c4:	d04b      	beq.n	800675e <_printf_i+0x1aa>
 80066c6:	4616      	mov	r6, r2
 80066c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80066cc:	fb03 5711 	mls	r7, r3, r1, r5
 80066d0:	5dc7      	ldrb	r7, [r0, r7]
 80066d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066d6:	462f      	mov	r7, r5
 80066d8:	42bb      	cmp	r3, r7
 80066da:	460d      	mov	r5, r1
 80066dc:	d9f4      	bls.n	80066c8 <_printf_i+0x114>
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d10b      	bne.n	80066fa <_printf_i+0x146>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	07df      	lsls	r7, r3, #31
 80066e6:	d508      	bpl.n	80066fa <_printf_i+0x146>
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	6861      	ldr	r1, [r4, #4]
 80066ec:	4299      	cmp	r1, r3
 80066ee:	bfde      	ittt	le
 80066f0:	2330      	movle	r3, #48	@ 0x30
 80066f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066fa:	1b92      	subs	r2, r2, r6
 80066fc:	6122      	str	r2, [r4, #16]
 80066fe:	464b      	mov	r3, r9
 8006700:	4621      	mov	r1, r4
 8006702:	4640      	mov	r0, r8
 8006704:	f8cd a000 	str.w	sl, [sp]
 8006708:	aa03      	add	r2, sp, #12
 800670a:	f7ff fee1 	bl	80064d0 <_printf_common>
 800670e:	3001      	adds	r0, #1
 8006710:	d14a      	bne.n	80067a8 <_printf_i+0x1f4>
 8006712:	f04f 30ff 	mov.w	r0, #4294967295
 8006716:	b004      	add	sp, #16
 8006718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	f043 0320 	orr.w	r3, r3, #32
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	2778      	movs	r7, #120	@ 0x78
 8006726:	4832      	ldr	r0, [pc, #200]	@ (80067f0 <_printf_i+0x23c>)
 8006728:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	6831      	ldr	r1, [r6, #0]
 8006730:	061f      	lsls	r7, r3, #24
 8006732:	f851 5b04 	ldr.w	r5, [r1], #4
 8006736:	d402      	bmi.n	800673e <_printf_i+0x18a>
 8006738:	065f      	lsls	r7, r3, #25
 800673a:	bf48      	it	mi
 800673c:	b2ad      	uxthmi	r5, r5
 800673e:	6031      	str	r1, [r6, #0]
 8006740:	07d9      	lsls	r1, r3, #31
 8006742:	bf44      	itt	mi
 8006744:	f043 0320 	orrmi.w	r3, r3, #32
 8006748:	6023      	strmi	r3, [r4, #0]
 800674a:	b11d      	cbz	r5, 8006754 <_printf_i+0x1a0>
 800674c:	2310      	movs	r3, #16
 800674e:	e7ab      	b.n	80066a8 <_printf_i+0xf4>
 8006750:	4826      	ldr	r0, [pc, #152]	@ (80067ec <_printf_i+0x238>)
 8006752:	e7e9      	b.n	8006728 <_printf_i+0x174>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	f023 0320 	bic.w	r3, r3, #32
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	e7f6      	b.n	800674c <_printf_i+0x198>
 800675e:	4616      	mov	r6, r2
 8006760:	e7bd      	b.n	80066de <_printf_i+0x12a>
 8006762:	6833      	ldr	r3, [r6, #0]
 8006764:	6825      	ldr	r5, [r4, #0]
 8006766:	1d18      	adds	r0, r3, #4
 8006768:	6961      	ldr	r1, [r4, #20]
 800676a:	6030      	str	r0, [r6, #0]
 800676c:	062e      	lsls	r6, r5, #24
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	d501      	bpl.n	8006776 <_printf_i+0x1c2>
 8006772:	6019      	str	r1, [r3, #0]
 8006774:	e002      	b.n	800677c <_printf_i+0x1c8>
 8006776:	0668      	lsls	r0, r5, #25
 8006778:	d5fb      	bpl.n	8006772 <_printf_i+0x1be>
 800677a:	8019      	strh	r1, [r3, #0]
 800677c:	2300      	movs	r3, #0
 800677e:	4616      	mov	r6, r2
 8006780:	6123      	str	r3, [r4, #16]
 8006782:	e7bc      	b.n	80066fe <_printf_i+0x14a>
 8006784:	6833      	ldr	r3, [r6, #0]
 8006786:	2100      	movs	r1, #0
 8006788:	1d1a      	adds	r2, r3, #4
 800678a:	6032      	str	r2, [r6, #0]
 800678c:	681e      	ldr	r6, [r3, #0]
 800678e:	6862      	ldr	r2, [r4, #4]
 8006790:	4630      	mov	r0, r6
 8006792:	f000 f97b 	bl	8006a8c <memchr>
 8006796:	b108      	cbz	r0, 800679c <_printf_i+0x1e8>
 8006798:	1b80      	subs	r0, r0, r6
 800679a:	6060      	str	r0, [r4, #4]
 800679c:	6863      	ldr	r3, [r4, #4]
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	2300      	movs	r3, #0
 80067a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067a6:	e7aa      	b.n	80066fe <_printf_i+0x14a>
 80067a8:	4632      	mov	r2, r6
 80067aa:	4649      	mov	r1, r9
 80067ac:	4640      	mov	r0, r8
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	47d0      	blx	sl
 80067b2:	3001      	adds	r0, #1
 80067b4:	d0ad      	beq.n	8006712 <_printf_i+0x15e>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	079b      	lsls	r3, r3, #30
 80067ba:	d413      	bmi.n	80067e4 <_printf_i+0x230>
 80067bc:	68e0      	ldr	r0, [r4, #12]
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	4298      	cmp	r0, r3
 80067c2:	bfb8      	it	lt
 80067c4:	4618      	movlt	r0, r3
 80067c6:	e7a6      	b.n	8006716 <_printf_i+0x162>
 80067c8:	2301      	movs	r3, #1
 80067ca:	4632      	mov	r2, r6
 80067cc:	4649      	mov	r1, r9
 80067ce:	4640      	mov	r0, r8
 80067d0:	47d0      	blx	sl
 80067d2:	3001      	adds	r0, #1
 80067d4:	d09d      	beq.n	8006712 <_printf_i+0x15e>
 80067d6:	3501      	adds	r5, #1
 80067d8:	68e3      	ldr	r3, [r4, #12]
 80067da:	9903      	ldr	r1, [sp, #12]
 80067dc:	1a5b      	subs	r3, r3, r1
 80067de:	42ab      	cmp	r3, r5
 80067e0:	dcf2      	bgt.n	80067c8 <_printf_i+0x214>
 80067e2:	e7eb      	b.n	80067bc <_printf_i+0x208>
 80067e4:	2500      	movs	r5, #0
 80067e6:	f104 0619 	add.w	r6, r4, #25
 80067ea:	e7f5      	b.n	80067d8 <_printf_i+0x224>
 80067ec:	08006cbe 	.word	0x08006cbe
 80067f0:	08006ccf 	.word	0x08006ccf

080067f4 <__sflush_r>:
 80067f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	0716      	lsls	r6, r2, #28
 80067fc:	4605      	mov	r5, r0
 80067fe:	460c      	mov	r4, r1
 8006800:	d454      	bmi.n	80068ac <__sflush_r+0xb8>
 8006802:	684b      	ldr	r3, [r1, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	dc02      	bgt.n	800680e <__sflush_r+0x1a>
 8006808:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	dd48      	ble.n	80068a0 <__sflush_r+0xac>
 800680e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006810:	2e00      	cmp	r6, #0
 8006812:	d045      	beq.n	80068a0 <__sflush_r+0xac>
 8006814:	2300      	movs	r3, #0
 8006816:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800681a:	682f      	ldr	r7, [r5, #0]
 800681c:	6a21      	ldr	r1, [r4, #32]
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	d030      	beq.n	8006884 <__sflush_r+0x90>
 8006822:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	0759      	lsls	r1, r3, #29
 8006828:	d505      	bpl.n	8006836 <__sflush_r+0x42>
 800682a:	6863      	ldr	r3, [r4, #4]
 800682c:	1ad2      	subs	r2, r2, r3
 800682e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006830:	b10b      	cbz	r3, 8006836 <__sflush_r+0x42>
 8006832:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006834:	1ad2      	subs	r2, r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	4628      	mov	r0, r5
 800683a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800683c:	6a21      	ldr	r1, [r4, #32]
 800683e:	47b0      	blx	r6
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	d106      	bne.n	8006854 <__sflush_r+0x60>
 8006846:	6829      	ldr	r1, [r5, #0]
 8006848:	291d      	cmp	r1, #29
 800684a:	d82b      	bhi.n	80068a4 <__sflush_r+0xb0>
 800684c:	4a28      	ldr	r2, [pc, #160]	@ (80068f0 <__sflush_r+0xfc>)
 800684e:	410a      	asrs	r2, r1
 8006850:	07d6      	lsls	r6, r2, #31
 8006852:	d427      	bmi.n	80068a4 <__sflush_r+0xb0>
 8006854:	2200      	movs	r2, #0
 8006856:	6062      	str	r2, [r4, #4]
 8006858:	6922      	ldr	r2, [r4, #16]
 800685a:	04d9      	lsls	r1, r3, #19
 800685c:	6022      	str	r2, [r4, #0]
 800685e:	d504      	bpl.n	800686a <__sflush_r+0x76>
 8006860:	1c42      	adds	r2, r0, #1
 8006862:	d101      	bne.n	8006868 <__sflush_r+0x74>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b903      	cbnz	r3, 800686a <__sflush_r+0x76>
 8006868:	6560      	str	r0, [r4, #84]	@ 0x54
 800686a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800686c:	602f      	str	r7, [r5, #0]
 800686e:	b1b9      	cbz	r1, 80068a0 <__sflush_r+0xac>
 8006870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006874:	4299      	cmp	r1, r3
 8006876:	d002      	beq.n	800687e <__sflush_r+0x8a>
 8006878:	4628      	mov	r0, r5
 800687a:	f7ff fbf3 	bl	8006064 <_free_r>
 800687e:	2300      	movs	r3, #0
 8006880:	6363      	str	r3, [r4, #52]	@ 0x34
 8006882:	e00d      	b.n	80068a0 <__sflush_r+0xac>
 8006884:	2301      	movs	r3, #1
 8006886:	4628      	mov	r0, r5
 8006888:	47b0      	blx	r6
 800688a:	4602      	mov	r2, r0
 800688c:	1c50      	adds	r0, r2, #1
 800688e:	d1c9      	bne.n	8006824 <__sflush_r+0x30>
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0c6      	beq.n	8006824 <__sflush_r+0x30>
 8006896:	2b1d      	cmp	r3, #29
 8006898:	d001      	beq.n	800689e <__sflush_r+0xaa>
 800689a:	2b16      	cmp	r3, #22
 800689c:	d11d      	bne.n	80068da <__sflush_r+0xe6>
 800689e:	602f      	str	r7, [r5, #0]
 80068a0:	2000      	movs	r0, #0
 80068a2:	e021      	b.n	80068e8 <__sflush_r+0xf4>
 80068a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a8:	b21b      	sxth	r3, r3
 80068aa:	e01a      	b.n	80068e2 <__sflush_r+0xee>
 80068ac:	690f      	ldr	r7, [r1, #16]
 80068ae:	2f00      	cmp	r7, #0
 80068b0:	d0f6      	beq.n	80068a0 <__sflush_r+0xac>
 80068b2:	0793      	lsls	r3, r2, #30
 80068b4:	bf18      	it	ne
 80068b6:	2300      	movne	r3, #0
 80068b8:	680e      	ldr	r6, [r1, #0]
 80068ba:	bf08      	it	eq
 80068bc:	694b      	ldreq	r3, [r1, #20]
 80068be:	1bf6      	subs	r6, r6, r7
 80068c0:	600f      	str	r7, [r1, #0]
 80068c2:	608b      	str	r3, [r1, #8]
 80068c4:	2e00      	cmp	r6, #0
 80068c6:	ddeb      	ble.n	80068a0 <__sflush_r+0xac>
 80068c8:	4633      	mov	r3, r6
 80068ca:	463a      	mov	r2, r7
 80068cc:	4628      	mov	r0, r5
 80068ce:	6a21      	ldr	r1, [r4, #32]
 80068d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80068d4:	47e0      	blx	ip
 80068d6:	2800      	cmp	r0, #0
 80068d8:	dc07      	bgt.n	80068ea <__sflush_r+0xf6>
 80068da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068e2:	f04f 30ff 	mov.w	r0, #4294967295
 80068e6:	81a3      	strh	r3, [r4, #12]
 80068e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ea:	4407      	add	r7, r0
 80068ec:	1a36      	subs	r6, r6, r0
 80068ee:	e7e9      	b.n	80068c4 <__sflush_r+0xd0>
 80068f0:	dfbffffe 	.word	0xdfbffffe

080068f4 <_fflush_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	690b      	ldr	r3, [r1, #16]
 80068f8:	4605      	mov	r5, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	b913      	cbnz	r3, 8006904 <_fflush_r+0x10>
 80068fe:	2500      	movs	r5, #0
 8006900:	4628      	mov	r0, r5
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	b118      	cbz	r0, 800690e <_fflush_r+0x1a>
 8006906:	6a03      	ldr	r3, [r0, #32]
 8006908:	b90b      	cbnz	r3, 800690e <_fflush_r+0x1a>
 800690a:	f7ff fa95 	bl	8005e38 <__sinit>
 800690e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0f3      	beq.n	80068fe <_fflush_r+0xa>
 8006916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006918:	07d0      	lsls	r0, r2, #31
 800691a:	d404      	bmi.n	8006926 <_fflush_r+0x32>
 800691c:	0599      	lsls	r1, r3, #22
 800691e:	d402      	bmi.n	8006926 <_fflush_r+0x32>
 8006920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006922:	f7ff fb8e 	bl	8006042 <__retarget_lock_acquire_recursive>
 8006926:	4628      	mov	r0, r5
 8006928:	4621      	mov	r1, r4
 800692a:	f7ff ff63 	bl	80067f4 <__sflush_r>
 800692e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006930:	4605      	mov	r5, r0
 8006932:	07da      	lsls	r2, r3, #31
 8006934:	d4e4      	bmi.n	8006900 <_fflush_r+0xc>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	059b      	lsls	r3, r3, #22
 800693a:	d4e1      	bmi.n	8006900 <_fflush_r+0xc>
 800693c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800693e:	f7ff fb81 	bl	8006044 <__retarget_lock_release_recursive>
 8006942:	e7dd      	b.n	8006900 <_fflush_r+0xc>

08006944 <__swbuf_r>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	460e      	mov	r6, r1
 8006948:	4614      	mov	r4, r2
 800694a:	4605      	mov	r5, r0
 800694c:	b118      	cbz	r0, 8006956 <__swbuf_r+0x12>
 800694e:	6a03      	ldr	r3, [r0, #32]
 8006950:	b90b      	cbnz	r3, 8006956 <__swbuf_r+0x12>
 8006952:	f7ff fa71 	bl	8005e38 <__sinit>
 8006956:	69a3      	ldr	r3, [r4, #24]
 8006958:	60a3      	str	r3, [r4, #8]
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	071a      	lsls	r2, r3, #28
 800695e:	d501      	bpl.n	8006964 <__swbuf_r+0x20>
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	b943      	cbnz	r3, 8006976 <__swbuf_r+0x32>
 8006964:	4621      	mov	r1, r4
 8006966:	4628      	mov	r0, r5
 8006968:	f000 f82a 	bl	80069c0 <__swsetup_r>
 800696c:	b118      	cbz	r0, 8006976 <__swbuf_r+0x32>
 800696e:	f04f 37ff 	mov.w	r7, #4294967295
 8006972:	4638      	mov	r0, r7
 8006974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	6922      	ldr	r2, [r4, #16]
 800697a:	b2f6      	uxtb	r6, r6
 800697c:	1a98      	subs	r0, r3, r2
 800697e:	6963      	ldr	r3, [r4, #20]
 8006980:	4637      	mov	r7, r6
 8006982:	4283      	cmp	r3, r0
 8006984:	dc05      	bgt.n	8006992 <__swbuf_r+0x4e>
 8006986:	4621      	mov	r1, r4
 8006988:	4628      	mov	r0, r5
 800698a:	f7ff ffb3 	bl	80068f4 <_fflush_r>
 800698e:	2800      	cmp	r0, #0
 8006990:	d1ed      	bne.n	800696e <__swbuf_r+0x2a>
 8006992:	68a3      	ldr	r3, [r4, #8]
 8006994:	3b01      	subs	r3, #1
 8006996:	60a3      	str	r3, [r4, #8]
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	6022      	str	r2, [r4, #0]
 800699e:	701e      	strb	r6, [r3, #0]
 80069a0:	6962      	ldr	r2, [r4, #20]
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d004      	beq.n	80069b2 <__swbuf_r+0x6e>
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	07db      	lsls	r3, r3, #31
 80069ac:	d5e1      	bpl.n	8006972 <__swbuf_r+0x2e>
 80069ae:	2e0a      	cmp	r6, #10
 80069b0:	d1df      	bne.n	8006972 <__swbuf_r+0x2e>
 80069b2:	4621      	mov	r1, r4
 80069b4:	4628      	mov	r0, r5
 80069b6:	f7ff ff9d 	bl	80068f4 <_fflush_r>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d0d9      	beq.n	8006972 <__swbuf_r+0x2e>
 80069be:	e7d6      	b.n	800696e <__swbuf_r+0x2a>

080069c0 <__swsetup_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4b29      	ldr	r3, [pc, #164]	@ (8006a68 <__swsetup_r+0xa8>)
 80069c4:	4605      	mov	r5, r0
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	460c      	mov	r4, r1
 80069ca:	b118      	cbz	r0, 80069d4 <__swsetup_r+0x14>
 80069cc:	6a03      	ldr	r3, [r0, #32]
 80069ce:	b90b      	cbnz	r3, 80069d4 <__swsetup_r+0x14>
 80069d0:	f7ff fa32 	bl	8005e38 <__sinit>
 80069d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069d8:	0719      	lsls	r1, r3, #28
 80069da:	d422      	bmi.n	8006a22 <__swsetup_r+0x62>
 80069dc:	06da      	lsls	r2, r3, #27
 80069de:	d407      	bmi.n	80069f0 <__swsetup_r+0x30>
 80069e0:	2209      	movs	r2, #9
 80069e2:	602a      	str	r2, [r5, #0]
 80069e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ec:	81a3      	strh	r3, [r4, #12]
 80069ee:	e033      	b.n	8006a58 <__swsetup_r+0x98>
 80069f0:	0758      	lsls	r0, r3, #29
 80069f2:	d512      	bpl.n	8006a1a <__swsetup_r+0x5a>
 80069f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069f6:	b141      	cbz	r1, 8006a0a <__swsetup_r+0x4a>
 80069f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069fc:	4299      	cmp	r1, r3
 80069fe:	d002      	beq.n	8006a06 <__swsetup_r+0x46>
 8006a00:	4628      	mov	r0, r5
 8006a02:	f7ff fb2f 	bl	8006064 <_free_r>
 8006a06:	2300      	movs	r3, #0
 8006a08:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	2300      	movs	r3, #0
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	f043 0308 	orr.w	r3, r3, #8
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	6923      	ldr	r3, [r4, #16]
 8006a24:	b94b      	cbnz	r3, 8006a3a <__swsetup_r+0x7a>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a30:	d003      	beq.n	8006a3a <__swsetup_r+0x7a>
 8006a32:	4621      	mov	r1, r4
 8006a34:	4628      	mov	r0, r5
 8006a36:	f000 f85c 	bl	8006af2 <__smakebuf_r>
 8006a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3e:	f013 0201 	ands.w	r2, r3, #1
 8006a42:	d00a      	beq.n	8006a5a <__swsetup_r+0x9a>
 8006a44:	2200      	movs	r2, #0
 8006a46:	60a2      	str	r2, [r4, #8]
 8006a48:	6962      	ldr	r2, [r4, #20]
 8006a4a:	4252      	negs	r2, r2
 8006a4c:	61a2      	str	r2, [r4, #24]
 8006a4e:	6922      	ldr	r2, [r4, #16]
 8006a50:	b942      	cbnz	r2, 8006a64 <__swsetup_r+0xa4>
 8006a52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a56:	d1c5      	bne.n	80069e4 <__swsetup_r+0x24>
 8006a58:	bd38      	pop	{r3, r4, r5, pc}
 8006a5a:	0799      	lsls	r1, r3, #30
 8006a5c:	bf58      	it	pl
 8006a5e:	6962      	ldrpl	r2, [r4, #20]
 8006a60:	60a2      	str	r2, [r4, #8]
 8006a62:	e7f4      	b.n	8006a4e <__swsetup_r+0x8e>
 8006a64:	2000      	movs	r0, #0
 8006a66:	e7f7      	b.n	8006a58 <__swsetup_r+0x98>
 8006a68:	200000e8 	.word	0x200000e8

08006a6c <_sbrk_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	2300      	movs	r3, #0
 8006a70:	4d05      	ldr	r5, [pc, #20]	@ (8006a88 <_sbrk_r+0x1c>)
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7ff f8b8 	bl	8005bec <_sbrk>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_sbrk_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_sbrk_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	20002418 	.word	0x20002418

08006a8c <memchr>:
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	b510      	push	{r4, lr}
 8006a90:	b2c9      	uxtb	r1, r1
 8006a92:	4402      	add	r2, r0
 8006a94:	4293      	cmp	r3, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	d101      	bne.n	8006a9e <memchr+0x12>
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	e003      	b.n	8006aa6 <memchr+0x1a>
 8006a9e:	7804      	ldrb	r4, [r0, #0]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	428c      	cmp	r4, r1
 8006aa4:	d1f6      	bne.n	8006a94 <memchr+0x8>
 8006aa6:	bd10      	pop	{r4, pc}

08006aa8 <__swhatbuf_r>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	460c      	mov	r4, r1
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	4615      	mov	r5, r2
 8006ab2:	2900      	cmp	r1, #0
 8006ab4:	461e      	mov	r6, r3
 8006ab6:	b096      	sub	sp, #88	@ 0x58
 8006ab8:	da0c      	bge.n	8006ad4 <__swhatbuf_r+0x2c>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	2100      	movs	r1, #0
 8006abe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ac2:	bf14      	ite	ne
 8006ac4:	2340      	movne	r3, #64	@ 0x40
 8006ac6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006aca:	2000      	movs	r0, #0
 8006acc:	6031      	str	r1, [r6, #0]
 8006ace:	602b      	str	r3, [r5, #0]
 8006ad0:	b016      	add	sp, #88	@ 0x58
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}
 8006ad4:	466a      	mov	r2, sp
 8006ad6:	f000 f849 	bl	8006b6c <_fstat_r>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	dbed      	blt.n	8006aba <__swhatbuf_r+0x12>
 8006ade:	9901      	ldr	r1, [sp, #4]
 8006ae0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ae4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ae8:	4259      	negs	r1, r3
 8006aea:	4159      	adcs	r1, r3
 8006aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006af0:	e7eb      	b.n	8006aca <__swhatbuf_r+0x22>

08006af2 <__smakebuf_r>:
 8006af2:	898b      	ldrh	r3, [r1, #12]
 8006af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af6:	079d      	lsls	r5, r3, #30
 8006af8:	4606      	mov	r6, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	d507      	bpl.n	8006b0e <__smakebuf_r+0x1c>
 8006afe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	6123      	str	r3, [r4, #16]
 8006b06:	2301      	movs	r3, #1
 8006b08:	6163      	str	r3, [r4, #20]
 8006b0a:	b003      	add	sp, #12
 8006b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b0e:	466a      	mov	r2, sp
 8006b10:	ab01      	add	r3, sp, #4
 8006b12:	f7ff ffc9 	bl	8006aa8 <__swhatbuf_r>
 8006b16:	9f00      	ldr	r7, [sp, #0]
 8006b18:	4605      	mov	r5, r0
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff fb0b 	bl	8006138 <_malloc_r>
 8006b22:	b948      	cbnz	r0, 8006b38 <__smakebuf_r+0x46>
 8006b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b28:	059a      	lsls	r2, r3, #22
 8006b2a:	d4ee      	bmi.n	8006b0a <__smakebuf_r+0x18>
 8006b2c:	f023 0303 	bic.w	r3, r3, #3
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	e7e2      	b.n	8006afe <__smakebuf_r+0xc>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	9b01      	ldr	r3, [sp, #4]
 8006b46:	6020      	str	r0, [r4, #0]
 8006b48:	b15b      	cbz	r3, 8006b62 <__smakebuf_r+0x70>
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b50:	f000 f81e 	bl	8006b90 <_isatty_r>
 8006b54:	b128      	cbz	r0, 8006b62 <__smakebuf_r+0x70>
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	f023 0303 	bic.w	r3, r3, #3
 8006b5c:	f043 0301 	orr.w	r3, r3, #1
 8006b60:	81a3      	strh	r3, [r4, #12]
 8006b62:	89a3      	ldrh	r3, [r4, #12]
 8006b64:	431d      	orrs	r5, r3
 8006b66:	81a5      	strh	r5, [r4, #12]
 8006b68:	e7cf      	b.n	8006b0a <__smakebuf_r+0x18>
	...

08006b6c <_fstat_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4d06      	ldr	r5, [pc, #24]	@ (8006b8c <_fstat_r+0x20>)
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	f7ff f811 	bl	8005ba0 <_fstat>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d102      	bne.n	8006b88 <_fstat_r+0x1c>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	b103      	cbz	r3, 8006b88 <_fstat_r+0x1c>
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	bd38      	pop	{r3, r4, r5, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20002418 	.word	0x20002418

08006b90 <_isatty_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	2300      	movs	r3, #0
 8006b94:	4d05      	ldr	r5, [pc, #20]	@ (8006bac <_isatty_r+0x1c>)
 8006b96:	4604      	mov	r4, r0
 8006b98:	4608      	mov	r0, r1
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	f7ff f80f 	bl	8005bbe <_isatty>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_isatty_r+0x1a>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_isatty_r+0x1a>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	20002418 	.word	0x20002418

08006bb0 <roundf>:
 8006bb0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006bb4:	3b7f      	subs	r3, #127	@ 0x7f
 8006bb6:	2b16      	cmp	r3, #22
 8006bb8:	4601      	mov	r1, r0
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	dc14      	bgt.n	8006be8 <roundf+0x38>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da07      	bge.n	8006bd2 <roundf+0x22>
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 8006bc8:	d101      	bne.n	8006bce <roundf+0x1e>
 8006bca:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 8006bce:	4608      	mov	r0, r1
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	4a08      	ldr	r2, [pc, #32]	@ (8006bf4 <roundf+0x44>)
 8006bd4:	411a      	asrs	r2, r3
 8006bd6:	4202      	tst	r2, r0
 8006bd8:	d0f9      	beq.n	8006bce <roundf+0x1e>
 8006bda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006bde:	4119      	asrs	r1, r3
 8006be0:	4401      	add	r1, r0
 8006be2:	ea21 0102 	bic.w	r1, r1, r2
 8006be6:	e7f2      	b.n	8006bce <roundf+0x1e>
 8006be8:	2b80      	cmp	r3, #128	@ 0x80
 8006bea:	d1f0      	bne.n	8006bce <roundf+0x1e>
 8006bec:	f7f9 feb4 	bl	8000958 <__addsf3>
 8006bf0:	4601      	mov	r1, r0
 8006bf2:	e7ec      	b.n	8006bce <roundf+0x1e>
 8006bf4:	007fffff 	.word	0x007fffff

08006bf8 <_init>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr

08006c04 <_fini>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	bf00      	nop
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr
