
GP_M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004398  08004398  000060c4  2**0
                  CONTENTS
  4 .ARM          00000000  08004398  08004398  000060c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004398  08004398  000060c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004398  08004398  00005398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800439c  0800439c  0000539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  080043a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002180  200000c4  08004464  000060c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002244  08004464  00006244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000914d  00000000  00000000  000060f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0f  00000000  00000000  0000f241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00010e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f5  00000000  00000000  00011908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010aa6  00000000  00000000  000120fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab21  00000000  00000000  00022ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061c5d  00000000  00000000  0002d6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008f321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d78  00000000  00000000  0008f364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000920dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004354 	.word	0x08004354

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	08004354 	.word	0x08004354

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <SPI_Dev_Init>:
		.GPIO_Speed = GPIO_Low_Speed
};


void SPI_Dev_Init(SPI_dev* BP)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint16_t GPIO_PinSource = 0x00;
 8000a64:	2300      	movs	r3, #0
 8000a66:	81fb      	strh	r3, [r7, #14]

	if(BP->SPIx == SPI1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4aa0      	ldr	r2, [pc, #640]	@ (8000cf0 <SPI_Dev_Init+0x294>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d163      	bne.n	8000b3a <SPI_Dev_Init+0xde>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000a72:	2101      	movs	r1, #1
 8000a74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000a78:	f001 fe46 	bl	8002708 <RCC_APB2PeriphClockCmd>
		RCC_APB2PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f001 fe42 	bl	8002708 <RCC_APB2PeriphClockCmd>

		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000a84:	e002      	b.n	8000a8c <SPI_Dev_Init+0x30>
		{
			GPIO_PinSource++;
 8000a86:	89fb      	ldrh	r3, [r7, #14]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	891b      	ldrh	r3, [r3, #8]
 8000a90:	461a      	mov	r2, r3
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	fa42 f303 	asr.w	r3, r2, r3
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f2      	beq.n	8000a86 <SPI_Dev_Init+0x2a>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MISO , GPIO_PinSource, GPIO_AF_SPI1);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	89f9      	ldrh	r1, [r7, #14]
 8000aa6:	2205      	movs	r2, #5
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fd71 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000ab2:	e002      	b.n	8000aba <SPI_Dev_Init+0x5e>
		{
			GPIO_PinSource++;
 8000ab4:	89fb      	ldrh	r3, [r7, #14]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	8a1b      	ldrh	r3, [r3, #16]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	fa42 f303 	asr.w	r3, r2, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f2      	beq.n	8000ab4 <SPI_Dev_Init+0x58>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MOSI , GPIO_PinSource, GPIO_AF_SPI1);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	89f9      	ldrh	r1, [r7, #14]
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd5a 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000ae0:	e002      	b.n	8000ae8 <SPI_Dev_Init+0x8c>
		{
			GPIO_PinSource++;
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	8b1b      	ldrh	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	fa42 f303 	asr.w	r3, r2, r3
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f2      	beq.n	8000ae2 <SPI_Dev_Init+0x86>
		}
		GPIO_PinAFConfig(BP -> GPIOx_SCK  , GPIO_PinSource, GPIO_AF_SPI1);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	89f9      	ldrh	r1, [r7, #14]
 8000b02:	2205      	movs	r2, #5
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fd43 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000b0e:	e002      	b.n	8000b16 <SPI_Dev_Init+0xba>
		{
			GPIO_PinSource++;
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	3301      	adds	r3, #1
 8000b14:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	8c1b      	ldrh	r3, [r3, #32]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	89fb      	ldrh	r3, [r7, #14]
 8000b1e:	fa42 f303 	asr.w	r3, r2, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0f2      	beq.n	8000b10 <SPI_Dev_Init+0xb4>
		}
		GPIO_PinAFConfig(BP -> GPIOx_NSS  , GPIO_PinSource, GPIO_AF_SPI1);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	89f9      	ldrh	r1, [r7, #14]
 8000b30:	2205      	movs	r2, #5
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fd2c 	bl	8002590 <GPIO_PinAFConfig>
 8000b38:	e209      	b.n	8000f4e <SPI_Dev_Init+0x4f2>
	}
	else if(BP->SPIx == SPI2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a6d      	ldr	r2, [pc, #436]	@ (8000cf4 <SPI_Dev_Init+0x298>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d161      	bne.n	8000c08 <SPI_Dev_Init+0x1ac>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
 8000b44:	2101      	movs	r1, #1
 8000b46:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b4a:	f001 fdbd 	bl	80026c8 <RCC_APB1PeriphClockCmd>
		GPIO_PinSource=0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000b52:	e002      	b.n	8000b5a <SPI_Dev_Init+0xfe>
		{
			GPIO_PinSource++;
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	3301      	adds	r3, #1
 8000b58:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	891b      	ldrh	r3, [r3, #8]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	89fb      	ldrh	r3, [r7, #14]
 8000b62:	fa42 f303 	asr.w	r3, r2, r3
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f2      	beq.n	8000b54 <SPI_Dev_Init+0xf8>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MISO , GPIO_PinSource, GPIO_AF_SPI2);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	89f9      	ldrh	r1, [r7, #14]
 8000b74:	2205      	movs	r2, #5
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fd0a 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000b80:	e002      	b.n	8000b88 <SPI_Dev_Init+0x12c>
		{
			GPIO_PinSource++;
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	3301      	adds	r3, #1
 8000b86:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	8a1b      	ldrh	r3, [r3, #16]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	fa42 f303 	asr.w	r3, r2, r3
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0f2      	beq.n	8000b82 <SPI_Dev_Init+0x126>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MOSI , GPIO_PinSource, GPIO_AF_SPI2);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	89f9      	ldrh	r1, [r7, #14]
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fcf3 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000bae:	e002      	b.n	8000bb6 <SPI_Dev_Init+0x15a>
		{
			GPIO_PinSource++;
 8000bb0:	89fb      	ldrh	r3, [r7, #14]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	8b1b      	ldrh	r3, [r3, #24]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	89fb      	ldrh	r3, [r7, #14]
 8000bbe:	fa42 f303 	asr.w	r3, r2, r3
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f2      	beq.n	8000bb0 <SPI_Dev_Init+0x154>
		}
		GPIO_PinAFConfig(BP -> GPIOx_SCK  , GPIO_PinSource, GPIO_AF_SPI2);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	89f9      	ldrh	r1, [r7, #14]
 8000bd0:	2205      	movs	r2, #5
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fcdc 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000bdc:	e002      	b.n	8000be4 <SPI_Dev_Init+0x188>
		{
			GPIO_PinSource++;
 8000bde:	89fb      	ldrh	r3, [r7, #14]
 8000be0:	3301      	adds	r3, #1
 8000be2:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	8c1b      	ldrh	r3, [r3, #32]
 8000be8:	461a      	mov	r2, r3
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	fa42 f303 	asr.w	r3, r2, r3
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f2      	beq.n	8000bde <SPI_Dev_Init+0x182>
		}
		GPIO_PinAFConfig(BP -> GPIOx_NSS  , GPIO_PinSource, GPIO_AF_SPI2);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	89f9      	ldrh	r1, [r7, #14]
 8000bfe:	2205      	movs	r2, #5
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fcc5 	bl	8002590 <GPIO_PinAFConfig>
 8000c06:	e1a2      	b.n	8000f4e <SPI_Dev_Init+0x4f2>
	}
	else if(BP->SPIx == SPI3)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8000cf8 <SPI_Dev_Init+0x29c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d161      	bne.n	8000cd6 <SPI_Dev_Init+0x27a>
	{
		GPIO_PinSource=0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	81fb      	strh	r3, [r7, #14]
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3,ENABLE);
 8000c16:	2101      	movs	r1, #1
 8000c18:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c1c:	f001 fd54 	bl	80026c8 <RCC_APB1PeriphClockCmd>
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000c20:	e002      	b.n	8000c28 <SPI_Dev_Init+0x1cc>
		{
			GPIO_PinSource++;
 8000c22:	89fb      	ldrh	r3, [r7, #14]
 8000c24:	3301      	adds	r3, #1
 8000c26:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	891b      	ldrh	r3, [r3, #8]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	fa42 f303 	asr.w	r3, r2, r3
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f2      	beq.n	8000c22 <SPI_Dev_Init+0x1c6>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MISO , GPIO_PinSource, GPIO_AF_SPI3);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	89f9      	ldrh	r1, [r7, #14]
 8000c42:	2206      	movs	r2, #6
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fca3 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000c4e:	e002      	b.n	8000c56 <SPI_Dev_Init+0x1fa>
		{
			GPIO_PinSource++;
 8000c50:	89fb      	ldrh	r3, [r7, #14]
 8000c52:	3301      	adds	r3, #1
 8000c54:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	8a1b      	ldrh	r3, [r3, #16]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
 8000c5e:	fa42 f303 	asr.w	r3, r2, r3
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f2      	beq.n	8000c50 <SPI_Dev_Init+0x1f4>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MOSI , GPIO_PinSource, GPIO_AF_SPI3);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	89f9      	ldrh	r1, [r7, #14]
 8000c70:	2206      	movs	r2, #6
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fc8c 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000c7c:	e002      	b.n	8000c84 <SPI_Dev_Init+0x228>
		{
			GPIO_PinSource++;
 8000c7e:	89fb      	ldrh	r3, [r7, #14]
 8000c80:	3301      	adds	r3, #1
 8000c82:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8b1b      	ldrh	r3, [r3, #24]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	89fb      	ldrh	r3, [r7, #14]
 8000c8c:	fa42 f303 	asr.w	r3, r2, r3
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f2      	beq.n	8000c7e <SPI_Dev_Init+0x222>
		}
		GPIO_PinAFConfig(BP -> GPIOx_SCK  , GPIO_PinSource, GPIO_AF_SPI3);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	89f9      	ldrh	r1, [r7, #14]
 8000c9e:	2206      	movs	r2, #6
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fc75 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000caa:	e002      	b.n	8000cb2 <SPI_Dev_Init+0x256>
		{
			GPIO_PinSource++;
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	8c1b      	ldrh	r3, [r3, #32]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	fa42 f303 	asr.w	r3, r2, r3
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f2      	beq.n	8000cac <SPI_Dev_Init+0x250>
		}
		GPIO_PinAFConfig(BP -> GPIOx_NSS  , GPIO_PinSource, GPIO_AF_SPI3);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	89f9      	ldrh	r1, [r7, #14]
 8000ccc:	2206      	movs	r2, #6
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fc5e 	bl	8002590 <GPIO_PinAFConfig>
 8000cd4:	e13b      	b.n	8000f4e <SPI_Dev_Init+0x4f2>
	}
	else if(BP->SPIx == SPI4)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <SPI_Dev_Init+0x2a0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d169      	bne.n	8000db4 <SPI_Dev_Init+0x358>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI4, ENABLE);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ce6:	f001 fd0f 	bl	8002708 <RCC_APB2PeriphClockCmd>
		GPIO_PinSource=0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000cee:	e00a      	b.n	8000d06 <SPI_Dev_Init+0x2aa>
 8000cf0:	40013000 	.word	0x40013000
 8000cf4:	40003800 	.word	0x40003800
 8000cf8:	40003c00 	.word	0x40003c00
 8000cfc:	40013400 	.word	0x40013400
		{
			GPIO_PinSource++;
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	3301      	adds	r3, #1
 8000d04:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	891b      	ldrh	r3, [r3, #8]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	fa42 f303 	asr.w	r3, r2, r3
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f2      	beq.n	8000d00 <SPI_Dev_Init+0x2a4>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MISO , GPIO_PinSource, GPIO_AF_SPI4);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	89f9      	ldrh	r1, [r7, #14]
 8000d20:	2205      	movs	r2, #5
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fc34 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000d2c:	e002      	b.n	8000d34 <SPI_Dev_Init+0x2d8>
		{
			GPIO_PinSource++;
 8000d2e:	89fb      	ldrh	r3, [r7, #14]
 8000d30:	3301      	adds	r3, #1
 8000d32:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	8a1b      	ldrh	r3, [r3, #16]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
 8000d3c:	fa42 f303 	asr.w	r3, r2, r3
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f2      	beq.n	8000d2e <SPI_Dev_Init+0x2d2>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MOSI , GPIO_PinSource, GPIO_AF_SPI4);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	89f9      	ldrh	r1, [r7, #14]
 8000d4e:	2205      	movs	r2, #5
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fc1d 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000d5a:	e002      	b.n	8000d62 <SPI_Dev_Init+0x306>
		{
			GPIO_PinSource++;
 8000d5c:	89fb      	ldrh	r3, [r7, #14]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	8b1b      	ldrh	r3, [r3, #24]
 8000d66:	461a      	mov	r2, r3
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	fa42 f303 	asr.w	r3, r2, r3
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f2      	beq.n	8000d5c <SPI_Dev_Init+0x300>
		}
		GPIO_PinAFConfig(BP -> GPIOx_SCK  , GPIO_PinSource, GPIO_AF_SPI4);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	89f9      	ldrh	r1, [r7, #14]
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fc06 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000d88:	e002      	b.n	8000d90 <SPI_Dev_Init+0x334>
		{
			GPIO_PinSource++;
 8000d8a:	89fb      	ldrh	r3, [r7, #14]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	8c1b      	ldrh	r3, [r3, #32]
 8000d94:	461a      	mov	r2, r3
 8000d96:	89fb      	ldrh	r3, [r7, #14]
 8000d98:	fa42 f303 	asr.w	r3, r2, r3
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f2      	beq.n	8000d8a <SPI_Dev_Init+0x32e>
		}
		GPIO_PinAFConfig(BP -> GPIOx_NSS  , GPIO_PinSource, GPIO_AF_SPI4);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	89f9      	ldrh	r1, [r7, #14]
 8000daa:	2205      	movs	r2, #5
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 fbef 	bl	8002590 <GPIO_PinAFConfig>
 8000db2:	e0cc      	b.n	8000f4e <SPI_Dev_Init+0x4f2>
	}
	else if(BP->SPIx == SPI5)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a8f      	ldr	r2, [pc, #572]	@ (8000ff8 <SPI_Dev_Init+0x59c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d161      	bne.n	8000e82 <SPI_Dev_Init+0x426>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI5, ENABLE);
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000dc4:	f001 fca0 	bl	8002708 <RCC_APB2PeriphClockCmd>
		GPIO_PinSource=0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000dcc:	e002      	b.n	8000dd4 <SPI_Dev_Init+0x378>
		{
			GPIO_PinSource++;
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	891b      	ldrh	r3, [r3, #8]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	89fb      	ldrh	r3, [r7, #14]
 8000ddc:	fa42 f303 	asr.w	r3, r2, r3
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f2      	beq.n	8000dce <SPI_Dev_Init+0x372>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MISO , GPIO_PinSource, GPIO_AF_SPI5);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	89f9      	ldrh	r1, [r7, #14]
 8000dee:	2205      	movs	r2, #5
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fbcd 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000dfa:	e002      	b.n	8000e02 <SPI_Dev_Init+0x3a6>
		{
			GPIO_PinSource++;
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	8a1b      	ldrh	r3, [r3, #16]
 8000e06:	461a      	mov	r2, r3
 8000e08:	89fb      	ldrh	r3, [r7, #14]
 8000e0a:	fa42 f303 	asr.w	r3, r2, r3
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f2      	beq.n	8000dfc <SPI_Dev_Init+0x3a0>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MOSI , GPIO_PinSource, GPIO_AF_SPI5);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	89f9      	ldrh	r1, [r7, #14]
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fbb6 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000e28:	e002      	b.n	8000e30 <SPI_Dev_Init+0x3d4>
		{
			GPIO_PinSource++;
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	8b1b      	ldrh	r3, [r3, #24]
 8000e34:	461a      	mov	r2, r3
 8000e36:	89fb      	ldrh	r3, [r7, #14]
 8000e38:	fa42 f303 	asr.w	r3, r2, r3
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f2      	beq.n	8000e2a <SPI_Dev_Init+0x3ce>
		}
		GPIO_PinAFConfig(BP -> GPIOx_SCK  , GPIO_PinSource, GPIO_AF_SPI5);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	89f9      	ldrh	r1, [r7, #14]
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fb9f 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000e56:	e002      	b.n	8000e5e <SPI_Dev_Init+0x402>
		{
			GPIO_PinSource++;
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	8c1b      	ldrh	r3, [r3, #32]
 8000e62:	461a      	mov	r2, r3
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	fa42 f303 	asr.w	r3, r2, r3
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f2      	beq.n	8000e58 <SPI_Dev_Init+0x3fc>
		}
		GPIO_PinAFConfig(BP -> GPIOx_NSS  , GPIO_PinSource, GPIO_AF_SPI5);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	89f9      	ldrh	r1, [r7, #14]
 8000e78:	2205      	movs	r2, #5
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fb88 	bl	8002590 <GPIO_PinAFConfig>
 8000e80:	e065      	b.n	8000f4e <SPI_Dev_Init+0x4f2>
	}
	else if(BP->SPIx == SPI6)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a5d      	ldr	r2, [pc, #372]	@ (8000ffc <SPI_Dev_Init+0x5a0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d160      	bne.n	8000f4e <SPI_Dev_Init+0x4f2>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI6, ENABLE);
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000e92:	f001 fc39 	bl	8002708 <RCC_APB2PeriphClockCmd>
		GPIO_PinSource=0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000e9a:	e002      	b.n	8000ea2 <SPI_Dev_Init+0x446>
		{
			GPIO_PinSource++;
 8000e9c:	89fb      	ldrh	r3, [r7, #14]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MISO & 1<<GPIO_PinSource))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	891b      	ldrh	r3, [r3, #8]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	89fb      	ldrh	r3, [r7, #14]
 8000eaa:	fa42 f303 	asr.w	r3, r2, r3
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f2      	beq.n	8000e9c <SPI_Dev_Init+0x440>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MISO , GPIO_PinSource, GPIO_AF_SPI6);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	89f9      	ldrh	r1, [r7, #14]
 8000ebc:	2205      	movs	r2, #5
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fb66 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000ec8:	e002      	b.n	8000ed0 <SPI_Dev_Init+0x474>
		{
			GPIO_PinSource++;
 8000eca:	89fb      	ldrh	r3, [r7, #14]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_MOSI & 1<<GPIO_PinSource))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	8a1b      	ldrh	r3, [r3, #16]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	fa42 f303 	asr.w	r3, r2, r3
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f2      	beq.n	8000eca <SPI_Dev_Init+0x46e>
		}
		GPIO_PinAFConfig(BP -> GPIOx_MOSI , GPIO_PinSource, GPIO_AF_SPI6);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	89f9      	ldrh	r1, [r7, #14]
 8000eea:	2205      	movs	r2, #5
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fb4f 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000ef6:	e002      	b.n	8000efe <SPI_Dev_Init+0x4a2>
		{
			GPIO_PinSource++;
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	3301      	adds	r3, #1
 8000efc:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_SCK & 1<<GPIO_PinSource))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	8b1b      	ldrh	r3, [r3, #24]
 8000f02:	461a      	mov	r2, r3
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	fa42 f303 	asr.w	r3, r2, r3
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f2      	beq.n	8000ef8 <SPI_Dev_Init+0x49c>
		}
		GPIO_PinAFConfig(BP -> GPIOx_SCK  , GPIO_PinSource, GPIO_AF_SPI6);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	89f9      	ldrh	r1, [r7, #14]
 8000f18:	2205      	movs	r2, #5
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fb38 	bl	8002590 <GPIO_PinAFConfig>

		GPIO_PinSource=0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000f24:	e002      	b.n	8000f2c <SPI_Dev_Init+0x4d0>
		{
			GPIO_PinSource++;
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	81fb      	strh	r3, [r7, #14]
		while(!( BP -> GPIO_Pin_NSS & 1<<GPIO_PinSource))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	8c1b      	ldrh	r3, [r3, #32]
 8000f30:	461a      	mov	r2, r3
 8000f32:	89fb      	ldrh	r3, [r7, #14]
 8000f34:	fa42 f303 	asr.w	r3, r2, r3
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f2      	beq.n	8000f26 <SPI_Dev_Init+0x4ca>
		}
		GPIO_PinAFConfig(BP -> GPIOx_NSS  , GPIO_PinSource, GPIO_AF_SPI6);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69db      	ldr	r3, [r3, #28]
 8000f44:	89f9      	ldrh	r1, [r7, #14]
 8000f46:	2205      	movs	r2, #5
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fb21 	bl	8002590 <GPIO_PinAFConfig>
	}

	GPIO_SPI_Struct.GPIO_Pin = (BP -> GPIO_Pin_MISO) ;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	891b      	ldrh	r3, [r3, #8]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <SPI_Dev_Init+0x5a4>)
 8000f56:	601a      	str	r2, [r3, #0]
	GPIO_Init(BP -> GPIOx_MISO, &GPIO_SPI_Struct);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4928      	ldr	r1, [pc, #160]	@ (8001000 <SPI_Dev_Init+0x5a4>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fa68 	bl	8002434 <GPIO_Init>

	GPIO_SPI_Struct.GPIO_Pin = (BP -> GPIO_Pin_MOSI) ;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	8a1b      	ldrh	r3, [r3, #16]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b25      	ldr	r3, [pc, #148]	@ (8001000 <SPI_Dev_Init+0x5a4>)
 8000f6c:	601a      	str	r2, [r3, #0]
	GPIO_Init(BP -> GPIOx_MOSI, &GPIO_SPI_Struct);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	4923      	ldr	r1, [pc, #140]	@ (8001000 <SPI_Dev_Init+0x5a4>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fa5d 	bl	8002434 <GPIO_Init>

	GPIO_SPI_Struct.GPIO_Pin = (BP -> GPIO_Pin_SCK) ;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	8b1b      	ldrh	r3, [r3, #24]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <SPI_Dev_Init+0x5a4>)
 8000f82:	601a      	str	r2, [r3, #0]
	GPIO_Init(BP -> GPIOx_SCK, &GPIO_SPI_Struct);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	491d      	ldr	r1, [pc, #116]	@ (8001000 <SPI_Dev_Init+0x5a4>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fa52 	bl	8002434 <GPIO_Init>

	if(SPI_InitStructure.SPI_Mode == SPI_Mode_Slave)
 8000f90:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <SPI_Dev_Init+0x5a8>)
 8000f92:	885b      	ldrh	r3, [r3, #2]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10d      	bne.n	8000fb4 <SPI_Dev_Init+0x558>
	{
		GPIO_SPI_Struct.GPIO_Pin = (BP -> GPIO_Pin_NSS);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	8c1b      	ldrh	r3, [r3, #32]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <SPI_Dev_Init+0x5a4>)
 8000fa0:	601a      	str	r2, [r3, #0]
		GPIO_SPI_Struct.GPIO_Mode = GPIO_Mode_IN;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <SPI_Dev_Init+0x5a4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	711a      	strb	r2, [r3, #4]
		GPIO_Init(BP ->GPIOx_NSS , &GPIO_SPI_Struct);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	4914      	ldr	r1, [pc, #80]	@ (8001000 <SPI_Dev_Init+0x5a4>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fa40 	bl	8002434 <GPIO_Init>
	}

	SPI_Init(BP ->SPIx, &SPI_InitStructure);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4912      	ldr	r1, [pc, #72]	@ (8001004 <SPI_Dev_Init+0x5a8>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fbc4 	bl	8002748 <SPI_Init>
	SPI_Cmd(BP ->SPIx, ENABLE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 fc02 	bl	80027d0 <SPI_Cmd>

	NVIC_InitTypeDef NVIC_InitStructure;

	SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2160      	movs	r1, #96	@ 0x60
 8000fd0:	480d      	ldr	r0, [pc, #52]	@ (8001008 <SPI_Dev_Init+0x5ac>)
 8000fd2:	f001 fc4a 	bl	800286a <SPI_I2S_ITConfig>

	//Enable and set SPI1 interrupt to the highest priority
	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
 8000fd6:	2323      	movs	r3, #35	@ 0x23
 8000fd8:	723b      	strb	r3, [r7, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	727b      	strb	r3, [r7, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f9c0 	bl	8002370 <NVIC_Init>

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40015000 	.word	0x40015000
 8000ffc:	40015400 	.word	0x40015400
 8001000:	200000a4 	.word	0x200000a4
 8001004:	20000090 	.word	0x20000090
 8001008:	40013000 	.word	0x40013000

0800100c <Car_Init>:

void Car_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	ENC_Init(&Left_ENC);
 8001010:	480a      	ldr	r0, [pc, #40]	@ (800103c <Car_Init+0x30>)
 8001012:	f000 f989 	bl	8001328 <ENC_Init>
	ENC_Init(&Right_ENC);
 8001016:	480a      	ldr	r0, [pc, #40]	@ (8001040 <Car_Init+0x34>)
 8001018:	f000 f986 	bl	8001328 <ENC_Init>

	ULTRASONIC_vInit(&Front_US);
 800101c:	4809      	ldr	r0, [pc, #36]	@ (8001044 <Car_Init+0x38>)
 800101e:	f000 fb09 	bl	8001634 <ULTRASONIC_vInit>
	ULTRASONIC_vInit(&Right_US);
 8001022:	4809      	ldr	r0, [pc, #36]	@ (8001048 <Car_Init+0x3c>)
 8001024:	f000 fb06 	bl	8001634 <ULTRASONIC_vInit>
	ULTRASONIC_vInit(&Left_US);
 8001028:	4808      	ldr	r0, [pc, #32]	@ (800104c <Car_Init+0x40>)
 800102a:	f000 fb03 	bl	8001634 <ULTRASONIC_vInit>


	SPI_Dev_Init(&BP1);
 800102e:	4808      	ldr	r0, [pc, #32]	@ (8001050 <Car_Init+0x44>)
 8001030:	f7ff fd14 	bl	8000a5c <SPI_Dev_Init>
	RCC_DeInit();
 8001034:	f001 faf6 	bl	8002624 <RCC_DeInit>

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000018 	.word	0x20000018
 8001044:	20000058 	.word	0x20000058
 8001048:	20000044 	.word	0x20000044
 800104c:	20000030 	.word	0x20000030
 8001050:	2000006c 	.word	0x2000006c

08001054 <vSysInit>:
void vTaskGetDistance		(void* arg);
void vTaskGetSpeed			(void* arg);

/********************************************Atomic Functions*******************************************************/
NSys_ReturnType_e vSysInit()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	NSys_ReturnType_e rt = Sys_NO_ERROR;
 800105a:	2302      	movs	r3, #2
 800105c:	71fb      	strb	r3, [r7, #7]

	rt = vAppTaskCreate();
 800105e:	f000 f809 	bl	8001074 <vAppTaskCreate>
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	Car_Init();
 8001066:	f7ff ffd1 	bl	800100c <Car_Init>
	return rt;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <vAppTaskCreate>:


static NSys_ReturnType_e vAppTaskCreate()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
	NSys_ReturnType_e rt_type = Sys_NO_ERROR;
 800107a:	2302      	movs	r3, #2
 800107c:	73fb      	strb	r3, [r7, #15]

	BaseType_t vTaskGetDistance_Handler;
	BaseType_t vTaskGetSpeed_Handler;

	/*Create the tasks then check if it is actually created or not.*/
	vTaskGetDistance_Handler =  xTaskCreate(vTaskGetDistance,"vTaskGetDistance", 100, NULL, vTaskGetDistance_PRIORITY ,NULL);
 800107e:	2300      	movs	r3, #0
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2303      	movs	r3, #3
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2300      	movs	r3, #0
 8001088:	2264      	movs	r2, #100	@ 0x64
 800108a:	490f      	ldr	r1, [pc, #60]	@ (80010c8 <vAppTaskCreate+0x54>)
 800108c:	480f      	ldr	r0, [pc, #60]	@ (80010cc <vAppTaskCreate+0x58>)
 800108e:	f002 f857 	bl	8003140 <xTaskCreate>
 8001092:	60b8      	str	r0, [r7, #8]
	if(vTaskGetDistance_Handler != pdPASS)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d001      	beq.n	800109e <vAppTaskCreate+0x2a>
	{
		rt_type = ERROR_COULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
	}


	vTaskGetSpeed_Handler =  xTaskCreate(vTaskGetSpeed,"vTaskGetSpeed", 100, NULL, vTaskGetSpeed_PRIORITY ,NULL);
 800109e:	2300      	movs	r3, #0
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	2302      	movs	r3, #2
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	2264      	movs	r2, #100	@ 0x64
 80010aa:	4909      	ldr	r1, [pc, #36]	@ (80010d0 <vAppTaskCreate+0x5c>)
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <vAppTaskCreate+0x60>)
 80010ae:	f002 f847 	bl	8003140 <xTaskCreate>
 80010b2:	6078      	str	r0, [r7, #4]
	if(vTaskGetSpeed_Handler != pdPASS)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d001      	beq.n	80010be <vAppTaskCreate+0x4a>
	{
		rt_type = ERROR_COULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
	}

	return rt_type;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	0800436c 	.word	0x0800436c
 80010cc:	080010d9 	.word	0x080010d9
 80010d0:	08004380 	.word	0x08004380
 80010d4:	08001211 	.word	0x08001211

080010d8 <vTaskGetDistance>:
/**************************************Scheduling Tasks************************************/


uint16_t Loc_Front_val , Loc_Right_val, Loc_Left_val;
void vTaskGetDistance(void* arg)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

	uint8_t counter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		Loc_Front_val = 0;
 80010e4:	4b40      	ldr	r3, [pc, #256]	@ (80011e8 <vTaskGetDistance+0x110>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	801a      	strh	r2, [r3, #0]
		Loc_Right_val = 0;
 80010ea:	4b40      	ldr	r3, [pc, #256]	@ (80011ec <vTaskGetDistance+0x114>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
		Loc_Left_val = 0;
 80010f0:	4b3f      	ldr	r3, [pc, #252]	@ (80011f0 <vTaskGetDistance+0x118>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	801a      	strh	r2, [r3, #0]

		for(counter =0; counter<3; counter++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e03e      	b.n	800117a <vTaskGetDistance+0xa2>
		{

			ULTRASONIC_vTrig(&Front_US);
 80010fc:	483d      	ldr	r0, [pc, #244]	@ (80011f4 <vTaskGetDistance+0x11c>)
 80010fe:	f000 fbdd 	bl	80018bc <ULTRASONIC_vTrig>
			ULTRASONIC_vTrig(&Right_US);
 8001102:	483d      	ldr	r0, [pc, #244]	@ (80011f8 <vTaskGetDistance+0x120>)
 8001104:	f000 fbda 	bl	80018bc <ULTRASONIC_vTrig>
			ULTRASONIC_vTrig(&Left_US);
 8001108:	483c      	ldr	r0, [pc, #240]	@ (80011fc <vTaskGetDistance+0x124>)
 800110a:	f000 fbd7 	bl	80018bc <ULTRASONIC_vTrig>

			vTaskDelay(15);
 800110e:	200f      	movs	r0, #15
 8001110:	f002 f946 	bl	80033a0 <vTaskDelay>

			Loc_Front_val += (uint16_t)ULTRASONIC_u8GetDistance(&Front_US);
 8001114:	4837      	ldr	r0, [pc, #220]	@ (80011f4 <vTaskGetDistance+0x11c>)
 8001116:	f000 fbef 	bl	80018f8 <ULTRASONIC_u8GetDistance>
 800111a:	eef0 7a40 	vmov.f32	s15, s0
 800111e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001122:	ee17 3a90 	vmov	r3, s15
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <vTaskGetDistance+0x110>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	4413      	add	r3, r2
 800112e:	b29a      	uxth	r2, r3
 8001130:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <vTaskGetDistance+0x110>)
 8001132:	801a      	strh	r2, [r3, #0]
			Loc_Right_val += (uint16_t)ULTRASONIC_u8GetDistance(&Right_US);
 8001134:	4830      	ldr	r0, [pc, #192]	@ (80011f8 <vTaskGetDistance+0x120>)
 8001136:	f000 fbdf 	bl	80018f8 <ULTRASONIC_u8GetDistance>
 800113a:	eef0 7a40 	vmov.f32	s15, s0
 800113e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001142:	ee17 3a90 	vmov	r3, s15
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <vTaskGetDistance+0x114>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4413      	add	r3, r2
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b26      	ldr	r3, [pc, #152]	@ (80011ec <vTaskGetDistance+0x114>)
 8001152:	801a      	strh	r2, [r3, #0]
			Loc_Left_val  += (uint16_t)ULTRASONIC_u8GetDistance(&Left_US);
 8001154:	4829      	ldr	r0, [pc, #164]	@ (80011fc <vTaskGetDistance+0x124>)
 8001156:	f000 fbcf 	bl	80018f8 <ULTRASONIC_u8GetDistance>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001162:	ee17 3a90 	vmov	r3, s15
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <vTaskGetDistance+0x118>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	4413      	add	r3, r2
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <vTaskGetDistance+0x118>)
 8001172:	801a      	strh	r2, [r3, #0]
		for(counter =0; counter<3; counter++)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	3301      	adds	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d9bd      	bls.n	80010fc <vTaskGetDistance+0x24>

		}

		/* Get AVG */
		Loc_Front_val = ( Loc_Front_val / 3);
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <vTaskGetDistance+0x110>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4a1e      	ldr	r2, [pc, #120]	@ (8001200 <vTaskGetDistance+0x128>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	085b      	lsrs	r3, r3, #1
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <vTaskGetDistance+0x110>)
 8001190:	801a      	strh	r2, [r3, #0]
		Loc_Right_val = ( Loc_Right_val / 3);
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <vTaskGetDistance+0x114>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	4a1a      	ldr	r2, [pc, #104]	@ (8001200 <vTaskGetDistance+0x128>)
 8001198:	fba2 2303 	umull	r2, r3, r2, r3
 800119c:	085b      	lsrs	r3, r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <vTaskGetDistance+0x114>)
 80011a2:	801a      	strh	r2, [r3, #0]
		Loc_Left_val =  ( Loc_Left_val  / 3);
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <vTaskGetDistance+0x118>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	4a15      	ldr	r2, [pc, #84]	@ (8001200 <vTaskGetDistance+0x128>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	085b      	lsrs	r3, r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <vTaskGetDistance+0x118>)
 80011b4:	801a      	strh	r2, [r3, #0]



		/* test ADD ID */
		gFront_Distance = (Loc_Front_val | 0x1000);
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <vTaskGetDistance+0x110>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <vTaskGetDistance+0x12c>)
 80011c2:	801a      	strh	r2, [r3, #0]
		gRight_Distance = (Loc_Right_val | 0x2000);
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <vTaskGetDistance+0x114>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <vTaskGetDistance+0x130>)
 80011d0:	801a      	strh	r2, [r3, #0]
		gLeft_Distance  = (Loc_Left_val  | 0x3000);
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <vTaskGetDistance+0x118>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <vTaskGetDistance+0x134>)
 80011de:	801a      	strh	r2, [r3, #0]

		vTaskDelay(250);
 80011e0:	20fa      	movs	r0, #250	@ 0xfa
 80011e2:	f002 f8dd 	bl	80033a0 <vTaskDelay>
		Loc_Front_val = 0;
 80011e6:	e77d      	b.n	80010e4 <vTaskGetDistance+0xc>
 80011e8:	200000ea 	.word	0x200000ea
 80011ec:	200000ec 	.word	0x200000ec
 80011f0:	200000ee 	.word	0x200000ee
 80011f4:	20000058 	.word	0x20000058
 80011f8:	20000044 	.word	0x20000044
 80011fc:	20000030 	.word	0x20000030
 8001200:	aaaaaaab 	.word	0xaaaaaaab
 8001204:	200000e0 	.word	0x200000e0
 8001208:	200000e2 	.word	0x200000e2
 800120c:	200000e4 	.word	0x200000e4

08001210 <vTaskGetSpeed>:
	}
}


void vTaskGetSpeed(void* arg)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

	while(1)
	{

		Right_ENC_Speed = (uint8_t)ENC_GetMotorSpeed(&Right_ENC);
 8001218:	4817      	ldr	r0, [pc, #92]	@ (8001278 <vTaskGetSpeed+0x68>)
 800121a:	f000 f9a5 	bl	8001568 <ENC_GetMotorSpeed>
 800121e:	eef0 7a40 	vmov.f32	s15, s0
 8001222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001226:	edc7 7a00 	vstr	s15, [r7]
 800122a:	783b      	ldrb	r3, [r7, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <vTaskGetSpeed+0x6c>)
 8001232:	801a      	strh	r2, [r3, #0]
		Left_ENC_Speed  = (uint8_t)ENC_GetMotorSpeed(&Left_ENC);
 8001234:	4812      	ldr	r0, [pc, #72]	@ (8001280 <vTaskGetSpeed+0x70>)
 8001236:	f000 f997 	bl	8001568 <ENC_GetMotorSpeed>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001242:	edc7 7a00 	vstr	s15, [r7]
 8001246:	783b      	ldrb	r3, [r7, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <vTaskGetSpeed+0x74>)
 800124e:	801a      	strh	r2, [r3, #0]

		Right_ENC_Speed = ( Right_ENC_Speed | 0x4000);
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <vTaskGetSpeed+0x6c>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <vTaskGetSpeed+0x6c>)
 800125c:	801a      	strh	r2, [r3, #0]
		Left_ENC_Speed  = ( Left_ENC_Speed| 0x5000);
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <vTaskGetSpeed+0x74>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <vTaskGetSpeed+0x74>)
 800126a:	801a      	strh	r2, [r3, #0]
		vTaskDelay(50);
 800126c:	2032      	movs	r0, #50	@ 0x32
 800126e:	f002 f897 	bl	80033a0 <vTaskDelay>
		Right_ENC_Speed = (uint8_t)ENC_GetMotorSpeed(&Right_ENC);
 8001272:	bf00      	nop
 8001274:	e7d0      	b.n	8001218 <vTaskGetSpeed+0x8>
 8001276:	bf00      	nop
 8001278:	20000018 	.word	0x20000018
 800127c:	200000e6 	.word	0x200000e6
 8001280:	20000000 	.word	0x20000000
 8001284:	200000e8 	.word	0x200000e8

08001288 <SPI1_IRQHandler>:




void SPI1_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

	uint8_t Loc_ID = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]
	Loc_ID = SPI_I2S_ReceiveData(SPI1);
 8001292:	481f      	ldr	r0, [pc, #124]	@ (8001310 <SPI1_IRQHandler+0x88>)
 8001294:	f001 fabc 	bl	8002810 <SPI_I2S_ReceiveData>
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
	switch(Loc_ID)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	3b01      	subs	r3, #1
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d830      	bhi.n	8001306 <SPI1_IRQHandler+0x7e>
 80012a4:	a201      	add	r2, pc, #4	@ (adr r2, 80012ac <SPI1_IRQHandler+0x24>)
 80012a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012aa:	bf00      	nop
 80012ac:	080012c1 	.word	0x080012c1
 80012b0:	080012cf 	.word	0x080012cf
 80012b4:	080012dd 	.word	0x080012dd
 80012b8:	080012eb 	.word	0x080012eb
 80012bc:	080012f9 	.word	0x080012f9
	{
	case FRONT_US_ID:
		SPI_I2S_SendData(SPI1, gFront_Distance);
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <SPI1_IRQHandler+0x8c>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4812      	ldr	r0, [pc, #72]	@ (8001310 <SPI1_IRQHandler+0x88>)
 80012c8:	f001 faaf 	bl	800282a <SPI_I2S_SendData>
		break;
 80012cc:	e01b      	b.n	8001306 <SPI1_IRQHandler+0x7e>
	case RIGHT_US_ID :
		SPI_I2S_SendData(SPI1, gRight_Distance);
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <SPI1_IRQHandler+0x90>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	480e      	ldr	r0, [pc, #56]	@ (8001310 <SPI1_IRQHandler+0x88>)
 80012d6:	f001 faa8 	bl	800282a <SPI_I2S_SendData>
		break;
 80012da:	e014      	b.n	8001306 <SPI1_IRQHandler+0x7e>
	case LEFT_US_ID:
		SPI_I2S_SendData(SPI1, gLeft_Distance);
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <SPI1_IRQHandler+0x94>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	480b      	ldr	r0, [pc, #44]	@ (8001310 <SPI1_IRQHandler+0x88>)
 80012e4:	f001 faa1 	bl	800282a <SPI_I2S_SendData>
		break;
 80012e8:	e00d      	b.n	8001306 <SPI1_IRQHandler+0x7e>
	case RIGHT_ENC_ID:
		SPI_I2S_SendData(SPI1, Right_ENC_Speed);
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <SPI1_IRQHandler+0x98>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4807      	ldr	r0, [pc, #28]	@ (8001310 <SPI1_IRQHandler+0x88>)
 80012f2:	f001 fa9a 	bl	800282a <SPI_I2S_SendData>
		break;
 80012f6:	e006      	b.n	8001306 <SPI1_IRQHandler+0x7e>
	case LEFT_ENC_ID :
		SPI_I2S_SendData(SPI1, Left_ENC_Speed);
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <SPI1_IRQHandler+0x9c>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4804      	ldr	r0, [pc, #16]	@ (8001310 <SPI1_IRQHandler+0x88>)
 8001300:	f001 fa93 	bl	800282a <SPI_I2S_SendData>
		break;
 8001304:	bf00      	nop
	}

}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40013000 	.word	0x40013000
 8001314:	200000e0 	.word	0x200000e0
 8001318:	200000e2 	.word	0x200000e2
 800131c:	200000e4 	.word	0x200000e4
 8001320:	200000e6 	.word	0x200000e6
 8001324:	200000e8 	.word	0x200000e8

08001328 <ENC_Init>:
											   GPIO_OType_PP,
											   GPIO_PuPd_NOPULL
											  };

void ENC_Init(ENCODER* ENCx)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t GPIO_AF;
	uint16_t GPIO_PinSource = 0x00;
 8001330:	2300      	movs	r3, #0
 8001332:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStruct_ChA.GPIO_Pin = ENCx->GPIO_Pin_ChA;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	889b      	ldrh	r3, [r3, #4]
 8001338:	461a      	mov	r2, r3
 800133a:	4b7d      	ldr	r3, [pc, #500]	@ (8001530 <ENC_Init+0x208>)
 800133c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct_ChB.GPIO_Pin = ENCx->GPIO_Pin_ChB;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	899b      	ldrh	r3, [r3, #12]
 8001342:	461a      	mov	r2, r3
 8001344:	4b7b      	ldr	r3, [pc, #492]	@ (8001534 <ENC_Init+0x20c>)
 8001346:	601a      	str	r2, [r3, #0]

	if(ENCx->GPIOx_chA == GPIOA)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a7a      	ldr	r2, [pc, #488]	@ (8001538 <ENC_Init+0x210>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d104      	bne.n	800135c <ENC_Init+0x34>
	{
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001352:	2101      	movs	r1, #1
 8001354:	2001      	movs	r0, #1
 8001356:	f001 f997 	bl	8002688 <RCC_AHB1PeriphClockCmd>
 800135a:	e012      	b.n	8001382 <ENC_Init+0x5a>
	}
	else if(ENCx->GPIOx_chA == GPIOB)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a76      	ldr	r2, [pc, #472]	@ (800153c <ENC_Init+0x214>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d104      	bne.n	8001370 <ENC_Init+0x48>
	{
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001366:	2101      	movs	r1, #1
 8001368:	2002      	movs	r0, #2
 800136a:	f001 f98d 	bl	8002688 <RCC_AHB1PeriphClockCmd>
 800136e:	e008      	b.n	8001382 <ENC_Init+0x5a>
	}
	else if(ENCx->GPIOx_chA == GPIOC)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a72      	ldr	r2, [pc, #456]	@ (8001540 <ENC_Init+0x218>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d103      	bne.n	8001382 <ENC_Init+0x5a>
	{
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800137a:	2101      	movs	r1, #1
 800137c:	2004      	movs	r0, #4
 800137e:	f001 f983 	bl	8002688 <RCC_AHB1PeriphClockCmd>
	}

	if(ENCx->GPIOx_chB != ENCx->GPIOx_chA)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d01c      	beq.n	80013c8 <ENC_Init+0xa0>
	{
		if(ENCx->GPIOx_chB == GPIOA)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	4a69      	ldr	r2, [pc, #420]	@ (8001538 <ENC_Init+0x210>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d104      	bne.n	80013a2 <ENC_Init+0x7a>
		{
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001398:	2101      	movs	r1, #1
 800139a:	2001      	movs	r0, #1
 800139c:	f001 f974 	bl	8002688 <RCC_AHB1PeriphClockCmd>
 80013a0:	e012      	b.n	80013c8 <ENC_Init+0xa0>
		}
		else if(ENCx->GPIOx_chB == GPIOC)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	4a66      	ldr	r2, [pc, #408]	@ (8001540 <ENC_Init+0x218>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d104      	bne.n	80013b6 <ENC_Init+0x8e>
		{
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80013ac:	2101      	movs	r1, #1
 80013ae:	2002      	movs	r0, #2
 80013b0:	f001 f96a 	bl	8002688 <RCC_AHB1PeriphClockCmd>
 80013b4:	e008      	b.n	80013c8 <ENC_Init+0xa0>
		}
		else if(ENCx->GPIOx_chB == GPIOC)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	4a61      	ldr	r2, [pc, #388]	@ (8001540 <ENC_Init+0x218>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d103      	bne.n	80013c8 <ENC_Init+0xa0>
		{
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80013c0:	2101      	movs	r1, #1
 80013c2:	2004      	movs	r0, #4
 80013c4:	f001 f960 	bl	8002688 <RCC_AHB1PeriphClockCmd>
		}
	}

    if(ENCx->TIMx == TIM1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001544 <ENC_Init+0x21c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d106      	bne.n	80013e0 <ENC_Init+0xb8>
    {
    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80013d2:	2101      	movs	r1, #1
 80013d4:	2001      	movs	r0, #1
 80013d6:	f001 f997 	bl	8002708 <RCC_APB2PeriphClockCmd>
    	GPIO_AF = GPIO_AF_TIM1;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e059      	b.n	8001494 <ENC_Init+0x16c>
    }
    else if(ENCx->TIMx == TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013e8:	d106      	bne.n	80013f8 <ENC_Init+0xd0>
    {
    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80013ea:	2101      	movs	r1, #1
 80013ec:	2001      	movs	r0, #1
 80013ee:	f001 f96b 	bl	80026c8 <RCC_APB1PeriphClockCmd>
    	GPIO_AF = GPIO_AF_TIM2;
 80013f2:	2301      	movs	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e04d      	b.n	8001494 <ENC_Init+0x16c>
	}
	else if(ENCx->TIMx == TIM3)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	4a52      	ldr	r2, [pc, #328]	@ (8001548 <ENC_Init+0x220>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d106      	bne.n	8001410 <ENC_Init+0xe8>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001402:	2101      	movs	r1, #1
 8001404:	2002      	movs	r0, #2
 8001406:	f001 f95f 	bl	80026c8 <RCC_APB1PeriphClockCmd>
    	GPIO_AF = GPIO_AF_TIM3;
 800140a:	2302      	movs	r3, #2
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e041      	b.n	8001494 <ENC_Init+0x16c>
	}
	else if(ENCx->TIMx == TIM4)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4a4d      	ldr	r2, [pc, #308]	@ (800154c <ENC_Init+0x224>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d106      	bne.n	8001428 <ENC_Init+0x100>
	{
    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800141a:	2101      	movs	r1, #1
 800141c:	2004      	movs	r0, #4
 800141e:	f001 f953 	bl	80026c8 <RCC_APB1PeriphClockCmd>
    	GPIO_AF = GPIO_AF_TIM4;
 8001422:	2302      	movs	r3, #2
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e035      	b.n	8001494 <ENC_Init+0x16c>
	}
	else if(ENCx->TIMx == TIM5)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	4a48      	ldr	r2, [pc, #288]	@ (8001550 <ENC_Init+0x228>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d106      	bne.n	8001440 <ENC_Init+0x118>
	{
    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001432:	2101      	movs	r1, #1
 8001434:	2008      	movs	r0, #8
 8001436:	f001 f947 	bl	80026c8 <RCC_APB1PeriphClockCmd>
    	GPIO_AF = GPIO_AF_TIM5;
 800143a:	2302      	movs	r3, #2
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e029      	b.n	8001494 <ENC_Init+0x16c>
	}
	else if(ENCx->TIMx == TIM9)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	4a43      	ldr	r2, [pc, #268]	@ (8001554 <ENC_Init+0x22c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d107      	bne.n	800145a <ENC_Init+0x132>
	{
    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
 800144a:	2101      	movs	r1, #1
 800144c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001450:	f001 f95a 	bl	8002708 <RCC_APB2PeriphClockCmd>
    	GPIO_AF = GPIO_AF_TIM9;
 8001454:	2303      	movs	r3, #3
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e01c      	b.n	8001494 <ENC_Init+0x16c>
	}
	else if(ENCx->TIMx == TIM10)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	4a3e      	ldr	r2, [pc, #248]	@ (8001558 <ENC_Init+0x230>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d107      	bne.n	8001474 <ENC_Init+0x14c>
	{
    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001464:	2101      	movs	r1, #1
 8001466:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800146a:	f001 f94d 	bl	8002708 <RCC_APB2PeriphClockCmd>
    	GPIO_AF = GPIO_AF_TIM10;
 800146e:	2303      	movs	r3, #3
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e00f      	b.n	8001494 <ENC_Init+0x16c>
	}
	else if(ENCx->TIMx == TIM11)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	4a38      	ldr	r2, [pc, #224]	@ (800155c <ENC_Init+0x234>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10a      	bne.n	8001494 <ENC_Init+0x16c>
	{
    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM11, ENABLE);
 800147e:	2101      	movs	r1, #1
 8001480:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001484:	f001 f940 	bl	8002708 <RCC_APB2PeriphClockCmd>
    	GPIO_AF = GPIO_AF_TIM11;
 8001488:	2303      	movs	r3, #3
 800148a:	73fb      	strb	r3, [r7, #15]
	}

    while(!(ENCx->GPIO_Pin_ChA & 1<<GPIO_PinSource))
 800148c:	e002      	b.n	8001494 <ENC_Init+0x16c>
    {
    	GPIO_PinSource++;
 800148e:	89bb      	ldrh	r3, [r7, #12]
 8001490:	3301      	adds	r3, #1
 8001492:	81bb      	strh	r3, [r7, #12]
    while(!(ENCx->GPIO_Pin_ChA & 1<<GPIO_PinSource))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	889b      	ldrh	r3, [r3, #4]
 8001498:	461a      	mov	r2, r3
 800149a:	89bb      	ldrh	r3, [r7, #12]
 800149c:	fa42 f303 	asr.w	r3, r2, r3
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f2      	beq.n	800148e <ENC_Init+0x166>
    }


    GPIO_Init(ENCx->GPIOx_chA,&GPIO_InitStruct_ChA);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4920      	ldr	r1, [pc, #128]	@ (8001530 <ENC_Init+0x208>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 ffc0 	bl	8002434 <GPIO_Init>
    GPIO_PinAFConfig(ENCx->GPIOx_chA, GPIO_PinSource, GPIO_AF);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	89b9      	ldrh	r1, [r7, #12]
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 f867 	bl	8002590 <GPIO_PinAFConfig>
    GPIO_Init(ENCx->GPIOx_chB,&GPIO_InitStruct_ChB);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	491b      	ldr	r1, [pc, #108]	@ (8001534 <ENC_Init+0x20c>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 ffb3 	bl	8002434 <GPIO_Init>

    TIM_SetAutoreload(ENCx->TIMx, 0xFFFF);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 faa0 	bl	8002a1c <TIM_SetAutoreload>
    TIM_TimeBaseStructInit(&TIM_TimeBaseInitStruct);
 80014dc:	4820      	ldr	r0, [pc, #128]	@ (8001560 <ENC_Init+0x238>)
 80014de:	f001 fa61 	bl	80029a4 <TIM_TimeBaseStructInit>
    TIM_TimeBaseInit(ENCx->TIMx,&TIM_TimeBaseInitStruct);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	491e      	ldr	r1, [pc, #120]	@ (8001560 <ENC_Init+0x238>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 f9ef 	bl	80028cc <TIM_TimeBaseInit>
    if(ENCx->TIM_Channel_x == TIM_Channel_1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7d1b      	ldrb	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d107      	bne.n	8001506 <ENC_Init+0x1de>
    {
    	TIM_TIxExternalClockConfig(ENCx->TIMx, TIM_TIxExternalCLK1Source_TI1,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6918      	ldr	r0, [r3, #16]
 80014fa:	2300      	movs	r3, #0
 80014fc:	2200      	movs	r2, #0
 80014fe:	2150      	movs	r1, #80	@ 0x50
 8001500:	f001 fc1d 	bl	8002d3e <TIM_TIxExternalClockConfig>
 8001504:	e00a      	b.n	800151c <ENC_Init+0x1f4>
    								TIM_ICPolarity_Rising, 0);
    }
    else if(ENCx->TIM_Channel_x == TIM_Channel_2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7d1b      	ldrb	r3, [r3, #20]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d106      	bne.n	800151c <ENC_Init+0x1f4>
    {
    	TIM_TIxExternalClockConfig(ENCx->TIMx, TIM_TIxExternalCLK1Source_TI2,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6918      	ldr	r0, [r3, #16]
 8001512:	2300      	movs	r3, #0
 8001514:	2200      	movs	r2, #0
 8001516:	2160      	movs	r1, #96	@ 0x60
 8001518:	f001 fc11 	bl	8002d3e <TIM_TIxExternalClockConfig>
    	    								TIM_ICPolarity_Rising, 0);
    }
    TIM_Cmd(ENCx->TIMx,ENABLE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	2101      	movs	r1, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f001 fa94 	bl	8002a50 <TIM_Cmd>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200000ac 	.word	0x200000ac
 8001534:	200000b4 	.word	0x200000b4
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40010000 	.word	0x40010000
 8001548:	40000400 	.word	0x40000400
 800154c:	40000800 	.word	0x40000800
 8001550:	40000c00 	.word	0x40000c00
 8001554:	40014000 	.word	0x40014000
 8001558:	40014400 	.word	0x40014400
 800155c:	40014800 	.word	0x40014800
 8001560:	200000f0 	.word	0x200000f0
 8001564:	00000000 	.word	0x00000000

08001568 <ENC_GetMotorSpeed>:
 * This function should be called in the ISR of the TIMx
 * The TIME_INTERVAL should be defined first
 * The value of the speed is given in cm/s
 */
float ENC_GetMotorSpeed(ENCODER * ENCx)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	uint16_t EncoderPulses = TIM_GetCounter(ENCx->TIMx);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fa5f 	bl	8002a38 <TIM_GetCounter>
 800157a:	4603      	mov	r3, r0
 800157c:	82fb      	strh	r3, [r7, #22]
	TIM_SetCounter(ENCx->TIMx, 0);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fa3b 	bl	8002a00 <TIM_SetCounter>
	float RPM = (EncoderPulses / PPR) * (60/TIME_INTERVAL) * 5.25;
 800158a:	8afb      	ldrh	r3, [r7, #22]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff79 	bl	8000484 <__aeabi_i2d>
 8001592:	a326      	add	r3, pc, #152	@ (adr r3, 800162c <ENC_GetMotorSpeed+0xc4>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f908 	bl	80007ac <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <ENC_GetMotorSpeed+0xb8>)
 80015aa:	f7fe ffd5 	bl	8000558 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <ENC_GetMotorSpeed+0xbc>)
 80015bc:	f7fe ffcc 	bl	8000558 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff f9f8 	bl	80009bc <__aeabi_d2f>
 80015cc:	4603      	mov	r3, r0
 80015ce:	613b      	str	r3, [r7, #16]
	float Speed = WHEEL_DIAMETER * PI * RPM/60;
 80015d0:	6938      	ldr	r0, [r7, #16]
 80015d2:	f7fe ff69 	bl	80004a8 <__aeabi_f2d>
 80015d6:	a310      	add	r3, pc, #64	@ (adr r3, 8001618 <ENC_GetMotorSpeed+0xb0>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7fe ffbc 	bl	8000558 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <ENC_GetMotorSpeed+0xc0>)
 80015ee:	f7ff f8dd 	bl	80007ac <__aeabi_ddiv>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff f9df 	bl	80009bc <__aeabi_d2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	60fb      	str	r3, [r7, #12]
	return Speed;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	ee07 3a90 	vmov	s15, r3

}
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	f3af 8000 	nop.w
 8001618:	3477661e 	.word	0x3477661e
 800161c:	40346b9c 	.word	0x40346b9c
 8001620:	4092c000 	.word	0x4092c000
 8001624:	40150000 	.word	0x40150000
 8001628:	404e0000 	.word	0x404e0000
 800162c:	66666666 	.word	0x66666666
 8001630:	40801666 	.word	0x40801666

08001634 <ULTRASONIC_vInit>:
static uint16_t Global_Difference ;
float Global_Distance ,d2,d3,d4,d5;
volatile static uint8_t  IT_counter_T2 = 0  , IT_counter_T3 = 0 , IT_counter_T4 = 0 , IT_counter_T5 = 0;

void ULTRASONIC_vInit(Ultrasonic_t * US_Num)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef   GPIO_InitStruct;
	NVIC_InitTypeDef   NVIC_InitStructure;
	TIM_ICInitTypeDef  TIM_ICInitStructure;
	uint16_t GPIO_PinSource = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* GPIOA and GPIOB clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001640:	2101      	movs	r1, #1
 8001642:	2001      	movs	r0, #1
 8001644:	f001 f820 	bl	8002688 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001648:	2101      	movs	r1, #1
 800164a:	2002      	movs	r0, #2
 800164c:	f001 f81c 	bl	8002688 <RCC_AHB1PeriphClockCmd>

	/* TIMx clock Enable */
	if(US_Num ->TIMx == TIM2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001658:	d104      	bne.n	8001664 <ULTRASONIC_vInit+0x30>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800165a:	2101      	movs	r1, #1
 800165c:	2001      	movs	r0, #1
 800165e:	f001 f833 	bl	80026c8 <RCC_APB1PeriphClockCmd>
 8001662:	e01c      	b.n	800169e <ULTRASONIC_vInit+0x6a>
	}
	else if(US_Num ->TIMx == TIM3)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4a91      	ldr	r2, [pc, #580]	@ (80018b0 <ULTRASONIC_vInit+0x27c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d104      	bne.n	8001678 <ULTRASONIC_vInit+0x44>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800166e:	2101      	movs	r1, #1
 8001670:	2002      	movs	r0, #2
 8001672:	f001 f829 	bl	80026c8 <RCC_APB1PeriphClockCmd>
 8001676:	e012      	b.n	800169e <ULTRASONIC_vInit+0x6a>
	}
	else if(US_Num ->TIMx == TIM4)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	4a8d      	ldr	r2, [pc, #564]	@ (80018b4 <ULTRASONIC_vInit+0x280>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d104      	bne.n	800168c <ULTRASONIC_vInit+0x58>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001682:	2101      	movs	r1, #1
 8001684:	2004      	movs	r0, #4
 8001686:	f001 f81f 	bl	80026c8 <RCC_APB1PeriphClockCmd>
 800168a:	e008      	b.n	800169e <ULTRASONIC_vInit+0x6a>
	}
	else if(US_Num ->TIMx == TIM5)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	4a89      	ldr	r2, [pc, #548]	@ (80018b8 <ULTRASONIC_vInit+0x284>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d103      	bne.n	800169e <ULTRASONIC_vInit+0x6a>
	{
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001696:	2101      	movs	r1, #1
 8001698:	2008      	movs	r0, #8
 800169a:	f001 f815 	bl	80026c8 <RCC_APB1PeriphClockCmd>
	}

	/*----------------------------------------------------------*/

	GPIO_InitStruct.GPIO_Pin = US_Num ->TRIGGER_PIN;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	891b      	ldrh	r3, [r3, #8]
 80016a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 80016b0:	2302      	movs	r3, #2
 80016b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	GPIO_InitStruct.GPIO_Speed = GPIO_CLK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	GPIO_Init(US_Num -> GPIOx_Trig , &GPIO_InitStruct);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f107 021c 	add.w	r2, r7, #28
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 feb4 	bl	8002434 <GPIO_Init>

	/* TIMx pin configuration */
	GPIO_InitStruct.GPIO_Pin   =  US_Num -> ECO_PIN;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	895b      	ldrh	r3, [r3, #10]
 80016d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Mode  = GPIO_Mode_AF;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_DOWN;
 80016de:	2302      	movs	r3, #2
 80016e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	GPIO_InitStruct.GPIO_Speed = GPIO_Low_Speed;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	GPIO_Init(US_Num -> GPIOx_Echo, &GPIO_InitStruct);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f107 021c 	add.w	r2, r7, #28
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fe9d 	bl	8002434 <GPIO_Init>

	while(!(US_Num ->ECO_PIN & 1<<GPIO_PinSource))
 80016fa:	e002      	b.n	8001702 <ULTRASONIC_vInit+0xce>
	{
		GPIO_PinSource++;
 80016fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016fe:	3301      	adds	r3, #1
 8001700:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(!(US_Num ->ECO_PIN & 1<<GPIO_PinSource))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	895b      	ldrh	r3, [r3, #10]
 8001706:	461a      	mov	r2, r3
 8001708:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800170a:	fa42 f303 	asr.w	r3, r2, r3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f2      	beq.n	80016fc <ULTRASONIC_vInit+0xc8>
	}

	if(US_Num ->TIMx == TIM2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800171e:	d114      	bne.n	800174a <ULTRASONIC_vInit+0x116>
	{
		GPIO_PinAFConfig(US_Num ->GPIOx_Echo , GPIO_PinSource , GPIO_AF_TIM2);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001726:	2201      	movs	r2, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f000 ff31 	bl	8002590 <GPIO_PinAFConfig>

		/* Enable the TIM2 global Interrupt */
		NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 800172e:	231c      	movs	r3, #28
 8001730:	763b      	strb	r3, [r7, #24]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	767b      	strb	r3, [r7, #25]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8001736:	2301      	movs	r3, #1
 8001738:	76bb      	strb	r3, [r7, #26]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800173a:	2301      	movs	r3, #1
 800173c:	76fb      	strb	r3, [r7, #27]
		NVIC_Init(&NVIC_InitStructure);
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fe14 	bl	8002370 <NVIC_Init>
 8001748:	e04c      	b.n	80017e4 <ULTRASONIC_vInit+0x1b0>
	}
	else if(US_Num ->TIMx == TIM3)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	4a58      	ldr	r2, [pc, #352]	@ (80018b0 <ULTRASONIC_vInit+0x27c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d114      	bne.n	800177e <ULTRASONIC_vInit+0x14a>
	{
		GPIO_PinAFConfig(US_Num ->GPIOx_Echo, GPIO_PinSource , GPIO_AF_TIM3);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800175a:	2202      	movs	r2, #2
 800175c:	4618      	mov	r0, r3
 800175e:	f000 ff17 	bl	8002590 <GPIO_PinAFConfig>

		/* Enable the TIM3 global Interrupt */
		NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8001762:	231d      	movs	r3, #29
 8001764:	763b      	strb	r3, [r7, #24]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	767b      	strb	r3, [r7, #25]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800176a:	2301      	movs	r3, #1
 800176c:	76bb      	strb	r3, [r7, #26]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800176e:	2301      	movs	r3, #1
 8001770:	76fb      	strb	r3, [r7, #27]
		NVIC_Init(&NVIC_InitStructure);
 8001772:	f107 0318 	add.w	r3, r7, #24
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fdfa 	bl	8002370 <NVIC_Init>
 800177c:	e032      	b.n	80017e4 <ULTRASONIC_vInit+0x1b0>
	}
	else if(US_Num ->TIMx == TIM4)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	4a4c      	ldr	r2, [pc, #304]	@ (80018b4 <ULTRASONIC_vInit+0x280>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d114      	bne.n	80017b2 <ULTRASONIC_vInit+0x17e>
	{
		GPIO_PinAFConfig(US_Num ->GPIOx_Echo , GPIO_PinSource , GPIO_AF_TIM4);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800178e:	2202      	movs	r2, #2
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fefd 	bl	8002590 <GPIO_PinAFConfig>
		/* Enable the TIM4 global Interrupt */
		NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 8001796:	231e      	movs	r3, #30
 8001798:	763b      	strb	r3, [r7, #24]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	767b      	strb	r3, [r7, #25]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	76bb      	strb	r3, [r7, #26]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	76fb      	strb	r3, [r7, #27]
		NVIC_Init(&NVIC_InitStructure);
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fde0 	bl	8002370 <NVIC_Init>
 80017b0:	e018      	b.n	80017e4 <ULTRASONIC_vInit+0x1b0>
	}
	else if(US_Num ->TIMx == TIM5)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	4a40      	ldr	r2, [pc, #256]	@ (80018b8 <ULTRASONIC_vInit+0x284>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d113      	bne.n	80017e4 <ULTRASONIC_vInit+0x1b0>
	{
		GPIO_PinAFConfig(US_Num ->GPIOx_Echo , GPIO_PinSource , GPIO_AF_TIM5);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80017c2:	2202      	movs	r2, #2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fee3 	bl	8002590 <GPIO_PinAFConfig>
		/* Enable the TIM4 global Interrupt */
		NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
 80017ca:	2332      	movs	r3, #50	@ 0x32
 80017cc:	763b      	strb	r3, [r7, #24]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	767b      	strb	r3, [r7, #25]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	76bb      	strb	r3, [r7, #26]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	76fb      	strb	r3, [r7, #27]
		NVIC_Init(&NVIC_InitStructure);
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fdc6 	bl	8002370 <NVIC_Init>
	}

	TIM_ICInitStructure.TIM_Channel =  US_Num -> Channel_Num;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7b1b      	ldrb	r3, [r3, #12]
 80017e8:	81bb      	strh	r3, [r7, #12]
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 80017ea:	230a      	movs	r3, #10
 80017ec:	81fb      	strh	r3, [r7, #14]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 80017ee:	2301      	movs	r3, #1
 80017f0:	823b      	strh	r3, [r7, #16]
	TIM_ICInitStructure.TIM_ICPrescaler = TIMER_ICPSC_CFG;
 80017f2:	2300      	movs	r3, #0
 80017f4:	827b      	strh	r3, [r7, #18]
	TIM_ICInitStructure.TIM_ICFilter = 0x0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	82bb      	strh	r3, [r7, #20]

	TIM_ICInit(US_Num -> TIMx, &TIM_ICInitStructure);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f107 020c 	add.w	r2, r7, #12
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f001 f943 	bl	8002a90 <TIM_ICInit>
	TIM_PrescalerConfig(US_Num -> TIMx, TIMEER_PSC_CONFIG, TIM_PSCReloadMode_Immediate);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2201      	movs	r2, #1
 8001810:	210a      	movs	r1, #10
 8001812:	4618      	mov	r0, r3
 8001814:	f001 f8e0 	bl	80029d8 <TIM_PrescalerConfig>
	/* TIM enable counter */
	TIM_Cmd(US_Num -> TIMx, ENABLE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2101      	movs	r1, #1
 800181e:	4618      	mov	r0, r3
 8001820:	f001 f916 	bl	8002a50 <TIM_Cmd>
	switch(US_Num ->Channel_Num)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7b1b      	ldrb	r3, [r3, #12]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d83d      	bhi.n	80018a8 <ULTRASONIC_vInit+0x274>
 800182c:	a201      	add	r2, pc, #4	@ (adr r2, 8001834 <ULTRASONIC_vInit+0x200>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	08001869 	.word	0x08001869
 8001838:	080018a9 	.word	0x080018a9
 800183c:	080018a9 	.word	0x080018a9
 8001840:	080018a9 	.word	0x080018a9
 8001844:	08001879 	.word	0x08001879
 8001848:	080018a9 	.word	0x080018a9
 800184c:	080018a9 	.word	0x080018a9
 8001850:	080018a9 	.word	0x080018a9
 8001854:	08001889 	.word	0x08001889
 8001858:	080018a9 	.word	0x080018a9
 800185c:	080018a9 	.word	0x080018a9
 8001860:	080018a9 	.word	0x080018a9
 8001864:	08001899 	.word	0x08001899
	{
	case TIM_Channel_1:
		TIM_ITConfig(US_Num -> TIMx ,TIM_IT_CC1,ENABLE);break;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2201      	movs	r2, #1
 800186e:	2102      	movs	r1, #2
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fa05 	bl	8002c80 <TIM_ITConfig>
 8001876:	e017      	b.n	80018a8 <ULTRASONIC_vInit+0x274>
	case TIM_Channel_2:
		TIM_ITConfig(US_Num -> TIMx ,TIM_IT_CC2,ENABLE);break;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2201      	movs	r2, #1
 800187e:	2104      	movs	r1, #4
 8001880:	4618      	mov	r0, r3
 8001882:	f001 f9fd 	bl	8002c80 <TIM_ITConfig>
 8001886:	e00f      	b.n	80018a8 <ULTRASONIC_vInit+0x274>
	case TIM_Channel_3:
		TIM_ITConfig(US_Num -> TIMx ,TIM_IT_CC3,ENABLE);break;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2201      	movs	r2, #1
 800188e:	2108      	movs	r1, #8
 8001890:	4618      	mov	r0, r3
 8001892:	f001 f9f5 	bl	8002c80 <TIM_ITConfig>
 8001896:	e007      	b.n	80018a8 <ULTRASONIC_vInit+0x274>
	case TIM_Channel_4:
		TIM_ITConfig(US_Num -> TIMx ,TIM_IT_CC4,ENABLE);break;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2201      	movs	r2, #1
 800189e:	2110      	movs	r1, #16
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 f9ed 	bl	8002c80 <TIM_ITConfig>
 80018a6:	bf00      	nop
	}
}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	@ 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40000400 	.word	0x40000400
 80018b4:	40000800 	.word	0x40000800
 80018b8:	40000c00 	.word	0x40000c00

080018bc <ULTRASONIC_vTrig>:

void  ULTRASONIC_vTrig(Ultrasonic_t * US_Num)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	GPIO_SetBits( US_Num ->GPIOx_Trig , US_Num -> TRIGGER_PIN );
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	891b      	ldrh	r3, [r3, #8]
 80018cc:	4619      	mov	r1, r3
 80018ce:	4610      	mov	r0, r2
 80018d0:	f000 fe3f 	bl	8002552 <GPIO_SetBits>
	Ultrasonic_delay(DELAY_30US);				/* Delay 50 micro second */
 80018d4:	201e      	movs	r0, #30
 80018d6:	f000 fa4d 	bl	8001d74 <Ultrasonic_delay>
	GPIO_ResetBits( US_Num ->GPIOx_Trig , US_Num -> TRIGGER_PIN );
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	891b      	ldrh	r3, [r3, #8]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f000 fe43 	bl	8002570 <GPIO_ResetBits>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	0000      	movs	r0, r0
 80018f4:	0000      	movs	r0, r0
	...

080018f8 <ULTRASONIC_u8GetDistance>:

float ULTRASONIC_u8GetDistance(Ultrasonic_t * US_Num)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	if(US_Num -> TIMx ==TIM2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001908:	d178      	bne.n	80019fc <ULTRASONIC_u8GetDistance+0x104>
	{
		if(IC_Val2_T2 > IC_Val1_T2)
 800190a:	4b9f      	ldr	r3, [pc, #636]	@ (8001b88 <ULTRASONIC_u8GetDistance+0x290>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b9e      	ldr	r3, [pc, #632]	@ (8001b8c <ULTRASONIC_u8GetDistance+0x294>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	429a      	cmp	r2, r3
 8001918:	d932      	bls.n	8001980 <ULTRASONIC_u8GetDistance+0x88>
		{
			Global_Difference = IC_Val2_T2 - IC_Val1_T2  ;
 800191a:	4b9b      	ldr	r3, [pc, #620]	@ (8001b88 <ULTRASONIC_u8GetDistance+0x290>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b9a      	ldr	r3, [pc, #616]	@ (8001b8c <ULTRASONIC_u8GetDistance+0x294>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b99      	ldr	r3, [pc, #612]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 800192c:	801a      	strh	r2, [r3, #0]
			d2 = ((Global_Difference * TIK_TIME ) * 0.034)/2 ;
 800192e:	4b98      	ldr	r3, [pc, #608]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fda6 	bl	8000484 <__aeabi_i2d>
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b95      	ldr	r3, [pc, #596]	@ (8001b94 <ULTRASONIC_u8GetDistance+0x29c>)
 800193e:	f7fe fe0b 	bl	8000558 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	a38d      	add	r3, pc, #564	@ (adr r3, 8001b80 <ULTRASONIC_u8GetDistance+0x288>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe fe02 	bl	8000558 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001964:	f7fe ff22 	bl	80007ac <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f824 	bl	80009bc <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	4a88      	ldr	r2, [pc, #544]	@ (8001b98 <ULTRASONIC_u8GetDistance+0x2a0>)
 8001978:	6013      	str	r3, [r2, #0]
			return d2;
 800197a:	4b87      	ldr	r3, [pc, #540]	@ (8001b98 <ULTRASONIC_u8GetDistance+0x2a0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e1d9      	b.n	8001d34 <ULTRASONIC_u8GetDistance+0x43c>
		}
		else if (IC_Val2_T2 < IC_Val1_T2)
 8001980:	4b81      	ldr	r3, [pc, #516]	@ (8001b88 <ULTRASONIC_u8GetDistance+0x290>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29a      	uxth	r2, r3
 8001986:	4b81      	ldr	r3, [pc, #516]	@ (8001b8c <ULTRASONIC_u8GetDistance+0x294>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	429a      	cmp	r2, r3
 800198e:	f080 81d0 	bcs.w	8001d32 <ULTRASONIC_u8GetDistance+0x43a>
		{
			Global_Difference = (0xffff - IC_Val1_T2)+ IC_Val2_T2 ;
 8001992:	4b7d      	ldr	r3, [pc, #500]	@ (8001b88 <ULTRASONIC_u8GetDistance+0x290>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	b29a      	uxth	r2, r3
 8001998:	4b7c      	ldr	r3, [pc, #496]	@ (8001b8c <ULTRASONIC_u8GetDistance+0x294>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 80019a8:	801a      	strh	r2, [r3, #0]
			d2 = ((Global_Difference * TIK_TIME ) * 0.034)/2 ;
 80019aa:	4b79      	ldr	r3, [pc, #484]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fd68 	bl	8000484 <__aeabi_i2d>
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b76      	ldr	r3, [pc, #472]	@ (8001b94 <ULTRASONIC_u8GetDistance+0x29c>)
 80019ba:	f7fe fdcd 	bl	8000558 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	a36e      	add	r3, pc, #440	@ (adr r3, 8001b80 <ULTRASONIC_u8GetDistance+0x288>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fdc4 	bl	8000558 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019e0:	f7fe fee4 	bl	80007ac <__aeabi_ddiv>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7fe ffe6 	bl	80009bc <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a69      	ldr	r2, [pc, #420]	@ (8001b98 <ULTRASONIC_u8GetDistance+0x2a0>)
 80019f4:	6013      	str	r3, [r2, #0]
			return d2;
 80019f6:	4b68      	ldr	r3, [pc, #416]	@ (8001b98 <ULTRASONIC_u8GetDistance+0x2a0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	e19b      	b.n	8001d34 <ULTRASONIC_u8GetDistance+0x43c>
		}
	}
	else if(US_Num -> TIMx ==TIM3)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	4a66      	ldr	r2, [pc, #408]	@ (8001b9c <ULTRASONIC_u8GetDistance+0x2a4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d178      	bne.n	8001af8 <ULTRASONIC_u8GetDistance+0x200>
	{
		if(IC_Val2_T3 > IC_Val1_T3)
 8001a06:	4b66      	ldr	r3, [pc, #408]	@ (8001ba0 <ULTRASONIC_u8GetDistance+0x2a8>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b65      	ldr	r3, [pc, #404]	@ (8001ba4 <ULTRASONIC_u8GetDistance+0x2ac>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d932      	bls.n	8001a7c <ULTRASONIC_u8GetDistance+0x184>
		{
			Global_Difference = IC_Val2_T3 - IC_Val1_T3  ;
 8001a16:	4b62      	ldr	r3, [pc, #392]	@ (8001ba0 <ULTRASONIC_u8GetDistance+0x2a8>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b61      	ldr	r3, [pc, #388]	@ (8001ba4 <ULTRASONIC_u8GetDistance+0x2ac>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b5a      	ldr	r3, [pc, #360]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 8001a28:	801a      	strh	r2, [r3, #0]
			d3 = ((Global_Difference * TIK_TIME ) * 0.034)/2 ;
 8001a2a:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd28 	bl	8000484 <__aeabi_i2d>
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b56      	ldr	r3, [pc, #344]	@ (8001b94 <ULTRASONIC_u8GetDistance+0x29c>)
 8001a3a:	f7fe fd8d 	bl	8000558 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	a34e      	add	r3, pc, #312	@ (adr r3, 8001b80 <ULTRASONIC_u8GetDistance+0x288>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fd84 	bl	8000558 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a60:	f7fe fea4 	bl	80007ac <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7fe ffa6 	bl	80009bc <__aeabi_d2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba8 <ULTRASONIC_u8GetDistance+0x2b0>)
 8001a74:	6013      	str	r3, [r2, #0]
			return d3;
 8001a76:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba8 <ULTRASONIC_u8GetDistance+0x2b0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e15b      	b.n	8001d34 <ULTRASONIC_u8GetDistance+0x43c>
		}
		else if (IC_Val2_T3 < IC_Val1_T3)
 8001a7c:	4b48      	ldr	r3, [pc, #288]	@ (8001ba0 <ULTRASONIC_u8GetDistance+0x2a8>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b48      	ldr	r3, [pc, #288]	@ (8001ba4 <ULTRASONIC_u8GetDistance+0x2ac>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f080 8152 	bcs.w	8001d32 <ULTRASONIC_u8GetDistance+0x43a>
		{
			Global_Difference = (0xffff - IC_Val1_T3)+ IC_Val2_T3 ;
 8001a8e:	4b44      	ldr	r3, [pc, #272]	@ (8001ba0 <ULTRASONIC_u8GetDistance+0x2a8>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4b43      	ldr	r3, [pc, #268]	@ (8001ba4 <ULTRASONIC_u8GetDistance+0x2ac>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 8001aa4:	801a      	strh	r2, [r3, #0]
			d3 = ((Global_Difference * TIK_TIME ) * 0.034)/2 ;
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fcea 	bl	8000484 <__aeabi_i2d>
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	4b37      	ldr	r3, [pc, #220]	@ (8001b94 <ULTRASONIC_u8GetDistance+0x29c>)
 8001ab6:	f7fe fd4f 	bl	8000558 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	a32f      	add	r3, pc, #188	@ (adr r3, 8001b80 <ULTRASONIC_u8GetDistance+0x288>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fd46 	bl	8000558 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001adc:	f7fe fe66 	bl	80007ac <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7fe ff68 	bl	80009bc <__aeabi_d2f>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba8 <ULTRASONIC_u8GetDistance+0x2b0>)
 8001af0:	6013      	str	r3, [r2, #0]
			return d3;
 8001af2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba8 <ULTRASONIC_u8GetDistance+0x2b0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	e11d      	b.n	8001d34 <ULTRASONIC_u8GetDistance+0x43c>
		}
	}
	else if(US_Num -> TIMx ==TIM4)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	4a2b      	ldr	r2, [pc, #172]	@ (8001bac <ULTRASONIC_u8GetDistance+0x2b4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	f040 809a 	bne.w	8001c38 <ULTRASONIC_u8GetDistance+0x340>
	{
		if(IC_Val2_T4 > IC_Val1_T4)
 8001b04:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <ULTRASONIC_u8GetDistance+0x2b8>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <ULTRASONIC_u8GetDistance+0x2bc>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d953      	bls.n	8001bbc <ULTRASONIC_u8GetDistance+0x2c4>
		{
			Global_Difference = IC_Val2_T4 - IC_Val1_T4  ;
 8001b14:	4b26      	ldr	r3, [pc, #152]	@ (8001bb0 <ULTRASONIC_u8GetDistance+0x2b8>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <ULTRASONIC_u8GetDistance+0x2bc>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 8001b26:	801a      	strh	r2, [r3, #0]
			d4 = ((Global_Difference * TIK_TIME ) * 0.034)/2 ;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <ULTRASONIC_u8GetDistance+0x298>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fca9 	bl	8000484 <__aeabi_i2d>
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <ULTRASONIC_u8GetDistance+0x29c>)
 8001b38:	f7fe fd0e 	bl	8000558 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	a30e      	add	r3, pc, #56	@ (adr r3, 8001b80 <ULTRASONIC_u8GetDistance+0x288>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fd05 	bl	8000558 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b5e:	f7fe fe25 	bl	80007ac <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7fe ff27 	bl	80009bc <__aeabi_d2f>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a11      	ldr	r2, [pc, #68]	@ (8001bb8 <ULTRASONIC_u8GetDistance+0x2c0>)
 8001b72:	6013      	str	r3, [r2, #0]
			return d4;
 8001b74:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <ULTRASONIC_u8GetDistance+0x2c0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	e0dc      	b.n	8001d34 <ULTRASONIC_u8GetDistance+0x43c>
 8001b7a:	bf00      	nop
 8001b7c:	f3af 8000 	nop.w
 8001b80:	b020c49c 	.word	0xb020c49c
 8001b84:	3fa16872 	.word	0x3fa16872
 8001b88:	200000fe 	.word	0x200000fe
 8001b8c:	200000fc 	.word	0x200000fc
 8001b90:	2000010c 	.word	0x2000010c
 8001b94:	3fe60000 	.word	0x3fe60000
 8001b98:	20000110 	.word	0x20000110
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	20000102 	.word	0x20000102
 8001ba4:	20000100 	.word	0x20000100
 8001ba8:	20000114 	.word	0x20000114
 8001bac:	40000800 	.word	0x40000800
 8001bb0:	20000106 	.word	0x20000106
 8001bb4:	20000104 	.word	0x20000104
 8001bb8:	20000118 	.word	0x20000118
		}
		else if (IC_Val2_T4 < IC_Val1_T4)
 8001bbc:	4b64      	ldr	r3, [pc, #400]	@ (8001d50 <ULTRASONIC_u8GetDistance+0x458>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b64      	ldr	r3, [pc, #400]	@ (8001d54 <ULTRASONIC_u8GetDistance+0x45c>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f080 80b2 	bcs.w	8001d32 <ULTRASONIC_u8GetDistance+0x43a>
		{
			Global_Difference = (0xffff - IC_Val1_T4)+ IC_Val2_T4 ;
 8001bce:	4b60      	ldr	r3, [pc, #384]	@ (8001d50 <ULTRASONIC_u8GetDistance+0x458>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001d54 <ULTRASONIC_u8GetDistance+0x45c>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d58 <ULTRASONIC_u8GetDistance+0x460>)
 8001be4:	801a      	strh	r2, [r3, #0]
			d4 = ((Global_Difference * TIK_TIME ) * 0.034)/2 ;
 8001be6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d58 <ULTRASONIC_u8GetDistance+0x460>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc4a 	bl	8000484 <__aeabi_i2d>
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b59      	ldr	r3, [pc, #356]	@ (8001d5c <ULTRASONIC_u8GetDistance+0x464>)
 8001bf6:	f7fe fcaf 	bl	8000558 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	a351      	add	r3, pc, #324	@ (adr r3, 8001d48 <ULTRASONIC_u8GetDistance+0x450>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fca6 	bl	8000558 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c1c:	f7fe fdc6 	bl	80007ac <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe fec8 	bl	80009bc <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d60 <ULTRASONIC_u8GetDistance+0x468>)
 8001c30:	6013      	str	r3, [r2, #0]
			return d4;
 8001c32:	4b4b      	ldr	r3, [pc, #300]	@ (8001d60 <ULTRASONIC_u8GetDistance+0x468>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	e07d      	b.n	8001d34 <ULTRASONIC_u8GetDistance+0x43c>
		}
	}
	else if(US_Num -> TIMx ==TIM5)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	4a49      	ldr	r2, [pc, #292]	@ (8001d64 <ULTRASONIC_u8GetDistance+0x46c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d177      	bne.n	8001d32 <ULTRASONIC_u8GetDistance+0x43a>
	{
		if(IC_Val2_T5 > IC_Val1_T5)
 8001c42:	4b49      	ldr	r3, [pc, #292]	@ (8001d68 <ULTRASONIC_u8GetDistance+0x470>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b48      	ldr	r3, [pc, #288]	@ (8001d6c <ULTRASONIC_u8GetDistance+0x474>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d932      	bls.n	8001cb8 <ULTRASONIC_u8GetDistance+0x3c0>
		{
			Global_Difference = IC_Val2_T5 - IC_Val1_T5  ;
 8001c52:	4b45      	ldr	r3, [pc, #276]	@ (8001d68 <ULTRASONIC_u8GetDistance+0x470>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b44      	ldr	r3, [pc, #272]	@ (8001d6c <ULTRASONIC_u8GetDistance+0x474>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b3d      	ldr	r3, [pc, #244]	@ (8001d58 <ULTRASONIC_u8GetDistance+0x460>)
 8001c64:	801a      	strh	r2, [r3, #0]
			d5 = ((Global_Difference * TIK_TIME ) * 0.034)/2 ;
 8001c66:	4b3c      	ldr	r3, [pc, #240]	@ (8001d58 <ULTRASONIC_u8GetDistance+0x460>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc0a 	bl	8000484 <__aeabi_i2d>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <ULTRASONIC_u8GetDistance+0x464>)
 8001c76:	f7fe fc6f 	bl	8000558 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	a331      	add	r3, pc, #196	@ (adr r3, 8001d48 <ULTRASONIC_u8GetDistance+0x450>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fc66 	bl	8000558 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c9c:	f7fe fd86 	bl	80007ac <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe fe88 	bl	80009bc <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a30      	ldr	r2, [pc, #192]	@ (8001d70 <ULTRASONIC_u8GetDistance+0x478>)
 8001cb0:	6013      	str	r3, [r2, #0]
			return d5;
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d70 <ULTRASONIC_u8GetDistance+0x478>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e03d      	b.n	8001d34 <ULTRASONIC_u8GetDistance+0x43c>
		}
		else if (IC_Val2_T5 < IC_Val1_T5)
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <ULTRASONIC_u8GetDistance+0x470>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <ULTRASONIC_u8GetDistance+0x474>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d234      	bcs.n	8001d32 <ULTRASONIC_u8GetDistance+0x43a>
		{
			Global_Difference = (0xffff - IC_Val1_T5)+ IC_Val2_T5 ;
 8001cc8:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <ULTRASONIC_u8GetDistance+0x470>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <ULTRASONIC_u8GetDistance+0x474>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <ULTRASONIC_u8GetDistance+0x460>)
 8001cde:	801a      	strh	r2, [r3, #0]
			d5 = ((Global_Difference * TIK_TIME ) * 0.034)/2 ;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <ULTRASONIC_u8GetDistance+0x460>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fbcd 	bl	8000484 <__aeabi_i2d>
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <ULTRASONIC_u8GetDistance+0x464>)
 8001cf0:	f7fe fc32 	bl	8000558 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	a312      	add	r3, pc, #72	@ (adr r3, 8001d48 <ULTRASONIC_u8GetDistance+0x450>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fc29 	bl	8000558 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d16:	f7fe fd49 	bl	80007ac <__aeabi_ddiv>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7fe fe4b 	bl	80009bc <__aeabi_d2f>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a11      	ldr	r2, [pc, #68]	@ (8001d70 <ULTRASONIC_u8GetDistance+0x478>)
 8001d2a:	6013      	str	r3, [r2, #0]
			return d5;
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <ULTRASONIC_u8GetDistance+0x478>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	e000      	b.n	8001d34 <ULTRASONIC_u8GetDistance+0x43c>
		}
	}
}
 8001d32:	e001      	b.n	8001d38 <ULTRASONIC_u8GetDistance+0x440>
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	b020c49c 	.word	0xb020c49c
 8001d4c:	3fa16872 	.word	0x3fa16872
 8001d50:	20000106 	.word	0x20000106
 8001d54:	20000104 	.word	0x20000104
 8001d58:	2000010c 	.word	0x2000010c
 8001d5c:	3fe60000 	.word	0x3fe60000
 8001d60:	20000118 	.word	0x20000118
 8001d64:	40000c00 	.word	0x40000c00
 8001d68:	2000010a 	.word	0x2000010a
 8001d6c:	20000108 	.word	0x20000108
 8001d70:	2000011c 	.word	0x2000011c

08001d74 <Ultrasonic_delay>:

void Ultrasonic_delay (uint16_t Delay_Num)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
	uint32_t iteration = (Delay_Num * CLOCK_US)/3 ;
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fb7f 	bl	8000484 <__aeabi_i2d>
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <Ultrasonic_delay+0x58>)
 8001d8c:	f7fe fbe4 	bl	8000558 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <Ultrasonic_delay+0x5c>)
 8001d9e:	f7fe fd05 	bl	80007ac <__aeabi_ddiv>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe fde7 	bl	800097c <__aeabi_d2uiz>
 8001dae:	4603      	mov	r3, r0
 8001db0:	60fb      	str	r3, [r7, #12]
	for(iteration ; iteration > 0 ; iteration--)
 8001db2:	e002      	b.n	8001dba <Ultrasonic_delay+0x46>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f9      	bne.n	8001db4 <Ultrasonic_delay+0x40>
	{

	}
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40300000 	.word	0x40300000
 8001dd0:	40080000 	.word	0x40080000

08001dd4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET)
 8001dd8:	2102      	movs	r1, #2
 8001dda:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001dde:	f000 ff73 	bl	8002cc8 <TIM_GetITStatus>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d024      	beq.n	8001e32 <TIM2_IRQHandler+0x5e>
	{
		// clear binding flag
		TIM_ClearITPendingBit(TIM2 , TIM_IT_CC1);
 8001de8:	2102      	movs	r1, #2
 8001dea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001dee:	f000 ff95 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T2)
 8001df2:	4b54      	ldr	r3, [pc, #336]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <TIM2_IRQHandler+0x2e>
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d00c      	beq.n	8001e1a <TIM2_IRQHandler+0x46>
		IT_counter_T2 = 0;
		break;
		}
	}

}
 8001e00:	e09e      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
		case 0 : IC_Val1_T2 = TIM_GetCapture1(TIM2);
 8001e02:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e06:	f000 fe97 	bl	8002b38 <TIM_GetCapture1>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f48 <TIM2_IRQHandler+0x174>)
 8001e10:	801a      	strh	r2, [r3, #0]
		IT_counter_T2 = 1;
 8001e12:	4b4c      	ldr	r3, [pc, #304]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
		break;
 8001e18:	e092      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
		case 1 : IC_Val2_T2 = TIM_GetCapture1(TIM2);
 8001e1a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e1e:	f000 fe8b 	bl	8002b38 <TIM_GetCapture1>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b49      	ldr	r3, [pc, #292]	@ (8001f4c <TIM2_IRQHandler+0x178>)
 8001e28:	801a      	strh	r2, [r3, #0]
		IT_counter_T2 = 0;
 8001e2a:	4b46      	ldr	r3, [pc, #280]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
		break;
 8001e30:	e086      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
	else if(TIM_GetITStatus(TIM2, TIM_IT_CC2) != RESET)
 8001e32:	2104      	movs	r1, #4
 8001e34:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e38:	f000 ff46 	bl	8002cc8 <TIM_GetITStatus>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d024      	beq.n	8001e8c <TIM2_IRQHandler+0xb8>
		TIM_ClearITPendingBit(TIM2 , TIM_IT_CC2);
 8001e42:	2104      	movs	r1, #4
 8001e44:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e48:	f000 ff68 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T2)
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <TIM2_IRQHandler+0x88>
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00c      	beq.n	8001e74 <TIM2_IRQHandler+0xa0>
}
 8001e5a:	e071      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
		case 0 : IC_Val1_T2 = TIM_GetCapture2(TIM2);
 8001e5c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e60:	f000 fe76 	bl	8002b50 <TIM_GetCapture2>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <TIM2_IRQHandler+0x174>)
 8001e6a:	801a      	strh	r2, [r3, #0]
		IT_counter_T2 = 1;
 8001e6c:	4b35      	ldr	r3, [pc, #212]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
		break;
 8001e72:	e065      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
		case 1 : IC_Val2_T2 = TIM_GetCapture2(TIM2);
 8001e74:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e78:	f000 fe6a 	bl	8002b50 <TIM_GetCapture2>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <TIM2_IRQHandler+0x178>)
 8001e82:	801a      	strh	r2, [r3, #0]
		IT_counter_T2 = 0;
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
		break;
 8001e8a:	e059      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
	else if(TIM_GetITStatus(TIM2, TIM_IT_CC3) != RESET)
 8001e8c:	2108      	movs	r1, #8
 8001e8e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001e92:	f000 ff19 	bl	8002cc8 <TIM_GetITStatus>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d024      	beq.n	8001ee6 <TIM2_IRQHandler+0x112>
		TIM_ClearITPendingBit(TIM2 , TIM_IT_CC3);
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ea2:	f000 ff3b 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T2)
 8001ea6:	4b27      	ldr	r3, [pc, #156]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <TIM2_IRQHandler+0xe2>
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d00c      	beq.n	8001ece <TIM2_IRQHandler+0xfa>
}
 8001eb4:	e044      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
		case 0 : IC_Val1_T2 = TIM_GetCapture3(TIM2);
 8001eb6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001eba:	f000 fe55 	bl	8002b68 <TIM_GetCapture3>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <TIM2_IRQHandler+0x174>)
 8001ec4:	801a      	strh	r2, [r3, #0]
		IT_counter_T2 = 1;
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
		break;
 8001ecc:	e038      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
		case 1 : IC_Val2_T2 = TIM_GetCapture3(TIM2);
 8001ece:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ed2:	f000 fe49 	bl	8002b68 <TIM_GetCapture3>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <TIM2_IRQHandler+0x178>)
 8001edc:	801a      	strh	r2, [r3, #0]
		IT_counter_T2 = 0;
 8001ede:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
		break;
 8001ee4:	e02c      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
	else if(TIM_GetITStatus(TIM2, TIM_IT_CC4) != RESET)
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001eec:	f000 feec 	bl	8002cc8 <TIM_GetITStatus>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d024      	beq.n	8001f40 <TIM2_IRQHandler+0x16c>
		TIM_ClearITPendingBit(TIM2 , TIM_IT_CC4);
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001efc:	f000 ff0e 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T2)
 8001f00:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <TIM2_IRQHandler+0x13c>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d00c      	beq.n	8001f28 <TIM2_IRQHandler+0x154>
}
 8001f0e:	e017      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
		case 0 : IC_Val1_T2 = TIM_GetCapture4(TIM2);
 8001f10:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f14:	f000 fe34 	bl	8002b80 <TIM_GetCapture4>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <TIM2_IRQHandler+0x174>)
 8001f1e:	801a      	strh	r2, [r3, #0]
		IT_counter_T2 = 1;
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
		break;
 8001f26:	e00b      	b.n	8001f40 <TIM2_IRQHandler+0x16c>
		case 1 : IC_Val2_T2 = TIM_GetCapture4(TIM2);
 8001f28:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f2c:	f000 fe28 	bl	8002b80 <TIM_GetCapture4>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <TIM2_IRQHandler+0x178>)
 8001f36:	801a      	strh	r2, [r3, #0]
		IT_counter_T2 = 0;
 8001f38:	4b02      	ldr	r3, [pc, #8]	@ (8001f44 <TIM2_IRQHandler+0x170>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
		break;
 8001f3e:	bf00      	nop
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000120 	.word	0x20000120
 8001f48:	200000fc 	.word	0x200000fc
 8001f4c:	200000fe 	.word	0x200000fe

08001f50 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM3, TIM_IT_CC1) != RESET)
 8001f54:	2102      	movs	r1, #2
 8001f56:	4852      	ldr	r0, [pc, #328]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8001f58:	f000 feb6 	bl	8002cc8 <TIM_GetITStatus>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d021      	beq.n	8001fa6 <TIM3_IRQHandler+0x56>
	{
		// clear binding flag
		TIM_ClearITPendingBit(TIM3 , TIM_IT_CC1);
 8001f62:	2102      	movs	r1, #2
 8001f64:	484e      	ldr	r0, [pc, #312]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8001f66:	f000 fed9 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T3)
 8001f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <TIM3_IRQHandler+0x2a>
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d00b      	beq.n	8001f90 <TIM3_IRQHandler+0x40>
		case 1 : IC_Val2_T3 = TIM_GetCapture4(TIM3);
		IT_counter_T3 = 0;
		break;
		}
	}
}
 8001f78:	e090      	b.n	800209c <TIM3_IRQHandler+0x14c>
		case 0 : IC_Val1_T3 = TIM_GetCapture1(TIM3);
 8001f7a:	4849      	ldr	r0, [pc, #292]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8001f7c:	f000 fddc 	bl	8002b38 <TIM_GetCapture1>
 8001f80:	4603      	mov	r3, r0
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b48      	ldr	r3, [pc, #288]	@ (80020a8 <TIM3_IRQHandler+0x158>)
 8001f86:	801a      	strh	r2, [r3, #0]
		IT_counter_T3 = 1;
 8001f88:	4b46      	ldr	r3, [pc, #280]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
		break;
 8001f8e:	e085      	b.n	800209c <TIM3_IRQHandler+0x14c>
		case 1 : IC_Val2_T3 = TIM_GetCapture1(TIM3);
 8001f90:	4843      	ldr	r0, [pc, #268]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8001f92:	f000 fdd1 	bl	8002b38 <TIM_GetCapture1>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b44      	ldr	r3, [pc, #272]	@ (80020ac <TIM3_IRQHandler+0x15c>)
 8001f9c:	801a      	strh	r2, [r3, #0]
		IT_counter_T3 = 0;
 8001f9e:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
		break;
 8001fa4:	e07a      	b.n	800209c <TIM3_IRQHandler+0x14c>
	else if(TIM_GetITStatus(TIM3, TIM_IT_CC2) != RESET)
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	483d      	ldr	r0, [pc, #244]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8001faa:	f000 fe8d 	bl	8002cc8 <TIM_GetITStatus>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d021      	beq.n	8001ff8 <TIM3_IRQHandler+0xa8>
		TIM_ClearITPendingBit(TIM3 , TIM_IT_CC2);
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	483a      	ldr	r0, [pc, #232]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8001fb8:	f000 feb0 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T3)
 8001fbc:	4b39      	ldr	r3, [pc, #228]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <TIM3_IRQHandler+0x7c>
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d00b      	beq.n	8001fe2 <TIM3_IRQHandler+0x92>
}
 8001fca:	e067      	b.n	800209c <TIM3_IRQHandler+0x14c>
		case 0 : IC_Val1_T3 = TIM_GetCapture2(TIM3);
 8001fcc:	4834      	ldr	r0, [pc, #208]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8001fce:	f000 fdbf 	bl	8002b50 <TIM_GetCapture2>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <TIM3_IRQHandler+0x158>)
 8001fd8:	801a      	strh	r2, [r3, #0]
		IT_counter_T3 = 1;
 8001fda:	4b32      	ldr	r3, [pc, #200]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
		break;
 8001fe0:	e05c      	b.n	800209c <TIM3_IRQHandler+0x14c>
		case 1 : IC_Val2_T3 = TIM_GetCapture2(TIM3);
 8001fe2:	482f      	ldr	r0, [pc, #188]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8001fe4:	f000 fdb4 	bl	8002b50 <TIM_GetCapture2>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b2f      	ldr	r3, [pc, #188]	@ (80020ac <TIM3_IRQHandler+0x15c>)
 8001fee:	801a      	strh	r2, [r3, #0]
		IT_counter_T3 = 0;
 8001ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
		break;
 8001ff6:	e051      	b.n	800209c <TIM3_IRQHandler+0x14c>
	else if(TIM_GetITStatus(TIM3, TIM_IT_CC3) != RESET)
 8001ff8:	2108      	movs	r1, #8
 8001ffa:	4829      	ldr	r0, [pc, #164]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8001ffc:	f000 fe64 	bl	8002cc8 <TIM_GetITStatus>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d021      	beq.n	800204a <TIM3_IRQHandler+0xfa>
		TIM_ClearITPendingBit(TIM3 , TIM_IT_CC3);
 8002006:	2108      	movs	r1, #8
 8002008:	4825      	ldr	r0, [pc, #148]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 800200a:	f000 fe87 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T3)
 800200e:	4b25      	ldr	r3, [pc, #148]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <TIM3_IRQHandler+0xce>
 8002018:	2b01      	cmp	r3, #1
 800201a:	d00b      	beq.n	8002034 <TIM3_IRQHandler+0xe4>
}
 800201c:	e03e      	b.n	800209c <TIM3_IRQHandler+0x14c>
		case 0 : IC_Val1_T3 = TIM_GetCapture3(TIM3);
 800201e:	4820      	ldr	r0, [pc, #128]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8002020:	f000 fda2 	bl	8002b68 <TIM_GetCapture3>
 8002024:	4603      	mov	r3, r0
 8002026:	b29a      	uxth	r2, r3
 8002028:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <TIM3_IRQHandler+0x158>)
 800202a:	801a      	strh	r2, [r3, #0]
		IT_counter_T3 = 1;
 800202c:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
		break;
 8002032:	e033      	b.n	800209c <TIM3_IRQHandler+0x14c>
		case 1 : IC_Val2_T3 = TIM_GetCapture3(TIM3);
 8002034:	481a      	ldr	r0, [pc, #104]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8002036:	f000 fd97 	bl	8002b68 <TIM_GetCapture3>
 800203a:	4603      	mov	r3, r0
 800203c:	b29a      	uxth	r2, r3
 800203e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <TIM3_IRQHandler+0x15c>)
 8002040:	801a      	strh	r2, [r3, #0]
		IT_counter_T3 = 0;
 8002042:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
		break;
 8002048:	e028      	b.n	800209c <TIM3_IRQHandler+0x14c>
	else if(TIM_GetITStatus(TIM3, TIM_IT_CC4) != RESET)
 800204a:	2110      	movs	r1, #16
 800204c:	4814      	ldr	r0, [pc, #80]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 800204e:	f000 fe3b 	bl	8002cc8 <TIM_GetITStatus>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d021      	beq.n	800209c <TIM3_IRQHandler+0x14c>
		TIM_ClearITPendingBit(TIM3 , TIM_IT_CC4);
 8002058:	2110      	movs	r1, #16
 800205a:	4811      	ldr	r0, [pc, #68]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 800205c:	f000 fe5e 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T3)
 8002060:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <TIM3_IRQHandler+0x120>
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <TIM3_IRQHandler+0x136>
}
 800206e:	e015      	b.n	800209c <TIM3_IRQHandler+0x14c>
		case 0 : IC_Val1_T3 = TIM_GetCapture4(TIM3);
 8002070:	480b      	ldr	r0, [pc, #44]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8002072:	f000 fd85 	bl	8002b80 <TIM_GetCapture4>
 8002076:	4603      	mov	r3, r0
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <TIM3_IRQHandler+0x158>)
 800207c:	801a      	strh	r2, [r3, #0]
		IT_counter_T3 = 1;
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
		break;
 8002084:	e00a      	b.n	800209c <TIM3_IRQHandler+0x14c>
		case 1 : IC_Val2_T3 = TIM_GetCapture4(TIM3);
 8002086:	4806      	ldr	r0, [pc, #24]	@ (80020a0 <TIM3_IRQHandler+0x150>)
 8002088:	f000 fd7a 	bl	8002b80 <TIM_GetCapture4>
 800208c:	4603      	mov	r3, r0
 800208e:	b29a      	uxth	r2, r3
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <TIM3_IRQHandler+0x15c>)
 8002092:	801a      	strh	r2, [r3, #0]
		IT_counter_T3 = 0;
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <TIM3_IRQHandler+0x154>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
		break;
 800209a:	bf00      	nop
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40000400 	.word	0x40000400
 80020a4:	20000121 	.word	0x20000121
 80020a8:	20000100 	.word	0x20000100
 80020ac:	20000102 	.word	0x20000102

080020b0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM4, TIM_IT_CC1) != RESET)
 80020b4:	2102      	movs	r1, #2
 80020b6:	4852      	ldr	r0, [pc, #328]	@ (8002200 <TIM4_IRQHandler+0x150>)
 80020b8:	f000 fe06 	bl	8002cc8 <TIM_GetITStatus>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d021      	beq.n	8002106 <TIM4_IRQHandler+0x56>
	{
		// clear binding flag
		TIM_ClearITPendingBit(TIM4 , TIM_IT_CC1);
 80020c2:	2102      	movs	r1, #2
 80020c4:	484e      	ldr	r0, [pc, #312]	@ (8002200 <TIM4_IRQHandler+0x150>)
 80020c6:	f000 fe29 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T4)
 80020ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002204 <TIM4_IRQHandler+0x154>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <TIM4_IRQHandler+0x2a>
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d00b      	beq.n	80020f0 <TIM4_IRQHandler+0x40>
		case 1 : IC_Val2_T4 = TIM_GetCapture4(TIM4);
		IT_counter_T4 = 0;
		break;
		}
	}
}
 80020d8:	e090      	b.n	80021fc <TIM4_IRQHandler+0x14c>
		case 0 : IC_Val1_T4 = TIM_GetCapture1(TIM4);
 80020da:	4849      	ldr	r0, [pc, #292]	@ (8002200 <TIM4_IRQHandler+0x150>)
 80020dc:	f000 fd2c 	bl	8002b38 <TIM_GetCapture1>
 80020e0:	4603      	mov	r3, r0
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b48      	ldr	r3, [pc, #288]	@ (8002208 <TIM4_IRQHandler+0x158>)
 80020e6:	801a      	strh	r2, [r3, #0]
		IT_counter_T4 = 1;
 80020e8:	4b46      	ldr	r3, [pc, #280]	@ (8002204 <TIM4_IRQHandler+0x154>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
		break;
 80020ee:	e085      	b.n	80021fc <TIM4_IRQHandler+0x14c>
		case 1 : IC_Val2_T4 = TIM_GetCapture1(TIM4);
 80020f0:	4843      	ldr	r0, [pc, #268]	@ (8002200 <TIM4_IRQHandler+0x150>)
 80020f2:	f000 fd21 	bl	8002b38 <TIM_GetCapture1>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b44      	ldr	r3, [pc, #272]	@ (800220c <TIM4_IRQHandler+0x15c>)
 80020fc:	801a      	strh	r2, [r3, #0]
		IT_counter_T4 = 0;
 80020fe:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <TIM4_IRQHandler+0x154>)
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
		break;
 8002104:	e07a      	b.n	80021fc <TIM4_IRQHandler+0x14c>
	else if(TIM_GetITStatus(TIM4, TIM_IT_CC2) != RESET)
 8002106:	2104      	movs	r1, #4
 8002108:	483d      	ldr	r0, [pc, #244]	@ (8002200 <TIM4_IRQHandler+0x150>)
 800210a:	f000 fddd 	bl	8002cc8 <TIM_GetITStatus>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d021      	beq.n	8002158 <TIM4_IRQHandler+0xa8>
		TIM_ClearITPendingBit(TIM4 , TIM_IT_CC2);
 8002114:	2104      	movs	r1, #4
 8002116:	483a      	ldr	r0, [pc, #232]	@ (8002200 <TIM4_IRQHandler+0x150>)
 8002118:	f000 fe00 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T4)
 800211c:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <TIM4_IRQHandler+0x154>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <TIM4_IRQHandler+0x7c>
 8002126:	2b01      	cmp	r3, #1
 8002128:	d00b      	beq.n	8002142 <TIM4_IRQHandler+0x92>
}
 800212a:	e067      	b.n	80021fc <TIM4_IRQHandler+0x14c>
		case 0 : IC_Val1_T4 = TIM_GetCapture2(TIM4);
 800212c:	4834      	ldr	r0, [pc, #208]	@ (8002200 <TIM4_IRQHandler+0x150>)
 800212e:	f000 fd0f 	bl	8002b50 <TIM_GetCapture2>
 8002132:	4603      	mov	r3, r0
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b34      	ldr	r3, [pc, #208]	@ (8002208 <TIM4_IRQHandler+0x158>)
 8002138:	801a      	strh	r2, [r3, #0]
		IT_counter_T4 = 1;
 800213a:	4b32      	ldr	r3, [pc, #200]	@ (8002204 <TIM4_IRQHandler+0x154>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
		break;
 8002140:	e05c      	b.n	80021fc <TIM4_IRQHandler+0x14c>
		case 1 : IC_Val2_T4 = TIM_GetCapture2(TIM4);
 8002142:	482f      	ldr	r0, [pc, #188]	@ (8002200 <TIM4_IRQHandler+0x150>)
 8002144:	f000 fd04 	bl	8002b50 <TIM_GetCapture2>
 8002148:	4603      	mov	r3, r0
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b2f      	ldr	r3, [pc, #188]	@ (800220c <TIM4_IRQHandler+0x15c>)
 800214e:	801a      	strh	r2, [r3, #0]
		IT_counter_T4 = 0;
 8002150:	4b2c      	ldr	r3, [pc, #176]	@ (8002204 <TIM4_IRQHandler+0x154>)
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
		break;
 8002156:	e051      	b.n	80021fc <TIM4_IRQHandler+0x14c>
	else if(TIM_GetITStatus(TIM4, TIM_IT_CC3) != RESET)
 8002158:	2108      	movs	r1, #8
 800215a:	4829      	ldr	r0, [pc, #164]	@ (8002200 <TIM4_IRQHandler+0x150>)
 800215c:	f000 fdb4 	bl	8002cc8 <TIM_GetITStatus>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d021      	beq.n	80021aa <TIM4_IRQHandler+0xfa>
		TIM_ClearITPendingBit(TIM4 , TIM_IT_CC3);
 8002166:	2108      	movs	r1, #8
 8002168:	4825      	ldr	r0, [pc, #148]	@ (8002200 <TIM4_IRQHandler+0x150>)
 800216a:	f000 fdd7 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T4)
 800216e:	4b25      	ldr	r3, [pc, #148]	@ (8002204 <TIM4_IRQHandler+0x154>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <TIM4_IRQHandler+0xce>
 8002178:	2b01      	cmp	r3, #1
 800217a:	d00b      	beq.n	8002194 <TIM4_IRQHandler+0xe4>
}
 800217c:	e03e      	b.n	80021fc <TIM4_IRQHandler+0x14c>
		case 0 : IC_Val1_T4 = TIM_GetCapture3(TIM4);
 800217e:	4820      	ldr	r0, [pc, #128]	@ (8002200 <TIM4_IRQHandler+0x150>)
 8002180:	f000 fcf2 	bl	8002b68 <TIM_GetCapture3>
 8002184:	4603      	mov	r3, r0
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <TIM4_IRQHandler+0x158>)
 800218a:	801a      	strh	r2, [r3, #0]
		IT_counter_T4 = 1;
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <TIM4_IRQHandler+0x154>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
		break;
 8002192:	e033      	b.n	80021fc <TIM4_IRQHandler+0x14c>
		case 1 : IC_Val2_T4 = TIM_GetCapture3(TIM4);
 8002194:	481a      	ldr	r0, [pc, #104]	@ (8002200 <TIM4_IRQHandler+0x150>)
 8002196:	f000 fce7 	bl	8002b68 <TIM_GetCapture3>
 800219a:	4603      	mov	r3, r0
 800219c:	b29a      	uxth	r2, r3
 800219e:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <TIM4_IRQHandler+0x15c>)
 80021a0:	801a      	strh	r2, [r3, #0]
		IT_counter_T4 = 0;
 80021a2:	4b18      	ldr	r3, [pc, #96]	@ (8002204 <TIM4_IRQHandler+0x154>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
		break;
 80021a8:	e028      	b.n	80021fc <TIM4_IRQHandler+0x14c>
	else if(TIM_GetITStatus(TIM4, TIM_IT_CC4) != RESET)
 80021aa:	2110      	movs	r1, #16
 80021ac:	4814      	ldr	r0, [pc, #80]	@ (8002200 <TIM4_IRQHandler+0x150>)
 80021ae:	f000 fd8b 	bl	8002cc8 <TIM_GetITStatus>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d021      	beq.n	80021fc <TIM4_IRQHandler+0x14c>
		TIM_ClearITPendingBit(TIM4 , TIM_IT_CC4);
 80021b8:	2110      	movs	r1, #16
 80021ba:	4811      	ldr	r0, [pc, #68]	@ (8002200 <TIM4_IRQHandler+0x150>)
 80021bc:	f000 fdae 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T4)
 80021c0:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <TIM4_IRQHandler+0x154>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <TIM4_IRQHandler+0x120>
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d00b      	beq.n	80021e6 <TIM4_IRQHandler+0x136>
}
 80021ce:	e015      	b.n	80021fc <TIM4_IRQHandler+0x14c>
		case 0 : IC_Val1_T4 = TIM_GetCapture4(TIM4);
 80021d0:	480b      	ldr	r0, [pc, #44]	@ (8002200 <TIM4_IRQHandler+0x150>)
 80021d2:	f000 fcd5 	bl	8002b80 <TIM_GetCapture4>
 80021d6:	4603      	mov	r3, r0
 80021d8:	b29a      	uxth	r2, r3
 80021da:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <TIM4_IRQHandler+0x158>)
 80021dc:	801a      	strh	r2, [r3, #0]
		IT_counter_T4 = 1;
 80021de:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <TIM4_IRQHandler+0x154>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
		break;
 80021e4:	e00a      	b.n	80021fc <TIM4_IRQHandler+0x14c>
		case 1 : IC_Val2_T4 = TIM_GetCapture4(TIM4);
 80021e6:	4806      	ldr	r0, [pc, #24]	@ (8002200 <TIM4_IRQHandler+0x150>)
 80021e8:	f000 fcca 	bl	8002b80 <TIM_GetCapture4>
 80021ec:	4603      	mov	r3, r0
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <TIM4_IRQHandler+0x15c>)
 80021f2:	801a      	strh	r2, [r3, #0]
		IT_counter_T4 = 0;
 80021f4:	4b03      	ldr	r3, [pc, #12]	@ (8002204 <TIM4_IRQHandler+0x154>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
		break;
 80021fa:	bf00      	nop
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40000800 	.word	0x40000800
 8002204:	20000122 	.word	0x20000122
 8002208:	20000104 	.word	0x20000104
 800220c:	20000106 	.word	0x20000106

08002210 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM5, TIM_IT_CC1) != RESET)
 8002214:	2102      	movs	r1, #2
 8002216:	4852      	ldr	r0, [pc, #328]	@ (8002360 <TIM5_IRQHandler+0x150>)
 8002218:	f000 fd56 	bl	8002cc8 <TIM_GetITStatus>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d021      	beq.n	8002266 <TIM5_IRQHandler+0x56>
	{
		// clear binding flag
		TIM_ClearITPendingBit(TIM5 , TIM_IT_CC1);
 8002222:	2102      	movs	r1, #2
 8002224:	484e      	ldr	r0, [pc, #312]	@ (8002360 <TIM5_IRQHandler+0x150>)
 8002226:	f000 fd79 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T5)
 800222a:	4b4e      	ldr	r3, [pc, #312]	@ (8002364 <TIM5_IRQHandler+0x154>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <TIM5_IRQHandler+0x2a>
 8002234:	2b01      	cmp	r3, #1
 8002236:	d00b      	beq.n	8002250 <TIM5_IRQHandler+0x40>
		case 1 : IC_Val2_T5 = TIM_GetCapture4(TIM5);
		IT_counter_T5 = 0;
		break;
		}
	}
}
 8002238:	e090      	b.n	800235c <TIM5_IRQHandler+0x14c>
		case 0 : IC_Val1_T5 = TIM_GetCapture1(TIM5);
 800223a:	4849      	ldr	r0, [pc, #292]	@ (8002360 <TIM5_IRQHandler+0x150>)
 800223c:	f000 fc7c 	bl	8002b38 <TIM_GetCapture1>
 8002240:	4603      	mov	r3, r0
 8002242:	b29a      	uxth	r2, r3
 8002244:	4b48      	ldr	r3, [pc, #288]	@ (8002368 <TIM5_IRQHandler+0x158>)
 8002246:	801a      	strh	r2, [r3, #0]
		IT_counter_T5 = 1;
 8002248:	4b46      	ldr	r3, [pc, #280]	@ (8002364 <TIM5_IRQHandler+0x154>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
		break;
 800224e:	e085      	b.n	800235c <TIM5_IRQHandler+0x14c>
		case 1 : IC_Val2_T5 = TIM_GetCapture1(TIM5);
 8002250:	4843      	ldr	r0, [pc, #268]	@ (8002360 <TIM5_IRQHandler+0x150>)
 8002252:	f000 fc71 	bl	8002b38 <TIM_GetCapture1>
 8002256:	4603      	mov	r3, r0
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b44      	ldr	r3, [pc, #272]	@ (800236c <TIM5_IRQHandler+0x15c>)
 800225c:	801a      	strh	r2, [r3, #0]
		IT_counter_T5 = 0;
 800225e:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <TIM5_IRQHandler+0x154>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
		break;
 8002264:	e07a      	b.n	800235c <TIM5_IRQHandler+0x14c>
	else if(TIM_GetITStatus(TIM5, TIM_IT_CC2) != RESET)
 8002266:	2104      	movs	r1, #4
 8002268:	483d      	ldr	r0, [pc, #244]	@ (8002360 <TIM5_IRQHandler+0x150>)
 800226a:	f000 fd2d 	bl	8002cc8 <TIM_GetITStatus>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d021      	beq.n	80022b8 <TIM5_IRQHandler+0xa8>
		TIM_ClearITPendingBit(TIM5 , TIM_IT_CC2);
 8002274:	2104      	movs	r1, #4
 8002276:	483a      	ldr	r0, [pc, #232]	@ (8002360 <TIM5_IRQHandler+0x150>)
 8002278:	f000 fd50 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T5)
 800227c:	4b39      	ldr	r3, [pc, #228]	@ (8002364 <TIM5_IRQHandler+0x154>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <TIM5_IRQHandler+0x7c>
 8002286:	2b01      	cmp	r3, #1
 8002288:	d00b      	beq.n	80022a2 <TIM5_IRQHandler+0x92>
}
 800228a:	e067      	b.n	800235c <TIM5_IRQHandler+0x14c>
		case 0 : IC_Val1_T5 = TIM_GetCapture2(TIM5);
 800228c:	4834      	ldr	r0, [pc, #208]	@ (8002360 <TIM5_IRQHandler+0x150>)
 800228e:	f000 fc5f 	bl	8002b50 <TIM_GetCapture2>
 8002292:	4603      	mov	r3, r0
 8002294:	b29a      	uxth	r2, r3
 8002296:	4b34      	ldr	r3, [pc, #208]	@ (8002368 <TIM5_IRQHandler+0x158>)
 8002298:	801a      	strh	r2, [r3, #0]
		IT_counter_T5 = 1;
 800229a:	4b32      	ldr	r3, [pc, #200]	@ (8002364 <TIM5_IRQHandler+0x154>)
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
		break;
 80022a0:	e05c      	b.n	800235c <TIM5_IRQHandler+0x14c>
		case 1 : IC_Val2_T5 = TIM_GetCapture2(TIM5);
 80022a2:	482f      	ldr	r0, [pc, #188]	@ (8002360 <TIM5_IRQHandler+0x150>)
 80022a4:	f000 fc54 	bl	8002b50 <TIM_GetCapture2>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	4b2f      	ldr	r3, [pc, #188]	@ (800236c <TIM5_IRQHandler+0x15c>)
 80022ae:	801a      	strh	r2, [r3, #0]
		IT_counter_T5 = 0;
 80022b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <TIM5_IRQHandler+0x154>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
		break;
 80022b6:	e051      	b.n	800235c <TIM5_IRQHandler+0x14c>
	else if(TIM_GetITStatus(TIM5, TIM_IT_CC3) != RESET)
 80022b8:	2108      	movs	r1, #8
 80022ba:	4829      	ldr	r0, [pc, #164]	@ (8002360 <TIM5_IRQHandler+0x150>)
 80022bc:	f000 fd04 	bl	8002cc8 <TIM_GetITStatus>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d021      	beq.n	800230a <TIM5_IRQHandler+0xfa>
		TIM_ClearITPendingBit(TIM5 , TIM_IT_CC3);
 80022c6:	2108      	movs	r1, #8
 80022c8:	4825      	ldr	r0, [pc, #148]	@ (8002360 <TIM5_IRQHandler+0x150>)
 80022ca:	f000 fd27 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T5)
 80022ce:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <TIM5_IRQHandler+0x154>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <TIM5_IRQHandler+0xce>
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d00b      	beq.n	80022f4 <TIM5_IRQHandler+0xe4>
}
 80022dc:	e03e      	b.n	800235c <TIM5_IRQHandler+0x14c>
		case 0 : IC_Val1_T5 = TIM_GetCapture3(TIM5);
 80022de:	4820      	ldr	r0, [pc, #128]	@ (8002360 <TIM5_IRQHandler+0x150>)
 80022e0:	f000 fc42 	bl	8002b68 <TIM_GetCapture3>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <TIM5_IRQHandler+0x158>)
 80022ea:	801a      	strh	r2, [r3, #0]
		IT_counter_T5 = 1;
 80022ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <TIM5_IRQHandler+0x154>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
		break;
 80022f2:	e033      	b.n	800235c <TIM5_IRQHandler+0x14c>
		case 1 : IC_Val2_T5 = TIM_GetCapture3(TIM5);
 80022f4:	481a      	ldr	r0, [pc, #104]	@ (8002360 <TIM5_IRQHandler+0x150>)
 80022f6:	f000 fc37 	bl	8002b68 <TIM_GetCapture3>
 80022fa:	4603      	mov	r3, r0
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <TIM5_IRQHandler+0x15c>)
 8002300:	801a      	strh	r2, [r3, #0]
		IT_counter_T5 = 0;
 8002302:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <TIM5_IRQHandler+0x154>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
		break;
 8002308:	e028      	b.n	800235c <TIM5_IRQHandler+0x14c>
	else if(TIM_GetITStatus(TIM5, TIM_IT_CC4) != RESET)
 800230a:	2110      	movs	r1, #16
 800230c:	4814      	ldr	r0, [pc, #80]	@ (8002360 <TIM5_IRQHandler+0x150>)
 800230e:	f000 fcdb 	bl	8002cc8 <TIM_GetITStatus>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d021      	beq.n	800235c <TIM5_IRQHandler+0x14c>
		TIM_ClearITPendingBit(TIM5 , TIM_IT_CC4);
 8002318:	2110      	movs	r1, #16
 800231a:	4811      	ldr	r0, [pc, #68]	@ (8002360 <TIM5_IRQHandler+0x150>)
 800231c:	f000 fcfe 	bl	8002d1c <TIM_ClearITPendingBit>
		switch( IT_counter_T5)
 8002320:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <TIM5_IRQHandler+0x154>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <TIM5_IRQHandler+0x120>
 800232a:	2b01      	cmp	r3, #1
 800232c:	d00b      	beq.n	8002346 <TIM5_IRQHandler+0x136>
}
 800232e:	e015      	b.n	800235c <TIM5_IRQHandler+0x14c>
		case 0 : IC_Val1_T5 = TIM_GetCapture4(TIM5);
 8002330:	480b      	ldr	r0, [pc, #44]	@ (8002360 <TIM5_IRQHandler+0x150>)
 8002332:	f000 fc25 	bl	8002b80 <TIM_GetCapture4>
 8002336:	4603      	mov	r3, r0
 8002338:	b29a      	uxth	r2, r3
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <TIM5_IRQHandler+0x158>)
 800233c:	801a      	strh	r2, [r3, #0]
		IT_counter_T5 = 1;
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <TIM5_IRQHandler+0x154>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
		break;
 8002344:	e00a      	b.n	800235c <TIM5_IRQHandler+0x14c>
		case 1 : IC_Val2_T5 = TIM_GetCapture4(TIM5);
 8002346:	4806      	ldr	r0, [pc, #24]	@ (8002360 <TIM5_IRQHandler+0x150>)
 8002348:	f000 fc1a 	bl	8002b80 <TIM_GetCapture4>
 800234c:	4603      	mov	r3, r0
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <TIM5_IRQHandler+0x15c>)
 8002352:	801a      	strh	r2, [r3, #0]
		IT_counter_T5 = 0;
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <TIM5_IRQHandler+0x154>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
		break;
 800235a:	bf00      	nop
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40000c00 	.word	0x40000c00
 8002364:	20000123 	.word	0x20000123
 8002368:	20000108 	.word	0x20000108
 800236c:	2000010a 	.word	0x2000010a

08002370 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	2300      	movs	r3, #0
 800237e:	73bb      	strb	r3, [r7, #14]
 8002380:	230f      	movs	r3, #15
 8002382:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	78db      	ldrb	r3, [r3, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d039      	beq.n	8002400 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800238c:	4b27      	ldr	r3, [pc, #156]	@ (800242c <NVIC_Init+0xbc>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	f1c3 0304 	rsb	r3, r3, #4
 80023a2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80023a4:	7b7a      	ldrb	r2, [r7, #13]
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	fa42 f303 	asr.w	r3, r2, r3
 80023ac:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	785b      	ldrb	r3, [r3, #1]
 80023b2:	461a      	mov	r2, r3
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	789a      	ldrb	r2, [r3, #2]
 80023c0:	7b7b      	ldrb	r3, [r7, #13]
 80023c2:	4013      	ands	r3, r2
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80023d2:	4a17      	ldr	r2, [pc, #92]	@ (8002430 <NVIC_Init+0xc0>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80023e8:	4911      	ldr	r1, [pc, #68]	@ (8002430 <NVIC_Init+0xc0>)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	0952      	lsrs	r2, r2, #5
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80023f4:	2201      	movs	r2, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80023fa:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80023fe:	e00f      	b.n	8002420 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002408:	4909      	ldr	r1, [pc, #36]	@ (8002430 <NVIC_Init+0xc0>)
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	0952      	lsrs	r2, r2, #5
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002414:	2201      	movs	r2, #1
 8002416:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002418:	f100 0320 	add.w	r3, r0, #32
 800241c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00
 8002430:	e000e100 	.word	0xe000e100

08002434 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e076      	b.n	800253e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002450:	2201      	movs	r2, #1
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d165      	bne.n	8002538 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2103      	movs	r1, #3
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	401a      	ands	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	791b      	ldrb	r3, [r3, #4]
 800248a:	4619      	mov	r1, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	791b      	ldrb	r3, [r3, #4]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d003      	beq.n	80024aa <GPIO_Init+0x76>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	791b      	ldrb	r3, [r3, #4]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d12e      	bne.n	8002508 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2103      	movs	r1, #3
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	795b      	ldrb	r3, [r3, #5]
 80024c8:	4619      	mov	r1, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4619      	mov	r1, r3
 80024e2:	2301      	movs	r3, #1
 80024e4:	408b      	lsls	r3, r1
 80024e6:	43db      	mvns	r3, r3
 80024e8:	401a      	ands	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	7992      	ldrb	r2, [r2, #6]
 80024f6:	4611      	mov	r1, r2
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	b292      	uxth	r2, r2
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	b292      	uxth	r2, r2
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	b29b      	uxth	r3, r3
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2103      	movs	r1, #3
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	401a      	ands	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	79db      	ldrb	r3, [r3, #7]
 8002528:	4619      	mov	r1, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b0f      	cmp	r3, #15
 8002542:	d985      	bls.n	8002450 <GPIO_Init+0x1c>
    }
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80025a8:	787a      	ldrb	r2, [r7, #1]
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	08db      	lsrs	r3, r3, #3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	210f      	movs	r1, #15
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	8879      	ldrh	r1, [r7, #2]
 80025da:	08c9      	lsrs	r1, r1, #3
 80025dc:	b289      	uxth	r1, r1
 80025de:	4608      	mov	r0, r1
 80025e0:	ea02 0103 	and.w	r1, r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f100 0208 	add.w	r2, r0, #8
 80025ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	08db      	lsrs	r3, r3, #3
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <RCC_DeInit+0x58>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a13      	ldr	r2, [pc, #76]	@ (800267c <RCC_DeInit+0x58>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <RCC_DeInit+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <RCC_DeInit+0x58>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a0f      	ldr	r2, [pc, #60]	@ (800267c <RCC_DeInit+0x58>)
 8002640:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002644:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002648:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800264a:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <RCC_DeInit+0x58>)
 800264c:	4a0c      	ldr	r2, [pc, #48]	@ (8002680 <RCC_DeInit+0x5c>)
 800264e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8002650:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <RCC_DeInit+0x58>)
 8002652:	4a0c      	ldr	r2, [pc, #48]	@ (8002684 <RCC_DeInit+0x60>)
 8002654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002658:	4b08      	ldr	r3, [pc, #32]	@ (800267c <RCC_DeInit+0x58>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a07      	ldr	r2, [pc, #28]	@ (800267c <RCC_DeInit+0x58>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <RCC_DeInit+0x58>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800266a:	4b04      	ldr	r3, [pc, #16]	@ (800267c <RCC_DeInit+0x58>)
 800266c:	2200      	movs	r2, #0
 800266e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40023800 	.word	0x40023800
 8002680:	24003010 	.word	0x24003010
 8002684:	20003000 	.word	0x20003000

08002688 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800269a:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800269c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800269e:	4909      	ldr	r1, [pc, #36]	@ (80026c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80026a6:	e006      	b.n	80026b6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80026a8:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80026aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	4904      	ldr	r1, [pc, #16]	@ (80026c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d006      	beq.n	80026e8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <RCC_APB1PeriphClockCmd+0x3c>)
 80026dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026de:	4909      	ldr	r1, [pc, #36]	@ (8002704 <RCC_APB1PeriphClockCmd+0x3c>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	640b      	str	r3, [r1, #64]	@ 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80026e6:	e006      	b.n	80026f6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <RCC_APB1PeriphClockCmd+0x3c>)
 80026ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	4904      	ldr	r1, [pc, #16]	@ (8002704 <RCC_APB1PeriphClockCmd+0x3c>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800

08002708 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800271a:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <RCC_APB2PeriphClockCmd+0x3c>)
 800271c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800271e:	4909      	ldr	r1, [pc, #36]	@ (8002744 <RCC_APB2PeriphClockCmd+0x3c>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4313      	orrs	r3, r2
 8002724:	644b      	str	r3, [r1, #68]	@ 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002726:	e006      	b.n	8002736 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002728:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <RCC_APB2PeriphClockCmd+0x3c>)
 800272a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	43db      	mvns	r3, r3
 8002730:	4904      	ldr	r1, [pc, #16]	@ (8002744 <RCC_APB2PeriphClockCmd+0x3c>)
 8002732:	4013      	ands	r3, r2
 8002734:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800

08002748 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800275c:	89fb      	ldrh	r3, [r7, #14]
 800275e:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 8002762:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	881a      	ldrh	r2, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	885b      	ldrh	r3, [r3, #2]
 800276c:	4313      	orrs	r3, r2
 800276e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002774:	4313      	orrs	r3, r2
 8002776:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800277c:	4313      	orrs	r3, r2
 800277e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002784:	4313      	orrs	r3, r2
 8002786:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800278c:	4313      	orrs	r3, r2
 800278e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002794:	4313      	orrs	r3, r2
 8002796:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800279c:	4313      	orrs	r3, r2
 800279e:	b29a      	uxth	r2, r3
 80027a0:	89fb      	ldrh	r3, [r7, #14]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	89fa      	ldrh	r2, [r7, #14]
 80027aa:	801a      	strh	r2, [r3, #0]
  if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
  {
	  SPIx->CR2 |= (1 << 2); // SSOE enabled in master mode
  }*/
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8b9b      	ldrh	r3, [r3, #28]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	8a1a      	ldrh	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	821a      	strh	r2, [r3, #16]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80027f2:	e007      	b.n	8002804 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	801a      	strh	r2, [r3, #0]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	899b      	ldrh	r3, [r3, #12]
 800281c:	b29b      	uxth	r3, r3
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));

  while(!(SPIx->SR & SPI_SR_TXE));
 8002836:	bf00      	nop
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	891b      	ldrh	r3, [r3, #8]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f8      	beq.n	8002838 <SPI_I2S_SendData+0xe>

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	887a      	ldrh	r2, [r7, #2]
 800284a:	819a      	strh	r2, [r3, #12]
  while(SPIx->SR & SPI_SR_BSY);
 800284c:	bf00      	nop
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	891b      	ldrh	r3, [r3, #8]
 8002852:	b29b      	uxth	r3, r3
 8002854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f8      	bne.n	800284e <SPI_I2S_SendData+0x24>

}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	70fb      	strb	r3, [r7, #3]
 8002876:	4613      	mov	r3, r2
 8002878:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800287a:	2300      	movs	r3, #0
 800287c:	81fb      	strh	r3, [r7, #14]
 800287e:	2300      	movs	r3, #0
 8002880:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	b2db      	uxtb	r3, r3
 8002888:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800288a:	89fb      	ldrh	r3, [r7, #14]
 800288c:	2201      	movs	r2, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8002894:	78bb      	ldrb	r3, [r7, #2]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	889b      	ldrh	r3, [r3, #4]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	89bb      	ldrh	r3, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80028aa:	e009      	b.n	80028c0 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	889b      	ldrh	r3, [r3, #4]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	89bb      	ldrh	r3, [r7, #12]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	809a      	strh	r2, [r3, #4]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a29      	ldr	r2, [pc, #164]	@ (8002988 <TIM_TimeBaseInit+0xbc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d013      	beq.n	8002910 <TIM_TimeBaseInit+0x44>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a28      	ldr	r2, [pc, #160]	@ (800298c <TIM_TimeBaseInit+0xc0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00f      	beq.n	8002910 <TIM_TimeBaseInit+0x44>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f6:	d00b      	beq.n	8002910 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a25      	ldr	r2, [pc, #148]	@ (8002990 <TIM_TimeBaseInit+0xc4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <TIM_TimeBaseInit+0x44>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a24      	ldr	r2, [pc, #144]	@ (8002994 <TIM_TimeBaseInit+0xc8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d003      	beq.n	8002910 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a23      	ldr	r2, [pc, #140]	@ (8002998 <TIM_TimeBaseInit+0xcc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d108      	bne.n	8002922 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002910:	89fb      	ldrh	r3, [r7, #14]
 8002912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002916:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	885a      	ldrh	r2, [r3, #2]
 800291c:	89fb      	ldrh	r3, [r7, #14]
 800291e:	4313      	orrs	r3, r2
 8002920:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <TIM_TimeBaseInit+0xd0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00c      	beq.n	8002944 <TIM_TimeBaseInit+0x78>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1c      	ldr	r2, [pc, #112]	@ (80029a0 <TIM_TimeBaseInit+0xd4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d008      	beq.n	8002944 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002938:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	891a      	ldrh	r2, [r3, #8]
 800293e:	89fb      	ldrh	r3, [r7, #14]
 8002940:	4313      	orrs	r3, r2
 8002942:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	89fa      	ldrh	r2, [r7, #14]
 8002948:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	62da      	str	r2, [r3, #44]	@ 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	851a      	strh	r2, [r3, #40]	@ 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <TIM_TimeBaseInit+0xbc>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <TIM_TimeBaseInit+0x9e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a09      	ldr	r2, [pc, #36]	@ (800298c <TIM_TimeBaseInit+0xc0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d104      	bne.n	8002974 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	7a9b      	ldrb	r3, [r3, #10]
 800296e:	461a      	mov	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	829a      	strh	r2, [r3, #20]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40010000 	.word	0x40010000
 800298c:	40010400 	.word	0x40010400
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40000c00 	.word	0x40000c00
 800299c:	40001000 	.word	0x40001000
 80029a0:	40001400 	.word	0x40001400

080029a4 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f04f 32ff 	mov.w	r2, #4294967295
 80029b2:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	729a      	strb	r2, [r3, #10]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
 80029e4:	4613      	mov	r3, r2
 80029e6:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	851a      	strh	r2, [r3, #40]	@ 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	883a      	ldrh	r2, [r7, #0]
 80029f2:	829a      	strh	r2, [r3, #20]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8002a72:	e007      	b.n	8002a84 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	801a      	strh	r2, [r3, #0]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	8859      	ldrh	r1, [r3, #2]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	889a      	ldrh	r2, [r3, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	891b      	ldrh	r3, [r3, #8]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f98f 	bl	8002dd2 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	88db      	ldrh	r3, [r3, #6]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f86c 	bl	8002b98 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002ac0:	e036      	b.n	8002b30 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d10f      	bne.n	8002aea <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	8859      	ldrh	r1, [r3, #2]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	889a      	ldrh	r2, [r3, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	891b      	ldrh	r3, [r3, #8]
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f9be 	bl	8002e58 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	88db      	ldrh	r3, [r3, #6]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f874 	bl	8002bd0 <TIM_SetIC2Prescaler>
}
 8002ae8:	e022      	b.n	8002b30 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d10f      	bne.n	8002b12 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	8859      	ldrh	r1, [r3, #2]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	889a      	ldrh	r2, [r3, #4]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	891b      	ldrh	r3, [r3, #8]
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f9f7 	bl	8002ef2 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	88db      	ldrh	r3, [r3, #6]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f87e 	bl	8002c0c <TIM_SetIC3Prescaler>
}
 8002b10:	e00e      	b.n	8002b30 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	8859      	ldrh	r1, [r3, #2]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	889a      	ldrh	r2, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	891b      	ldrh	r3, [r3, #8]
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa2f 	bl	8002f82 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	88db      	ldrh	r3, [r3, #6]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f88a 	bl	8002c44 <TIM_SetIC4Prescaler>
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8b1b      	ldrh	r3, [r3, #24]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f023 030c 	bic.w	r3, r3, #12
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8b1b      	ldrh	r3, [r3, #24]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	887b      	ldrh	r3, [r7, #2]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	831a      	strh	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8b1b      	ldrh	r3, [r3, #24]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8b1b      	ldrh	r3, [r3, #24]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	831a      	strh	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8b9b      	ldrh	r3, [r3, #28]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f023 030c 	bic.w	r3, r3, #12
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8b9b      	ldrh	r3, [r3, #28]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	839a      	strh	r2, [r3, #28]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8b9b      	ldrh	r3, [r3, #28]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8b9b      	ldrh	r3, [r3, #28]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	839a      	strh	r2, [r3, #28]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	899b      	ldrh	r3, [r3, #12]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8002ca6:	e009      	b.n	8002cbc <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	899b      	ldrh	r3, [r3, #12]
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	819a      	strh	r2, [r3, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	81bb      	strh	r3, [r7, #12]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8a1b      	ldrh	r3, [r3, #16]
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	887b      	ldrh	r3, [r7, #2]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	899b      	ldrh	r3, [r3, #12]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002cf8:	89bb      	ldrh	r3, [r7, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <TIM_GetITStatus+0x42>
 8002cfe:	897b      	ldrh	r3, [r7, #10]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	e001      	b.n	8002d0e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002d28:	887b      	ldrh	r3, [r7, #2]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	821a      	strh	r2, [r3, #16]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	4608      	mov	r0, r1
 8002d48:	4611      	mov	r1, r2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	817b      	strh	r3, [r7, #10]
 8002d50:	460b      	mov	r3, r1
 8002d52:	813b      	strh	r3, [r7, #8]
 8002d54:	4613      	mov	r3, r2
 8002d56:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	2b60      	cmp	r3, #96	@ 0x60
 8002d5c:	d106      	bne.n	8002d6c <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	8939      	ldrh	r1, [r7, #8]
 8002d62:	2201      	movs	r2, #1
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f877 	bl	8002e58 <TI2_Config>
 8002d6a:	e005      	b.n	8002d78 <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	8939      	ldrh	r1, [r7, #8]
 8002d70:	2201      	movs	r2, #1
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f82d 	bl	8002dd2 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8002d78:	897b      	ldrh	r3, [r7, #10]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f80c 	bl	8002d9a <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	891b      	ldrh	r3, [r3, #8]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f043 0307 	orr.w	r3, r3, #7
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	811a      	strh	r2, [r3, #8]
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	891b      	ldrh	r3, [r3, #8]
 8002dae:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002db0:	89fb      	ldrh	r3, [r7, #14]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db6:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002db8:	89fa      	ldrh	r2, [r7, #14]
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	89fa      	ldrh	r2, [r7, #14]
 8002dc4:	811a      	strh	r2, [r3, #8]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b087      	sub	sp, #28
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	4608      	mov	r0, r1
 8002ddc:	4611      	mov	r1, r2
 8002dde:	461a      	mov	r2, r3
 8002de0:	4603      	mov	r3, r0
 8002de2:	817b      	strh	r3, [r7, #10]
 8002de4:	460b      	mov	r3, r1
 8002de6:	813b      	strh	r3, [r7, #8]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	82fb      	strh	r3, [r7, #22]
 8002df0:	2300      	movs	r3, #0
 8002df2:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8c1b      	ldrh	r3, [r3, #32]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8b1b      	ldrh	r3, [r3, #24]
 8002e08:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8c1b      	ldrh	r3, [r3, #32]
 8002e0e:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002e10:	8afb      	ldrh	r3, [r7, #22]
 8002e12:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
 8002e16:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	893b      	ldrh	r3, [r7, #8]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	8afb      	ldrh	r3, [r7, #22]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e2a:	8abb      	ldrh	r3, [r7, #20]
 8002e2c:	f023 030a 	bic.w	r3, r3, #10
 8002e30:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e32:	897a      	ldrh	r2, [r7, #10]
 8002e34:	8abb      	ldrh	r3, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8afa      	ldrh	r2, [r7, #22]
 8002e44:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8aba      	ldrh	r2, [r7, #20]
 8002e4a:	841a      	strh	r2, [r3, #32]
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	817b      	strh	r3, [r7, #10]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	813b      	strh	r3, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	82fb      	strh	r3, [r7, #22]
 8002e76:	2300      	movs	r3, #0
 8002e78:	82bb      	strh	r3, [r7, #20]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8c1b      	ldrh	r3, [r3, #32]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f023 0310 	bic.w	r3, r3, #16
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8b1b      	ldrh	r3, [r3, #24]
 8002e92:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8c1b      	ldrh	r3, [r3, #32]
 8002e98:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002ea0:	8afb      	ldrh	r3, [r7, #22]
 8002ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea6:	051b      	lsls	r3, r3, #20
 8002ea8:	0d1b      	lsrs	r3, r3, #20
 8002eaa:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	031b      	lsls	r3, r3, #12
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	8afb      	ldrh	r3, [r7, #22]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002eb8:	893b      	ldrh	r3, [r7, #8]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	8afb      	ldrh	r3, [r7, #22]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ec4:	8abb      	ldrh	r3, [r7, #20]
 8002ec6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002eca:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002ecc:	8a7a      	ldrh	r2, [r7, #18]
 8002ece:	8abb      	ldrh	r3, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f043 0310 	orr.w	r3, r3, #16
 8002ed8:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8afa      	ldrh	r2, [r7, #22]
 8002ede:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8aba      	ldrh	r2, [r7, #20]
 8002ee4:	841a      	strh	r2, [r3, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	371c      	adds	r7, #28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	4608      	mov	r0, r1
 8002efc:	4611      	mov	r1, r2
 8002efe:	461a      	mov	r2, r3
 8002f00:	4603      	mov	r3, r0
 8002f02:	817b      	strh	r3, [r7, #10]
 8002f04:	460b      	mov	r3, r1
 8002f06:	813b      	strh	r3, [r7, #8]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	82fb      	strh	r3, [r7, #22]
 8002f10:	2300      	movs	r3, #0
 8002f12:	82bb      	strh	r3, [r7, #20]
 8002f14:	2300      	movs	r3, #0
 8002f16:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8c1b      	ldrh	r3, [r3, #32]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8b9b      	ldrh	r3, [r3, #28]
 8002f2c:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8c1b      	ldrh	r3, [r3, #32]
 8002f32:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002f34:	897b      	ldrh	r3, [r7, #10]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002f3a:	8afb      	ldrh	r3, [r7, #22]
 8002f3c:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
 8002f40:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	893b      	ldrh	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	8afb      	ldrh	r3, [r7, #22]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002f54:	8abb      	ldrh	r3, [r7, #20]
 8002f56:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002f5a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002f5c:	8a7a      	ldrh	r2, [r7, #18]
 8002f5e:	8abb      	ldrh	r3, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f68:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8afa      	ldrh	r2, [r7, #22]
 8002f6e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8aba      	ldrh	r2, [r7, #20]
 8002f74:	841a      	strh	r2, [r3, #32]
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b087      	sub	sp, #28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	4608      	mov	r0, r1
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4603      	mov	r3, r0
 8002f92:	817b      	strh	r3, [r7, #10]
 8002f94:	460b      	mov	r3, r1
 8002f96:	813b      	strh	r3, [r7, #8]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	82fb      	strh	r3, [r7, #22]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	82bb      	strh	r3, [r7, #20]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8c1b      	ldrh	r3, [r3, #32]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8b9b      	ldrh	r3, [r3, #28]
 8002fbc:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8c1b      	ldrh	r3, [r3, #32]
 8002fc2:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	031b      	lsls	r3, r3, #12
 8002fc8:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002fca:	8afb      	ldrh	r3, [r7, #22]
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd0:	051b      	lsls	r3, r3, #20
 8002fd2:	0d1b      	lsrs	r3, r3, #20
 8002fd4:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8002fd6:	893b      	ldrh	r3, [r7, #8]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	8afb      	ldrh	r3, [r7, #22]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	031b      	lsls	r3, r3, #12
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	8afb      	ldrh	r3, [r7, #22]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002fee:	8abb      	ldrh	r3, [r7, #20]
 8002ff0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ff4:	045b      	lsls	r3, r3, #17
 8002ff6:	0c5b      	lsrs	r3, r3, #17
 8002ff8:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002ffa:	8a7a      	ldrh	r2, [r7, #18]
 8002ffc:	8abb      	ldrh	r3, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003006:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8afa      	ldrh	r2, [r7, #22]
 800300c:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8aba      	ldrh	r2, [r7, #20]
 8003012:	841a      	strh	r2, [r3, #32]
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f103 0208 	add.w	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f04f 32ff 	mov.w	r2, #4294967295
 8003038:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f103 0208 	add.w	r2, r3, #8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f103 0208 	add.w	r2, r3, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d103      	bne.n	800309a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e00c      	b.n	80030b4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3308      	adds	r3, #8
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e002      	b.n	80030a8 <vListInsert+0x2e>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d2f6      	bcs.n	80030a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6892      	ldr	r2, [r2, #8]
 8003102:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6852      	ldr	r2, [r2, #4]
 800310c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d103      	bne.n	8003120 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	1e5a      	subs	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003140:	b580      	push	{r7, lr}
 8003142:	b08c      	sub	sp, #48	@ 0x30
 8003144:	af04      	add	r7, sp, #16
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fe17 	bl	8003d88 <pvPortMalloc>
 800315a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d013      	beq.n	800318a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003162:	204c      	movs	r0, #76	@ 0x4c
 8003164:	f000 fe10 	bl	8003d88 <pvPortMalloc>
 8003168:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003170:	224c      	movs	r2, #76	@ 0x4c
 8003172:	2100      	movs	r1, #0
 8003174:	69f8      	ldr	r0, [r7, #28]
 8003176:	f001 f8c0 	bl	80042fa <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003180:	e005      	b.n	800318e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	f000 fe9a 	bl	8003ebc <vPortFree>
 8003188:	e001      	b.n	800318e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	2300      	movs	r3, #0
 8003198:	9303      	str	r3, [sp, #12]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	9302      	str	r3, [sp, #8]
 800319e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f80e 	bl	80031cc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80031b0:	69f8      	ldr	r0, [r7, #28]
 80031b2:	f000 f871 	bl	8003298 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e002      	b.n	80031c2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295
 80031c0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80031c2:	69bb      	ldr	r3, [r7, #24]
    }
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031e4:	3b01      	subs	r3, #1
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f023 0307 	bic.w	r3, r3, #7
 80031f2:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01e      	beq.n	8003238 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e012      	b.n	8003226 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4413      	add	r3, r2
 8003206:	7819      	ldrb	r1, [r3, #0]
 8003208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4413      	add	r3, r2
 800320e:	3334      	adds	r3, #52	@ 0x34
 8003210:	460a      	mov	r2, r1
 8003212:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4413      	add	r3, r2
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3301      	adds	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b0f      	cmp	r3, #15
 800322a:	d9e9      	bls.n	8003200 <prvInitialiseNewTask+0x34>
 800322c:	e000      	b.n	8003230 <prvInitialiseNewTask+0x64>
            {
                break;
 800322e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	2b04      	cmp	r3, #4
 800323c:	d901      	bls.n	8003242 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800323e:	2304      	movs	r3, #4
 8003240:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	3304      	adds	r3, #4
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff07 	bl	8003060 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003254:	3318      	adds	r3, #24
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff02 	bl	8003060 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003260:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f1c3 0205 	rsb	r2, r3, #5
 8003268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003270:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	6938      	ldr	r0, [r7, #16]
 8003278:	f000 fc34 	bl	8003ae4 <pxPortInitialiseStack>
 800327c:	4602      	mov	r2, r0
 800327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003280:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <prvInitialiseNewTask+0xc2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800328c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80032a0:	f000 fcc2 	bl	8003c28 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80032a4:	4b38      	ldr	r3, [pc, #224]	@ (8003388 <prvAddNewTaskToReadyList+0xf0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a37      	ldr	r2, [pc, #220]	@ (8003388 <prvAddNewTaskToReadyList+0xf0>)
 80032ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80032ae:	4b37      	ldr	r3, [pc, #220]	@ (800338c <prvAddNewTaskToReadyList+0xf4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80032b6:	4a35      	ldr	r2, [pc, #212]	@ (800338c <prvAddNewTaskToReadyList+0xf4>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032bc:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <prvAddNewTaskToReadyList+0xf0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d110      	bne.n	80032e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80032c4:	f000 faf4 	bl	80038b0 <prvInitialiseTaskLists>
 80032c8:	e00d      	b.n	80032e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80032ca:	4b31      	ldr	r3, [pc, #196]	@ (8003390 <prvAddNewTaskToReadyList+0xf8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032d2:	4b2e      	ldr	r3, [pc, #184]	@ (800338c <prvAddNewTaskToReadyList+0xf4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	429a      	cmp	r2, r3
 80032de:	d802      	bhi.n	80032e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80032e0:	4a2a      	ldr	r2, [pc, #168]	@ (800338c <prvAddNewTaskToReadyList+0xf4>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80032e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <prvAddNewTaskToReadyList+0xfc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	4a29      	ldr	r2, [pc, #164]	@ (8003394 <prvAddNewTaskToReadyList+0xfc>)
 80032ee:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	2201      	movs	r2, #1
 80032f6:	409a      	lsls	r2, r3
 80032f8:	4b27      	ldr	r3, [pc, #156]	@ (8003398 <prvAddNewTaskToReadyList+0x100>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	4a26      	ldr	r2, [pc, #152]	@ (8003398 <prvAddNewTaskToReadyList+0x100>)
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003306:	4925      	ldr	r1, [pc, #148]	@ (800339c <prvAddNewTaskToReadyList+0x104>)
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	3304      	adds	r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	3204      	adds	r2, #4
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	1d1a      	adds	r2, r3, #4
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a15      	ldr	r2, [pc, #84]	@ (800339c <prvAddNewTaskToReadyList+0x104>)
 8003346:	441a      	add	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	615a      	str	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003350:	4912      	ldr	r1, [pc, #72]	@ (800339c <prvAddNewTaskToReadyList+0x104>)
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	1c59      	adds	r1, r3, #1
 8003360:	480e      	ldr	r0, [pc, #56]	@ (800339c <prvAddNewTaskToReadyList+0x104>)
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4403      	add	r3, r0
 800336c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800336e:	f000 fc75 	bl	8003c5c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003372:	4b07      	ldr	r3, [pc, #28]	@ (8003390 <prvAddNewTaskToReadyList+0xf8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <prvAddNewTaskToReadyList+0xe6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800337a:	4b04      	ldr	r3, [pc, #16]	@ (800338c <prvAddNewTaskToReadyList+0xf4>)
 800337c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200001fc 	.word	0x200001fc
 800338c:	20000124 	.word	0x20000124
 8003390:	20000208 	.word	0x20000208
 8003394:	20000218 	.word	0x20000218
 8003398:	20000204 	.word	0x20000204
 800339c:	20000128 	.word	0x20000128

080033a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 80033b2:	f000 f855 	bl	8003460 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033b6:	2100      	movs	r1, #0
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fb13 	bl	80039e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80033be:	f000 f85d 	bl	800347c <xTaskResumeAll>
 80033c2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d107      	bne.n	80033da <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <vTaskDelay+0x44>)
 80033cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	e000ed04 	.word	0xe000ed04

080033e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80033ee:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <vTaskStartScheduler+0x5c>)
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	2300      	movs	r3, #0
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2300      	movs	r3, #0
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	4913      	ldr	r1, [pc, #76]	@ (8003448 <vTaskStartScheduler+0x60>)
 80033fc:	4813      	ldr	r0, [pc, #76]	@ (800344c <vTaskStartScheduler+0x64>)
 80033fe:	f7ff fe9f 	bl	8003140 <xTaskCreate>
 8003402:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d115      	bne.n	8003436 <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800340a:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800341c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800341e:	4b0c      	ldr	r3, [pc, #48]	@ (8003450 <vTaskStartScheduler+0x68>)
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003426:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <vTaskStartScheduler+0x6c>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <vTaskStartScheduler+0x70>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003432:	f000 fbcf 	bl	8003bd4 <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <vTaskStartScheduler+0x74>)
 8003438:	681b      	ldr	r3, [r3, #0]
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000220 	.word	0x20000220
 8003448:	08004390 	.word	0x08004390
 800344c:	0800388d 	.word	0x0800388d
 8003450:	2000021c 	.word	0x2000021c
 8003454:	20000208 	.word	0x20000208
 8003458:	20000200 	.word	0x20000200
 800345c:	200000bc 	.word	0x200000bc

08003460 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003464:	4b04      	ldr	r3, [pc, #16]	@ (8003478 <vTaskSuspendAll+0x18>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	4a03      	ldr	r2, [pc, #12]	@ (8003478 <vTaskSuspendAll+0x18>)
 800346c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	20000224 	.word	0x20000224

0800347c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800348a:	f000 fbcd 	bl	8003c28 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800348e:	4b62      	ldr	r3, [pc, #392]	@ (8003618 <xTaskResumeAll+0x19c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3b01      	subs	r3, #1
 8003494:	4a60      	ldr	r2, [pc, #384]	@ (8003618 <xTaskResumeAll+0x19c>)
 8003496:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003498:	4b5f      	ldr	r3, [pc, #380]	@ (8003618 <xTaskResumeAll+0x19c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 80b4 	bne.w	800360a <xTaskResumeAll+0x18e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034a2:	4b5e      	ldr	r3, [pc, #376]	@ (800361c <xTaskResumeAll+0x1a0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80af 	beq.w	800360a <xTaskResumeAll+0x18e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034ac:	e08a      	b.n	80035c4 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003620 <xTaskResumeAll+0x1a4>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	6a12      	ldr	r2, [r2, #32]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	69d2      	ldr	r2, [r2, #28]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	3318      	adds	r3, #24
 80034d8:	429a      	cmp	r2, r3
 80034da:	d103      	bne.n	80034e4 <xTaskResumeAll+0x68>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2200      	movs	r2, #0
 80034e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	68d2      	ldr	r2, [r2, #12]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	6892      	ldr	r2, [r2, #8]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3304      	adds	r3, #4
 8003516:	429a      	cmp	r2, r3
 8003518:	d103      	bne.n	8003522 <xTaskResumeAll+0xa6>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	615a      	str	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	2201      	movs	r2, #1
 8003538:	409a      	lsls	r2, r3
 800353a:	4b3a      	ldr	r3, [pc, #232]	@ (8003624 <xTaskResumeAll+0x1a8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	4a38      	ldr	r2, [pc, #224]	@ (8003624 <xTaskResumeAll+0x1a8>)
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003548:	4937      	ldr	r1, [pc, #220]	@ (8003628 <xTaskResumeAll+0x1ac>)
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3304      	adds	r3, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	60da      	str	r2, [r3, #12]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	3204      	adds	r2, #4
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	1d1a      	adds	r2, r3, #4
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4a28      	ldr	r2, [pc, #160]	@ (8003628 <xTaskResumeAll+0x1ac>)
 8003588:	441a      	add	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	615a      	str	r2, [r3, #20]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003592:	4925      	ldr	r1, [pc, #148]	@ (8003628 <xTaskResumeAll+0x1ac>)
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	1c59      	adds	r1, r3, #1
 80035a2:	4821      	ldr	r0, [pc, #132]	@ (8003628 <xTaskResumeAll+0x1ac>)
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4403      	add	r3, r0
 80035ae:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b4:	4b1d      	ldr	r3, [pc, #116]	@ (800362c <xTaskResumeAll+0x1b0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 80035be:	4b1c      	ldr	r3, [pc, #112]	@ (8003630 <xTaskResumeAll+0x1b4>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035c4:	4b16      	ldr	r3, [pc, #88]	@ (8003620 <xTaskResumeAll+0x1a4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f af70 	bne.w	80034ae <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80035d4:	f000 f9ea 	bl	80039ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035d8:	4b16      	ldr	r3, [pc, #88]	@ (8003634 <xTaskResumeAll+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	613b      	str	r3, [r7, #16]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80035e4:	f000 f828 	bl	8003638 <xTaskIncrementTick>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <xTaskResumeAll+0x1b4>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	613b      	str	r3, [r7, #16]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f1      	bne.n	80035e4 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <xTaskResumeAll+0x1b8>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003606:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <xTaskResumeAll+0x1b4>)
 8003608:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800360a:	f000 fb27 	bl	8003c5c <vPortExitCritical>

    return xAlreadyYielded;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000224 	.word	0x20000224
 800361c:	200001fc 	.word	0x200001fc
 8003620:	200001bc 	.word	0x200001bc
 8003624:	20000204 	.word	0x20000204
 8003628:	20000128 	.word	0x20000128
 800362c:	20000124 	.word	0x20000124
 8003630:	20000210 	.word	0x20000210
 8003634:	2000020c 	.word	0x2000020c

08003638 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003642:	4b66      	ldr	r3, [pc, #408]	@ (80037dc <xTaskIncrementTick+0x1a4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 80bd 	bne.w	80037c6 <xTaskIncrementTick+0x18e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800364c:	4b64      	ldr	r3, [pc, #400]	@ (80037e0 <xTaskIncrementTick+0x1a8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003654:	4a62      	ldr	r2, [pc, #392]	@ (80037e0 <xTaskIncrementTick+0x1a8>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d110      	bne.n	8003682 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003660:	4b60      	ldr	r3, [pc, #384]	@ (80037e4 <xTaskIncrementTick+0x1ac>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	4b60      	ldr	r3, [pc, #384]	@ (80037e8 <xTaskIncrementTick+0x1b0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5e      	ldr	r2, [pc, #376]	@ (80037e4 <xTaskIncrementTick+0x1ac>)
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4a5e      	ldr	r2, [pc, #376]	@ (80037e8 <xTaskIncrementTick+0x1b0>)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b5d      	ldr	r3, [pc, #372]	@ (80037ec <xTaskIncrementTick+0x1b4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	4a5c      	ldr	r2, [pc, #368]	@ (80037ec <xTaskIncrementTick+0x1b4>)
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	f000 f995 	bl	80039ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003682:	4b5b      	ldr	r3, [pc, #364]	@ (80037f0 <xTaskIncrementTick+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	429a      	cmp	r2, r3
 800368a:	f0c0 80a1 	bcc.w	80037d0 <xTaskIncrementTick+0x198>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800368e:	4b55      	ldr	r3, [pc, #340]	@ (80037e4 <xTaskIncrementTick+0x1ac>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d104      	bne.n	80036a2 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003698:	4b55      	ldr	r3, [pc, #340]	@ (80037f0 <xTaskIncrementTick+0x1b8>)
 800369a:	f04f 32ff 	mov.w	r2, #4294967295
 800369e:	601a      	str	r2, [r3, #0]
                    break;
 80036a0:	e096      	b.n	80037d0 <xTaskIncrementTick+0x198>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a2:	4b50      	ldr	r3, [pc, #320]	@ (80037e4 <xTaskIncrementTick+0x1ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d203      	bcs.n	80036c2 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80036ba:	4a4d      	ldr	r2, [pc, #308]	@ (80037f0 <xTaskIncrementTick+0x1b8>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80036c0:	e086      	b.n	80037d0 <xTaskIncrementTick+0x198>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	68d2      	ldr	r2, [r2, #12]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	6892      	ldr	r2, [r2, #8]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3304      	adds	r3, #4
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d103      	bne.n	80036f0 <xTaskIncrementTick+0xb8>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2200      	movs	r2, #0
 80036f4:	615a      	str	r2, [r3, #20]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01e      	beq.n	8003746 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	6a12      	ldr	r2, [r2, #32]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	69d2      	ldr	r2, [r2, #28]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3318      	adds	r3, #24
 800372a:	429a      	cmp	r2, r3
 800372c:	d103      	bne.n	8003736 <xTaskIncrementTick+0xfe>
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6a1a      	ldr	r2, [r3, #32]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2200      	movs	r2, #0
 800373a:	629a      	str	r2, [r3, #40]	@ 0x28
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1e5a      	subs	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374a:	2201      	movs	r2, #1
 800374c:	409a      	lsls	r2, r3
 800374e:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <xTaskIncrementTick+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	4a27      	ldr	r2, [pc, #156]	@ (80037f4 <xTaskIncrementTick+0x1bc>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375c:	4926      	ldr	r1, [pc, #152]	@ (80037f8 <xTaskIncrementTick+0x1c0>)
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	3304      	adds	r3, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	3204      	adds	r2, #4
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1d1a      	adds	r2, r3, #4
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4a17      	ldr	r2, [pc, #92]	@ (80037f8 <xTaskIncrementTick+0x1c0>)
 800379c:	441a      	add	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	615a      	str	r2, [r3, #20]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a6:	4914      	ldr	r1, [pc, #80]	@ (80037f8 <xTaskIncrementTick+0x1c0>)
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	1c59      	adds	r1, r3, #1
 80037b6:	4810      	ldr	r0, [pc, #64]	@ (80037f8 <xTaskIncrementTick+0x1c0>)
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4403      	add	r3, r0
 80037c2:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c4:	e763      	b.n	800368e <xTaskIncrementTick+0x56>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80037c6:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <xTaskIncrementTick+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	4a0b      	ldr	r2, [pc, #44]	@ (80037fc <xTaskIncrementTick+0x1c4>)
 80037ce:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80037d0:	69fb      	ldr	r3, [r7, #28]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000224 	.word	0x20000224
 80037e0:	20000200 	.word	0x20000200
 80037e4:	200001b4 	.word	0x200001b4
 80037e8:	200001b8 	.word	0x200001b8
 80037ec:	20000214 	.word	0x20000214
 80037f0:	2000021c 	.word	0x2000021c
 80037f4:	20000204 	.word	0x20000204
 80037f8:	20000128 	.word	0x20000128
 80037fc:	2000020c 	.word	0x2000020c

08003800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003806:	4b1c      	ldr	r3, [pc, #112]	@ (8003878 <vTaskSwitchContext+0x78>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800380e:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <vTaskSwitchContext+0x7c>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003814:	e02a      	b.n	800386c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8003816:	4b19      	ldr	r3, [pc, #100]	@ (800387c <vTaskSwitchContext+0x7c>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800381c:	4b18      	ldr	r3, [pc, #96]	@ (8003880 <vTaskSwitchContext+0x80>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f1c3 031f 	rsb	r3, r3, #31
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4a11      	ldr	r2, [pc, #68]	@ (8003884 <vTaskSwitchContext+0x84>)
 800383e:	4413      	add	r3, r2
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	3308      	adds	r3, #8
 8003854:	429a      	cmp	r2, r3
 8003856:	d104      	bne.n	8003862 <vTaskSwitchContext+0x62>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a07      	ldr	r2, [pc, #28]	@ (8003888 <vTaskSwitchContext+0x88>)
 800386a:	6013      	str	r3, [r2, #0]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	20000224 	.word	0x20000224
 800387c:	20000210 	.word	0x20000210
 8003880:	20000204 	.word	0x20000204
 8003884:	20000128 	.word	0x20000128
 8003888:	20000124 	.word	0x20000124

0800388c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003894:	f000 f84c 	bl	8003930 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <prvIdleTask+0x20>)
 800389a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038a8:	bf00      	nop
 80038aa:	e7f3      	b.n	8003894 <prvIdleTask+0x8>
 80038ac:	e000ed04 	.word	0xe000ed04

080038b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038b6:	2300      	movs	r3, #0
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	e00c      	b.n	80038d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4a12      	ldr	r2, [pc, #72]	@ (8003910 <prvInitialiseTaskLists+0x60>)
 80038c8:	4413      	add	r3, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fba8 	bl	8003020 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3301      	adds	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d9ef      	bls.n	80038bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038dc:	480d      	ldr	r0, [pc, #52]	@ (8003914 <prvInitialiseTaskLists+0x64>)
 80038de:	f7ff fb9f 	bl	8003020 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038e2:	480d      	ldr	r0, [pc, #52]	@ (8003918 <prvInitialiseTaskLists+0x68>)
 80038e4:	f7ff fb9c 	bl	8003020 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038e8:	480c      	ldr	r0, [pc, #48]	@ (800391c <prvInitialiseTaskLists+0x6c>)
 80038ea:	f7ff fb99 	bl	8003020 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80038ee:	480c      	ldr	r0, [pc, #48]	@ (8003920 <prvInitialiseTaskLists+0x70>)
 80038f0:	f7ff fb96 	bl	8003020 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80038f4:	480b      	ldr	r0, [pc, #44]	@ (8003924 <prvInitialiseTaskLists+0x74>)
 80038f6:	f7ff fb93 	bl	8003020 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <prvInitialiseTaskLists+0x78>)
 80038fc:	4a05      	ldr	r2, [pc, #20]	@ (8003914 <prvInitialiseTaskLists+0x64>)
 80038fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003900:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <prvInitialiseTaskLists+0x7c>)
 8003902:	4a05      	ldr	r2, [pc, #20]	@ (8003918 <prvInitialiseTaskLists+0x68>)
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000128 	.word	0x20000128
 8003914:	2000018c 	.word	0x2000018c
 8003918:	200001a0 	.word	0x200001a0
 800391c:	200001bc 	.word	0x200001bc
 8003920:	200001d0 	.word	0x200001d0
 8003924:	200001e8 	.word	0x200001e8
 8003928:	200001b4 	.word	0x200001b4
 800392c:	200001b8 	.word	0x200001b8

08003930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003936:	e019      	b.n	800396c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003938:	f000 f976 	bl	8003c28 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800393c:	4b10      	ldr	r3, [pc, #64]	@ (8003980 <prvCheckTasksWaitingTermination+0x50>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fbcf 	bl	80030ec <uxListRemove>
                --uxCurrentNumberOfTasks;
 800394e:	4b0d      	ldr	r3, [pc, #52]	@ (8003984 <prvCheckTasksWaitingTermination+0x54>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3b01      	subs	r3, #1
 8003954:	4a0b      	ldr	r2, [pc, #44]	@ (8003984 <prvCheckTasksWaitingTermination+0x54>)
 8003956:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <prvCheckTasksWaitingTermination+0x58>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <prvCheckTasksWaitingTermination+0x58>)
 8003960:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003962:	f000 f97b 	bl	8003c5c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f810 	bl	800398c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <prvCheckTasksWaitingTermination+0x58>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e1      	bne.n	8003938 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200001d0 	.word	0x200001d0
 8003984:	200001fc 	.word	0x200001fc
 8003988:	200001e4 	.word	0x200001e4

0800398c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fa8f 	bl	8003ebc <vPortFree>
            vPortFree( pxTCB );
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fa8c 	bl	8003ebc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b0:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <prvResetNextTaskUnblockTime+0x30>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039ba:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <prvResetNextTaskUnblockTime+0x34>)
 80039bc:	f04f 32ff 	mov.w	r2, #4294967295
 80039c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039c2:	e005      	b.n	80039d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039c4:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <prvResetNextTaskUnblockTime+0x30>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a04      	ldr	r2, [pc, #16]	@ (80039e0 <prvResetNextTaskUnblockTime+0x34>)
 80039ce:	6013      	str	r3, [r2, #0]
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	200001b4 	.word	0x200001b4
 80039e0:	2000021c 	.word	0x2000021c

080039e4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80039ee:	4b36      	ldr	r3, [pc, #216]	@ (8003ac8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039f4:	4b35      	ldr	r3, [pc, #212]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fb76 	bl	80030ec <uxListRemove>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10b      	bne.n	8003a1e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a06:	4b31      	ldr	r3, [pc, #196]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a1c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d124      	bne.n	8003a70 <prvAddCurrentTaskToDelayedList+0x8c>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d021      	beq.n	8003a70 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a2c:	4b29      	ldr	r3, [pc, #164]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	4b26      	ldr	r3, [pc, #152]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	6892      	ldr	r2, [r2, #8]
 8003a42:	60da      	str	r2, [r3, #12]
 8003a44:	4b21      	ldr	r3, [pc, #132]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	3204      	adds	r2, #4
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	4b1e      	ldr	r3, [pc, #120]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	1d1a      	adds	r2, r3, #4
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a60:	615a      	str	r2, [r3, #20]
 8003a62:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a6e:	e026      	b.n	8003abe <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d209      	bcs.n	8003a9c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a88:	4b13      	ldr	r3, [pc, #76]	@ (8003ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f7ff faf0 	bl	800307a <vListInsert>
}
 8003a9a:	e010      	b.n	8003abe <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <prvAddCurrentTaskToDelayedList+0xf8>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f7ff fae6 	bl	800307a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003aae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d202      	bcs.n	8003abe <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003ab8:	4a09      	ldr	r2, [pc, #36]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6013      	str	r3, [r2, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000200 	.word	0x20000200
 8003acc:	20000124 	.word	0x20000124
 8003ad0:	20000204 	.word	0x20000204
 8003ad4:	200001e8 	.word	0x200001e8
 8003ad8:	200001b8 	.word	0x200001b8
 8003adc:	200001b4 	.word	0x200001b4
 8003ae0:	2000021c 	.word	0x2000021c

08003ae4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3b04      	subs	r3, #4
 8003af4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003afc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3b04      	subs	r3, #4
 8003b02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f023 0201 	bic.w	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3b04      	subs	r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b14:	4a0c      	ldr	r2, [pc, #48]	@ (8003b48 <pxPortInitialiseStack+0x64>)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3b14      	subs	r3, #20
 8003b1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3b04      	subs	r3, #4
 8003b2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f06f 0202 	mvn.w	r2, #2
 8003b32:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3b20      	subs	r3, #32
 8003b38:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	08003b4d 	.word	0x08003b4d

08003b4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003b56:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	607b      	str	r3, [r7, #4]
    }
 8003b68:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b6a:	bf00      	nop
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0fc      	beq.n	8003b6c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b72:	bf00      	nop
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b80:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <pxCurrentTCBConst2>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	6808      	ldr	r0, [r1, #0]
 8003b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	f380 8809 	msr	PSP, r0
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8811 	msr	BASEPRI, r0
 8003b9a:	4770      	bx	lr
 8003b9c:	f3af 8000 	nop.w

08003ba0 <pxCurrentTCBConst2>:
 8003ba0:	20000124 	.word	0x20000124
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop

08003ba8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ba8:	4808      	ldr	r0, [pc, #32]	@ (8003bcc <prvPortStartFirstTask+0x24>)
 8003baa:	6800      	ldr	r0, [r0, #0]
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	f380 8808 	msr	MSP, r0
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8814 	msr	CONTROL, r0
 8003bba:	b662      	cpsie	i
 8003bbc:	b661      	cpsie	f
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	df00      	svc	0
 8003bc8:	bf00      	nop
 8003bca:	0000      	.short	0x0000
 8003bcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop

08003bd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003bd8:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <xPortStartScheduler+0x48>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8003c1c <xPortStartScheduler+0x48>)
 8003bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003be4:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <xPortStartScheduler+0x48>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0c      	ldr	r2, [pc, #48]	@ (8003c1c <xPortStartScheduler+0x48>)
 8003bea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bee:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003bf0:	f000 f8a4 	bl	8003d3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <xPortStartScheduler+0x4c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003bfa:	f000 f8b9 	bl	8003d70 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003bfe:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <xPortStartScheduler+0x50>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a08      	ldr	r2, [pc, #32]	@ (8003c24 <xPortStartScheduler+0x50>)
 8003c04:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003c08:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c0a:	f7ff ffcd 	bl	8003ba8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c0e:	f7ff fdf7 	bl	8003800 <vTaskSwitchContext>
    prvTaskExitError();
 8003c12:	f7ff ff9b 	bl	8003b4c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	e000ed20 	.word	0xe000ed20
 8003c20:	200000c0 	.word	0x200000c0
 8003c24:	e000ef34 	.word	0xe000ef34

08003c28 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c2e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	607b      	str	r3, [r7, #4]
    }
 8003c40:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003c42:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <vPortEnterCritical+0x30>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	4a03      	ldr	r2, [pc, #12]	@ (8003c58 <vPortEnterCritical+0x30>)
 8003c4a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	200000c0 	.word	0x200000c0

08003c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003c62:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <vPortExitCritical+0x30>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <vPortExitCritical+0x30>)
 8003c6a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003c6c:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <vPortExitCritical+0x30>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <vPortExitCritical+0x24>
 8003c74:	2300      	movs	r3, #0
 8003c76:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003c7e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	200000c0 	.word	0x200000c0

08003c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c90:	f3ef 8009 	mrs	r0, PSP
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	4b15      	ldr	r3, [pc, #84]	@ (8003cf0 <pxCurrentTCBConst>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	f01e 0f10 	tst.w	lr, #16
 8003ca0:	bf08      	it	eq
 8003ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003caa:	6010      	str	r0, [r2, #0]
 8003cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003cb0:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8003cb4:	f380 8811 	msr	BASEPRI, r0
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f7ff fd9e 	bl	8003800 <vTaskSwitchContext>
 8003cc4:	f04f 0000 	mov.w	r0, #0
 8003cc8:	f380 8811 	msr	BASEPRI, r0
 8003ccc:	bc09      	pop	{r0, r3}
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	6808      	ldr	r0, [r1, #0]
 8003cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd6:	f01e 0f10 	tst.w	lr, #16
 8003cda:	bf08      	it	eq
 8003cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ce0:	f380 8809 	msr	PSP, r0
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	f3af 8000 	nop.w

08003cf0 <pxCurrentTCBConst>:
 8003cf0:	20000124 	.word	0x20000124
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop

08003cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
        __asm volatile
 8003cfe:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	607b      	str	r3, [r7, #4]
    }
 8003d10:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003d12:	f7ff fc91 	bl	8003638 <xTaskIncrementTick>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <SysTick_Handler+0x40>)
 8003d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f383 8811 	msr	BASEPRI, r3
    }
 8003d2e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d40:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <vPortSetupTimerInterrupt+0x28>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d46:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <vPortSetupTimerInterrupt+0x2c>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d4c:	4b07      	ldr	r3, [pc, #28]	@ (8003d6c <vPortSetupTimerInterrupt+0x30>)
 8003d4e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003d52:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d54:	4b03      	ldr	r3, [pc, #12]	@ (8003d64 <vPortSetupTimerInterrupt+0x28>)
 8003d56:	2207      	movs	r2, #7
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000e010 	.word	0xe000e010
 8003d68:	e000e018 	.word	0xe000e018
 8003d6c:	e000e014 	.word	0xe000e014

08003d70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003d70:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003d80 <vPortEnableVFP+0x10>
 8003d74:	6801      	ldr	r1, [r0, #0]
 8003d76:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003d7a:	6001      	str	r1, [r0, #0]
 8003d7c:	4770      	bx	lr
 8003d7e:	0000      	.short	0x0000
 8003d80:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop

08003d88 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003d94:	f7ff fb64 	bl	8003460 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003d98:	4b43      	ldr	r3, [pc, #268]	@ (8003ea8 <pvPortMalloc+0x120>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003da0:	f000 f8ca 	bl	8003f38 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d012      	beq.n	8003dd0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003daa:	2208      	movs	r2, #8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	3308      	adds	r3, #8
 8003db6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d804      	bhi.n	8003dcc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	e001      	b.n	8003dd0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	db60      	blt.n	8003e98 <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d05d      	beq.n	8003e98 <pvPortMalloc+0x110>
 8003ddc:	4b33      	ldr	r3, [pc, #204]	@ (8003eac <pvPortMalloc+0x124>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d858      	bhi.n	8003e98 <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003de6:	4b32      	ldr	r3, [pc, #200]	@ (8003eb0 <pvPortMalloc+0x128>)
 8003de8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8003dea:	4b31      	ldr	r3, [pc, #196]	@ (8003eb0 <pvPortMalloc+0x128>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003df0:	e004      	b.n	8003dfc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d903      	bls.n	8003e0e <pvPortMalloc+0x86>
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f1      	bne.n	8003df2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003e0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ea8 <pvPortMalloc+0x120>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d03f      	beq.n	8003e98 <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	4413      	add	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	1ad2      	subs	r2, r2, r3
 8003e32:	2308      	movs	r3, #8
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d90f      	bls.n	8003e5a <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f8cb 	bl	8003ff0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e5a:	4b14      	ldr	r3, [pc, #80]	@ (8003eac <pvPortMalloc+0x124>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	4a11      	ldr	r2, [pc, #68]	@ (8003eac <pvPortMalloc+0x124>)
 8003e66:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e68:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <pvPortMalloc+0x124>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <pvPortMalloc+0x12c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d203      	bcs.n	8003e7c <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e74:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <pvPortMalloc+0x124>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb4 <pvPortMalloc+0x12c>)
 8003e7a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <pvPortMalloc+0x130>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	4a08      	ldr	r2, [pc, #32]	@ (8003eb8 <pvPortMalloc+0x130>)
 8003e96:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003e98:	f7ff faf0 	bl	800347c <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8003e9c:	697b      	ldr	r3, [r7, #20]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20002230 	.word	0x20002230
 8003eac:	20002234 	.word	0x20002234
 8003eb0:	20002228 	.word	0x20002228
 8003eb4:	20002238 	.word	0x20002238
 8003eb8:	2000223c 	.word	0x2000223c

08003ebc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d02b      	beq.n	8003f26 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003ece:	2308      	movs	r3, #8
 8003ed0:	425b      	negs	r3, r3
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	0fdb      	lsrs	r3, r3, #31
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01c      	beq.n	8003f26 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d118      	bne.n	8003f26 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003f00:	f7ff faae 	bl	8003460 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <vPortFree+0x74>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	4a08      	ldr	r2, [pc, #32]	@ (8003f30 <vPortFree+0x74>)
 8003f10:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f12:	68b8      	ldr	r0, [r7, #8]
 8003f14:	f000 f86c 	bl	8003ff0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003f18:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <vPortFree+0x78>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	4a05      	ldr	r2, [pc, #20]	@ (8003f34 <vPortFree+0x78>)
 8003f20:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003f22:	f7ff faab 	bl	800347c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20002234 	.word	0x20002234
 8003f34:	20002240 	.word	0x20002240

08003f38 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f42:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003f44:	4b25      	ldr	r3, [pc, #148]	@ (8003fdc <prvHeapInit+0xa4>)
 8003f46:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00c      	beq.n	8003f6c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3307      	adds	r3, #7
 8003f56:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <prvHeapInit+0xa4>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f70:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe0 <prvHeapInit+0xa8>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f76:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <prvHeapInit+0xa8>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	4413      	add	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f84:	2208      	movs	r2, #8
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0307 	bic.w	r3, r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a13      	ldr	r2, [pc, #76]	@ (8003fe4 <prvHeapInit+0xac>)
 8003f98:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f9a:	4b12      	ldr	r3, [pc, #72]	@ (8003fe4 <prvHeapInit+0xac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003fa2:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <prvHeapInit+0xac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	1ad2      	subs	r2, r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <prvHeapInit+0xac>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a08      	ldr	r2, [pc, #32]	@ (8003fe8 <prvHeapInit+0xb0>)
 8003fc6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a07      	ldr	r2, [pc, #28]	@ (8003fec <prvHeapInit+0xb4>)
 8003fce:	6013      	str	r3, [r2, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	20000228 	.word	0x20000228
 8003fe0:	20002228 	.word	0x20002228
 8003fe4:	20002230 	.word	0x20002230
 8003fe8:	20002238 	.word	0x20002238
 8003fec:	20002234 	.word	0x20002234

08003ff0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ff8:	4b28      	ldr	r3, [pc, #160]	@ (800409c <prvInsertBlockIntoFreeList+0xac>)
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e002      	b.n	8004004 <prvInsertBlockIntoFreeList+0x14>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d8f7      	bhi.n	8003ffe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4413      	add	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	d108      	bne.n	8004032 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	441a      	add	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	441a      	add	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d118      	bne.n	8004078 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <prvInsertBlockIntoFreeList+0xb0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d00d      	beq.n	800406e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e008      	b.n	8004080 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800406e:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <prvInsertBlockIntoFreeList+0xb0>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e003      	b.n	8004080 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	429a      	cmp	r2, r3
 8004086:	d002      	beq.n	800408e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20002228 	.word	0x20002228
 80040a0:	20002230 	.word	0x20002230

080040a4 <main>:
/* ------------------------------------------------------------ */

void reset_system(void);

int main(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0

	/* Assembly */
//	reset_system();
	vSysInit();
 80040a8:	f7fc ffd4 	bl	8001054 <vSysInit>
	vTaskStartScheduler();
 80040ac:	f7ff f99c 	bl	80033e8 <vTaskStartScheduler>

	for(;;);
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <main+0xc>

080040b4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <prvGetRegistersFromStack>:
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"

/**
 * @see http://www.freertos.org/Debugging-Hard-Faults-On-Cortex-M-Microcontrollers.html
 */
void prvGetRegistersFromStack(uint32_t *pulFaultStackAddress) {
 80040c2:	b480      	push	{r7}
 80040c4:	b08b      	sub	sp, #44	@ 0x2c
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  volatile uint32_t r12;
  volatile uint32_t lr; /* Link register. */
  volatile uint32_t pc; /* Program counter. */
  volatile uint32_t psr;/* Program status register. */

  r0 = pulFaultStackAddress[0];
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
  r1 = pulFaultStackAddress[1];
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	623b      	str	r3, [r7, #32]
  r2 = pulFaultStackAddress[2];
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	61fb      	str	r3, [r7, #28]
  r3 = pulFaultStackAddress[3];
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	61bb      	str	r3, [r7, #24]

  r12 = pulFaultStackAddress[4];
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	617b      	str	r3, [r7, #20]
  lr = pulFaultStackAddress[5];
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	613b      	str	r3, [r7, #16]
  pc = pulFaultStackAddress[6];
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	60fb      	str	r3, [r7, #12]
  psr = pulFaultStackAddress[7];
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	60bb      	str	r3, [r7, #8]

  /* Trigger break point here, so that the debugger stops at this line. */
  __ASM volatile("BKPT #02");
 80040fa:	be02      	bkpt	0x0002
}
 80040fc:	bf00      	nop
 80040fe:	372c      	adds	r7, #44	@ 0x2c
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HardFault_Handler>:

#pragma GCC diagnostic pop

void HardFault_Handler(void) {
    __asm volatile (
 8004108:	f01e 0f04 	tst.w	lr, #4
 800410c:	bf0c      	ite	eq
 800410e:	f3ef 8008 	mrseq	r0, MSP
 8004112:	f3ef 8009 	mrsne	r0, PSP
 8004116:	6981      	ldr	r1, [r0, #24]
 8004118:	4a00      	ldr	r2, [pc, #0]	@ (800411c <handler2_address_const>)
 800411a:	4710      	bx	r2

0800411c <handler2_address_const>:
 800411c:	080040c3 	.word	0x080040c3
        " ldr r1, [r0, #24]                                         \n"
        " ldr r2, handler2_address_const                            \n"
        " bx r2                                                     \n"
        " handler2_address_const: .word prvGetRegistersFromStack    \n"
    );
}
 8004120:	bf00      	nop

08004122 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004126:	bf00      	nop
 8004128:	e7fd      	b.n	8004126 <MemManage_Handler+0x4>

0800412a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800412e:	bf00      	nop
 8004130:	e7fd      	b.n	800412e <BusFault_Handler+0x4>

08004132 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004136:	bf00      	nop
 8004138:	e7fd      	b.n	8004136 <UsageFault_Handler+0x4>

0800413a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800414c:	4b16      	ldr	r3, [pc, #88]	@ (80041a8 <SystemInit+0x60>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	4a15      	ldr	r2, [pc, #84]	@ (80041a8 <SystemInit+0x60>)
 8004154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800415c:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <SystemInit+0x64>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a12      	ldr	r2, [pc, #72]	@ (80041ac <SystemInit+0x64>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004168:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <SystemInit+0x64>)
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800416e:	4b0f      	ldr	r3, [pc, #60]	@ (80041ac <SystemInit+0x64>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a0e      	ldr	r2, [pc, #56]	@ (80041ac <SystemInit+0x64>)
 8004174:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8004178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800417c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800417e:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <SystemInit+0x64>)
 8004180:	4a0b      	ldr	r2, [pc, #44]	@ (80041b0 <SystemInit+0x68>)
 8004182:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004184:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <SystemInit+0x64>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a08      	ldr	r2, [pc, #32]	@ (80041ac <SystemInit+0x64>)
 800418a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800418e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004190:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <SystemInit+0x64>)
 8004192:	2200      	movs	r2, #0
 8004194:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004196:	f000 f80d 	bl	80041b4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800419a:	4b03      	ldr	r3, [pc, #12]	@ (80041a8 <SystemInit+0x60>)
 800419c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80041a0:	609a      	str	r2, [r3, #8]
#endif
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	e000ed00 	.word	0xe000ed00
 80041ac:	40023800 	.word	0x40023800
 80041b0:	24003010 	.word	0x24003010

080041b4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	2300      	movs	r3, #0
 80041c0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80041c2:	4b35      	ldr	r3, [pc, #212]	@ (8004298 <SetSysClock+0xe4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a34      	ldr	r2, [pc, #208]	@ (8004298 <SetSysClock+0xe4>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80041ce:	4b32      	ldr	r3, [pc, #200]	@ (8004298 <SetSysClock+0xe4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3301      	adds	r3, #1
 80041dc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d103      	bne.n	80041ec <SetSysClock+0x38>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041ea:	d1f0      	bne.n	80041ce <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80041ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004298 <SetSysClock+0xe4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80041f8:	2301      	movs	r3, #1
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	e001      	b.n	8004202 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80041fe:	2300      	movs	r3, #0
 8004200:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d140      	bne.n	800428a <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004208:	4b23      	ldr	r3, [pc, #140]	@ (8004298 <SetSysClock+0xe4>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	4a22      	ldr	r2, [pc, #136]	@ (8004298 <SetSysClock+0xe4>)
 800420e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004212:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 8004214:	4b21      	ldr	r3, [pc, #132]	@ (800429c <SetSysClock+0xe8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a20      	ldr	r2, [pc, #128]	@ (800429c <SetSysClock+0xe8>)
 800421a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800421e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004220:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <SetSysClock+0xe4>)
 8004222:	4a1d      	ldr	r2, [pc, #116]	@ (8004298 <SetSysClock+0xe4>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */

#if defined(STM32F401xx) || defined(STM32F413_423xx)
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8004228:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <SetSysClock+0xe4>)
 800422a:	4a1b      	ldr	r2, [pc, #108]	@ (8004298 <SetSysClock+0xe4>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8004230:	4b19      	ldr	r3, [pc, #100]	@ (8004298 <SetSysClock+0xe4>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a18      	ldr	r2, [pc, #96]	@ (8004298 <SetSysClock+0xe4>)
 8004236:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800423a:	6093      	str	r3, [r2, #8]
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800423c:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <SetSysClock+0xe4>)
 800423e:	4a18      	ldr	r2, [pc, #96]	@ (80042a0 <SetSysClock+0xec>)
 8004240:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004242:	4b15      	ldr	r3, [pc, #84]	@ (8004298 <SetSysClock+0xe4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	@ (8004298 <SetSysClock+0xe4>)
 8004248:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800424c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800424e:	bf00      	nop
 8004250:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <SetSysClock+0xe4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f9      	beq.n	8004250 <SetSysClock+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
#endif /* STM32F413_423xx */

#if defined(STM32F401xx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800425c:	4b11      	ldr	r3, [pc, #68]	@ (80042a4 <SetSysClock+0xf0>)
 800425e:	f240 7202 	movw	r2, #1794	@ 0x702
 8004262:	601a      	str	r2, [r3, #0]
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <SetSysClock+0xe4>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a0b      	ldr	r2, [pc, #44]	@ (8004298 <SetSysClock+0xe4>)
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004270:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <SetSysClock+0xe4>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4a08      	ldr	r2, [pc, #32]	@ (8004298 <SetSysClock+0xe4>)
 8004276:	f043 0302 	orr.w	r3, r3, #2
 800427a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800427c:	bf00      	nop
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <SetSysClock+0xe4>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b08      	cmp	r3, #8
 8004288:	d1f9      	bne.n	800427e <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000
 80042a0:	07415419 	.word	0x07415419
 80042a4:	40023c00 	.word	0x40023c00

080042a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042a8:	480d      	ldr	r0, [pc, #52]	@ (80042e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042ac:	f7ff ff4c 	bl	8004148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042b0:	480c      	ldr	r0, [pc, #48]	@ (80042e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80042b2:	490d      	ldr	r1, [pc, #52]	@ (80042e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042b4:	4a0d      	ldr	r2, [pc, #52]	@ (80042ec <LoopForever+0xe>)
  movs r3, #0
 80042b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042b8:	e002      	b.n	80042c0 <LoopCopyDataInit>

080042ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042be:	3304      	adds	r3, #4

080042c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042c4:	d3f9      	bcc.n	80042ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042c6:	4a0a      	ldr	r2, [pc, #40]	@ (80042f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042c8:	4c0a      	ldr	r4, [pc, #40]	@ (80042f4 <LoopForever+0x16>)
  movs r3, #0
 80042ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042cc:	e001      	b.n	80042d2 <LoopFillZerobss>

080042ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042d0:	3204      	adds	r2, #4

080042d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042d4:	d3fb      	bcc.n	80042ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042d6:	f000 f819 	bl	800430c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042da:	f7ff fee3 	bl	80040a4 <main>

080042de <LoopForever>:

LoopForever:
  b LoopForever
 80042de:	e7fe      	b.n	80042de <LoopForever>
  ldr   r0, =_estack
 80042e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80042e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042e8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80042ec:	080043a0 	.word	0x080043a0
  ldr r2, =_sbss
 80042f0:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80042f4:	20002244 	.word	0x20002244

080042f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042f8:	e7fe      	b.n	80042f8 <ADC_IRQHandler>

080042fa <memset>:
 80042fa:	4402      	add	r2, r0
 80042fc:	4603      	mov	r3, r0
 80042fe:	4293      	cmp	r3, r2
 8004300:	d100      	bne.n	8004304 <memset+0xa>
 8004302:	4770      	bx	lr
 8004304:	f803 1b01 	strb.w	r1, [r3], #1
 8004308:	e7f9      	b.n	80042fe <memset+0x4>
	...

0800430c <__libc_init_array>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	4d0d      	ldr	r5, [pc, #52]	@ (8004344 <__libc_init_array+0x38>)
 8004310:	4c0d      	ldr	r4, [pc, #52]	@ (8004348 <__libc_init_array+0x3c>)
 8004312:	1b64      	subs	r4, r4, r5
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	2600      	movs	r6, #0
 8004318:	42a6      	cmp	r6, r4
 800431a:	d109      	bne.n	8004330 <__libc_init_array+0x24>
 800431c:	4d0b      	ldr	r5, [pc, #44]	@ (800434c <__libc_init_array+0x40>)
 800431e:	4c0c      	ldr	r4, [pc, #48]	@ (8004350 <__libc_init_array+0x44>)
 8004320:	f000 f818 	bl	8004354 <_init>
 8004324:	1b64      	subs	r4, r4, r5
 8004326:	10a4      	asrs	r4, r4, #2
 8004328:	2600      	movs	r6, #0
 800432a:	42a6      	cmp	r6, r4
 800432c:	d105      	bne.n	800433a <__libc_init_array+0x2e>
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	f855 3b04 	ldr.w	r3, [r5], #4
 8004334:	4798      	blx	r3
 8004336:	3601      	adds	r6, #1
 8004338:	e7ee      	b.n	8004318 <__libc_init_array+0xc>
 800433a:	f855 3b04 	ldr.w	r3, [r5], #4
 800433e:	4798      	blx	r3
 8004340:	3601      	adds	r6, #1
 8004342:	e7f2      	b.n	800432a <__libc_init_array+0x1e>
 8004344:	08004398 	.word	0x08004398
 8004348:	08004398 	.word	0x08004398
 800434c:	08004398 	.word	0x08004398
 8004350:	0800439c 	.word	0x0800439c

08004354 <_init>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	bf00      	nop
 8004358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435a:	bc08      	pop	{r3}
 800435c:	469e      	mov	lr, r3
 800435e:	4770      	bx	lr

08004360 <_fini>:
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004362:	bf00      	nop
 8004364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004366:	bc08      	pop	{r3}
 8004368:	469e      	mov	lr, r3
 800436a:	4770      	bx	lr
